<Project DefaultTargets="Clean;Build;Test" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <RootDir>$(MSBuildProjectDirectory)</RootDir>
    <BuildDir>$(RootDir)\build</BuildDir>
    <BuildBinDir>$(BuildDir)\bin</BuildBinDir>
    <BuildReportsDir>$(BuildDir)\reports</BuildReportsDir>
    <BuildDocsDir>$(BuildDir)\docs</BuildDocsDir>
    <BuildReleaseDir>$(BuildDir)\release</BuildReleaseDir>
    <LibsDir>$(RootDir)\libs</LibsDir>
    <SourceDir>$(RootDir)\src</SourceDir>

    <Version Condition="'$(Version)'==''">0.0.0.0</Version>
    <NonInteractive Condition="'$(NonInteractive)'==''">false</NonInteractive>
    <Coverage Condition="'$(Coverage)'==''">true</Coverage>

    <HTMLHelpCompilerPath>$(ProgramFiles)\HTML Help Workshop\hhc.exe</HTMLHelpCompilerPath>
    <VS2005SDKHelpPath>$(ProgramFiles)\Visual Studio 2005 SDK\HelpIntegrationWizard\MSHelp2</VS2005SDKHelpPath>
    <NSISPath>$(ProgramFiles)\NSIS\makensis.exe</NSISPath>
    <MSBuildCommunityTasksPath>$(LibsDir)\MSBuildCommunityTasks</MSBuildCommunityTasksPath>

    <CSharpProperties>
      Configuration=Release;
      Version=$(Version);
      CustomAfterMicrosoftCommonTargets=$(RootDir)\Build.Custom.Targets;
    </CSharpProperties>
  </PropertyGroup>

  <!-- Note: The tasks assembly gets loaded lazily. -->
  <UsingTask AssemblyFile="$(BuildBinDir)\Gallio.MSBuildTasks.dll" TaskName="Gallio.MSBuildTasks.Gallio" />

  <Import Project="$(MSBuildCommunityTasksPath)\MSBuild.Community.Tasks.Targets"/>

  <!-- Load up configuration information for all of the modules to build.
       They may contain the following items:

       - CSharpProject: Path of a C# project file.
       - TestAssembly: Path of a compiled test assembly to run.

       - InstallerInclude: Path of an include file to add to the NSIS installer. (TODO)
       - DocumentedAssembly: Path of an assembly with XML documentation to include.  (TODO)

       - Binary: Path of a file to copy into the build\bin dir.
       - Document: Path of a file to copy into the build\docs dir.
       - File: Path of a file to copy into the build dir.

       (Binary, Document and File may have optional Folder metadata
        to specify a relative destination path within the respective dir.)

  <Import Project="$(SourceDir)\All.module" />

  <!-- The NDoc projects to compile. -->
  <ItemGroup>
    <NDocProject Include="$(SourceDir)\MbUnit\Docs\MbUnit.ndoc" />
  </ItemGroup>

  <ItemGroup>
    <File Include="$(RootDir)\MbUnit License.txt" />
    <File Include="$(RootDir)\Release Notes.txt" />
    <File Include="$(RootDir)\ASL - Apache Software Foundation License.txt" />
  </ItemGroup>

  <Target Name="Build"
          DependsOnTargets="BuildCSharpProjects;CopyFiles" />

  <Target Name="Rebuild"
          DependsOnTargets="RebuildCSharpProjects;CopyFiles" />

  <Target Name="Clean"
          DependsOnTargets="CleanCSharpProjects">
    <RemoveDir Directories="$(BuildDir)"
               Condition="Exists('$(BuildDir)')" />
  </Target>

  <Target Name="Test">
    <Gallio Condition="! $(NonInteractive)"
            Assemblies="@(TestAssembly)"
            ReportDirectory="$(BuildReportsDir)"
            ReportTypes="Html"
            IgnoreFailures="true"
            ShowReports="true">
      <Output TaskParameter="ExitCode" PropertyName="MbUnitExitCode" />
    </Gallio>

    <Gallio Condition="$(NonInteractive)"
            Assemblies="@(TestAssembly)"
            ReportDirectory="$(BuildReportsDir)"
            ReportTypes="Xml"
            IgnoreFailures="true">
      <Output TaskParameter="ExitCode" PropertyName="MbUnitExitCode" />
    </Gallio>

    <Warning Text="Some MbUnit tests failed!"
             Condition="'$(MbUnitExitCode)'!='0'" />
  </Target>

  <Target Name="Release"
          DependsOnTargets="Clean;Build;Test;BuildDocs;BuildInstaller;BuildZip" />

  <Target Name="BuildCSharpProjects">
    <MSBuild Projects="@(CSharpProject)"
             Targets="Build"
             Properties="$(CSharpProperties)" />
  </Target>

  <Target Name="RebuildCSharpProjects">
    <MSBuild Projects="@(CSharpProject)"
             Targets="Rebuild"
             Properties="$(CSharpProperties)" />
  </Target>

  <Target Name="CleanCSharpProjects">
    <MSBuild Projects="@(CSharpProject)"
             Targets="Clean"
             Properties="$(CSharpProperties)" />
  </Target>

  <Target Name="CopyFiles"
          DependsOnTargets="CreateBuildDir">
    <Copy SourceFiles="@(Binary)"
          DestinationFolder="$(BuildBinDir)\%(Binary.Folder)\%(RecursiveDir)" />
    <Copy SourceFiles="@(Document)"
          DestinationFolder="$(BuildDocsDir)\%(Document.Folder)\%(RecursiveDir)" />
    <Copy SourceFiles="@(File)"
          DestinationFolder="$(BuildDir)\%(File.Folder)\%(RecursiveDir)" />
  </Target>

  <Target Name="BuildDocs"
          DependsOnTargets="BuildXMLDocs;BuildCHMDocs;BuildHxSDocs" />

  <!-- Produce clean Intellisense docs with "inheritdoc" accounted for. -->
  <Target Name="BuildXMLDocs">
    <Exec Command="&quot;$(LibsDir)\NDoc2\NDocConsole.exe&quot; -documenter=Intellisense -project=&quot;%(NDocProject.Identity)&quot;" />
    <Delete Files="$(BuildBinDir)\ndoc_qa.log;$(BuildBinDir)\ndoc_build.log" />
  </Target>

  <Target Name="BuildCHMDocs">
    <Warning Text="Microsoft HTML Help Workshop must be installed so that Compiled HTML help (CHM) documentation can be generated.  Look in libs\Setup Files for the Microsoft HTML Help Workshop installer."
             Condition="! Exists('$(HTMLHelpCompilerPath)')" />

    <Exec Command="&quot;$(LibsDir)\NDoc2\NDocConsole.exe&quot; -documenter=MSDN-CHM -project=&quot;%(NDocProject.Identity)&quot;"
          Condition="Exists('$(HTMLHelpCompilerPath)')" />
  </Target>

  <Target Name="BuildHxSDocs">
    <Warning Text="Visual Studio 2005 SDK must be installed so that HTML Help 2 (Hxs) documentation can be generated for integration with the Visual Studio 2005 help system.  Check Microsoft's site for the Visual Studio 2005 SDK installer."
           Condition="! Exists('$(VS2005SDKHelpPath)')" />

    <Exec Command="&quot;$(LibsDir)\NDoc2\NDocConsole.exe&quot; -documenter=MSDN-Help2 -project=&quot;%(NDocProject.Identity)&quot;"
          Condition="Exists('$(VS2005SDKHelpPath)')" />
  </Target>

  <Target Name="BuildInstaller"
          DependsOnTargets="CreateBuildDir">
    <Warning Text="The NSIS tools must be installed to generate the installer.  Look in libs\Setup Files for the NSIS installer."
             Condition="! Exists('$(NSISPath)')" />

    <Exec Command="&quot;$(NSISPath)&quot; /V2 /NOCONFIG /DVERSION=$(Version) &quot;$(SourceDir)\Installer\MbUnit.nsi&quot;"
          Condition="Exists('$(NSISPath)')" />
  </Target>

  <Target Name="BuildZip"
          DependsOnTargets="CreateBuildDir">
    <CreateItem Include="$(BuildBinDir)\**\*.*;$(BuildDocsDir)\**\*.*"
                Exclude="$(BuildDocsDir)\ndoc_msdn_temp\**\*.*">
      <Output TaskParameter="Include" ItemName="ZipFiles" />
    </CreateItem>

    <Zip Files="@(ZipFiles)"
         WorkingDirectory="$(BuildDir)"
         ZipFileName="$(BuildReleaseDir)\MbUnit-$(Version).zip"
         ZipLevel="9" />
  </Target>

  <Target Name="CreateBuildDir">
    <MakeDir Directories="$(BuildDir);$(BuildBinDir);$(BuildReportsDir);$(BuildDocsDir);$(BuildReleaseDir)" />
  </Target>
</Project>
