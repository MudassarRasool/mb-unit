//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TestFu.Tests.Data {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("ParentChildDataSet")]
    public class ParentChildDataSet : System.Data.DataSet {
        
        private TreeNodesDataTable tableTreeNodes;
        
        private System.Data.DataRelation relationFK_TreeNodes_ParentTreeNodes;
        
        public ParentChildDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        protected ParentChildDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["TreeNodes"] != null)) {
                    base.Tables.Add(new TreeNodesDataTable(ds.Tables["TreeNodes"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TreeNodesDataTable TreeNodes {
            get {
                return this.tableTreeNodes;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        public override System.Data.DataSet Clone() {
            ParentChildDataSet cln = ((ParentChildDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["TreeNodes"] != null)) {
                base.Tables.Add(new TreeNodesDataTable(ds.Tables["TreeNodes"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableTreeNodes = ((TreeNodesDataTable)(base.Tables["TreeNodes"]));
            if ((initTable == true)) {
                if ((this.tableTreeNodes != null)) {
                    this.tableTreeNodes.InitVars();
                }
            }
            this.relationFK_TreeNodes_ParentTreeNodes = this.Relations["FK_TreeNodes_ParentTreeNodes"];
        }
        
        private void InitClass() {
            this.DataSetName = "ParentChildDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ParentChildDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableTreeNodes = new TreeNodesDataTable();
            base.Tables.Add(this.tableTreeNodes);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_TreeNodes_ParentTreeNodes", new System.Data.DataColumn[] {
                        this.tableTreeNodes.TreeNodeIDColumn}, new System.Data.DataColumn[] {
                        this.tableTreeNodes.ParentTreeNodeIDColumn});
            this.tableTreeNodes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            this.relationFK_TreeNodes_ParentTreeNodes = new System.Data.DataRelation("FK_TreeNodes_ParentTreeNodes", new System.Data.DataColumn[] {
                        this.tableTreeNodes.TreeNodeIDColumn}, new System.Data.DataColumn[] {
                        this.tableTreeNodes.ParentTreeNodeIDColumn}, false);
            this.relationFK_TreeNodes_ParentTreeNodes.Nested = true;
            this.Relations.Add(this.relationFK_TreeNodes_ParentTreeNodes);
            this.ExtendedProperties.Add("DSGenerator_DataSetName", "ParentChildDataSet");
            this.ExtendedProperties.Add("User_DataSetName", "ParentChildDataSet");
        }
        
        private bool ShouldSerializeTreeNodes() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            ParentChildDataSet ds = new ParentChildDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            if (PublishLegacyWSDL()) {
                System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
                any.Namespace = ds.Namespace;
                sequence.Items.Add(any);
            }
            else {
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(0);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                sequence.MaxOccurs = decimal.MaxValue;
                System.Xml.Schema.XmlSchemaAttribute attribute = new System.Xml.Schema.XmlSchemaAttribute();
                attribute.Name = "namespace";
                attribute.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute);
            }
            type.Particle = sequence;
            return type;
        }
        
        protected static bool PublishLegacyWSDL() {
            System.Collections.Specialized.NameValueCollection settings = ((System.Collections.Specialized.NameValueCollection)(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset")));
            if ((settings != null)) {
                string[] values = settings.GetValues("WSDL_VERSION");
                if ((values != null)) {
                    float version = float.Parse(((string)(values[0])), ((System.IFormatProvider)(null)));
                    return (version < 2);
                }
            }
            return true;
        }
        
        public delegate void TreeNodesRowChangeEventHandler(object sender, TreeNodesRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class TreeNodesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTreeNodeID;
            
            private System.Data.DataColumn columnParentTreeNodeID;
            
            private System.Data.DataColumn columnTreeNodeName;
            
            private bool m_suspendValidation = false;
            
            public TreeNodesDataTable() {
                this.TableName = "TreeNodes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal TreeNodesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected TreeNodesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn TreeNodeIDColumn {
                get {
                    return this.columnTreeNodeID;
                }
            }
            
            internal System.Data.DataColumn ParentTreeNodeIDColumn {
                get {
                    return this.columnParentTreeNodeID;
                }
            }
            
            internal System.Data.DataColumn TreeNodeNameColumn {
                get {
                    return this.columnTreeNodeName;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public TreeNodesRow this[int index] {
                get {
                    return ((TreeNodesRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event TreeNodeIDChangeEventHandler TreeNodeIDChanging;
            
            public event TreeNodeIDChangeEventHandler TreeNodeIDChanged;
            
            public event ParentTreeNodeIDChangeEventHandler ParentTreeNodeIDChanging;
            
            public event ParentTreeNodeIDChangeEventHandler ParentTreeNodeIDChanged;
            
            public event TreeNodeNameChangeEventHandler TreeNodeNameChanging;
            
            public event TreeNodeNameChangeEventHandler TreeNodeNameChanged;
            
            public event TreeNodesRowChangeEventHandler TreeNodesRowChanged;
            
            public event TreeNodesRowChangeEventHandler TreeNodesRowChanging;
            
            public event TreeNodesRowChangeEventHandler TreeNodesRowDeleted;
            
            public event TreeNodesRowChangeEventHandler TreeNodesRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "TreeNodeID")) {
                    if ((this.TreeNodeIDChanging != null)) {
                        this.TreeNodeIDChanging(this, new TreeNodeIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "ParentTreeNodeID")) {
                        if ((this.ParentTreeNodeIDChanging != null)) {
                            this.ParentTreeNodeIDChanging(this, new ParentTreeNodeIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "TreeNodeName")) {
                            if ((this.TreeNodeNameChanging != null)) {
                                this.TreeNodeNameChanging(this, new TreeNodeNameChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "TreeNodeID")) {
                    if ((this.TreeNodeIDChanged != null)) {
                        this.TreeNodeIDChanged(this, new TreeNodeIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "ParentTreeNodeID")) {
                        if ((this.ParentTreeNodeIDChanged != null)) {
                            this.ParentTreeNodeIDChanged(this, new ParentTreeNodeIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "TreeNodeName")) {
                            if ((this.TreeNodeNameChanged != null)) {
                                this.TreeNodeNameChanged(this, new TreeNodeNameChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            public void AddTreeNodesRow(TreeNodesRow row) {
                this.Rows.Add(row);
            }
            
            public TreeNodesRow AddTreeNodesRow(int TreeNodeID, TreeNodesRow parentTreeNodesRowByFK_TreeNodes_ParentTreeNodes, string TreeNodeName) {
                TreeNodesRow rowTreeNodesRow = ((TreeNodesRow)(this.NewRow()));
                rowTreeNodesRow.ItemArray = new object[] {
                        TreeNodeID,
                        parentTreeNodesRowByFK_TreeNodes_ParentTreeNodes[0],
                        TreeNodeName};
                this.Rows.Add(rowTreeNodesRow);
                return rowTreeNodesRow;
            }
            
            public TreeNodesRow FindByTreeNodeID(int TreeNodeID) {
                return ((TreeNodesRow)(this.Rows.Find(new object[] {
                            TreeNodeID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                TreeNodesDataTable cln = ((TreeNodesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new TreeNodesDataTable();
            }
            
            internal void InitVars() {
                this.columnTreeNodeID = base.Columns["TreeNodeID"];
                this.columnParentTreeNodeID = base.Columns["ParentTreeNodeID"];
                this.columnTreeNodeName = base.Columns["TreeNodeName"];
            }
            
            private void InitClass() {
                this.columnTreeNodeID = new System.Data.DataColumn("TreeNodeID", typeof(int), null, System.Data.MappingType.Element);
                this.columnTreeNodeID.ExtendedProperties.Add("Generator_ChangedEventName", "TreeNodeIDChanged");
                this.columnTreeNodeID.ExtendedProperties.Add("Generator_ChangingEventName", "TreeNodeIDChanging");
                this.columnTreeNodeID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "TreeNodeID");
                this.columnTreeNodeID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "TreeNodeIDColumn");
                this.columnTreeNodeID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnTreeNodeID");
                this.columnTreeNodeID.ExtendedProperties.Add("Generator_DelegateName", "TreeNodeIDChangeEventHandler");
                this.columnTreeNodeID.ExtendedProperties.Add("Generator_EventArgName", "TreeNodeIDChangeEventArg");
                this.columnTreeNodeID.ExtendedProperties.Add("User_ColumnName", "TreeNodeID");
                base.Columns.Add(this.columnTreeNodeID);
                this.columnParentTreeNodeID = new System.Data.DataColumn("ParentTreeNodeID", typeof(int), null, System.Data.MappingType.Element);
                this.columnParentTreeNodeID.ExtendedProperties.Add("Generator_ChangedEventName", "ParentTreeNodeIDChanged");
                this.columnParentTreeNodeID.ExtendedProperties.Add("Generator_ChangingEventName", "ParentTreeNodeIDChanging");
                this.columnParentTreeNodeID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ParentTreeNodeID");
                this.columnParentTreeNodeID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ParentTreeNodeIDColumn");
                this.columnParentTreeNodeID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnParentTreeNodeID");
                this.columnParentTreeNodeID.ExtendedProperties.Add("Generator_DelegateName", "ParentTreeNodeIDChangeEventHandler");
                this.columnParentTreeNodeID.ExtendedProperties.Add("Generator_EventArgName", "ParentTreeNodeIDChangeEventArg");
                this.columnParentTreeNodeID.ExtendedProperties.Add("User_ColumnName", "ParentTreeNodeID");
                base.Columns.Add(this.columnParentTreeNodeID);
                this.columnTreeNodeName = new System.Data.DataColumn("TreeNodeName", typeof(string), null, System.Data.MappingType.Element);
                this.columnTreeNodeName.ExtendedProperties.Add("Generator_ChangedEventName", "TreeNodeNameChanged");
                this.columnTreeNodeName.ExtendedProperties.Add("Generator_ChangingEventName", "TreeNodeNameChanging");
                this.columnTreeNodeName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "TreeNodeName");
                this.columnTreeNodeName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "TreeNodeNameColumn");
                this.columnTreeNodeName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnTreeNodeName");
                this.columnTreeNodeName.ExtendedProperties.Add("Generator_DelegateName", "TreeNodeNameChangeEventHandler");
                this.columnTreeNodeName.ExtendedProperties.Add("Generator_EventArgName", "TreeNodeNameChangeEventArg");
                this.columnTreeNodeName.ExtendedProperties.Add("User_ColumnName", "TreeNodeName");
                base.Columns.Add(this.columnTreeNodeName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTreeNodeID}, true));
                this.columnTreeNodeID.AllowDBNull = false;
                this.columnTreeNodeID.Unique = true;
                this.Namespace = "http://tempuri.org/ParentChildDataSet.xsd";
                this.ExtendedProperties.Add("Generator_RowClassName", "TreeNodesRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "TreeNodesRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "TreeNodesRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "TreeNodesDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "TreeNodes");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableTreeNodes");
                this.ExtendedProperties.Add("User_TableName", "TreeNodes");
            }
            
            public TreeNodesRow NewTreeNodesRow() {
                return ((TreeNodesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TreeNodesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TreeNodesRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TreeNodesRowChanged != null)) {
                    this.TreeNodesRowChanged(this, new TreeNodesRowChangeEvent(((TreeNodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TreeNodesRowChanging != null)) {
                    this.TreeNodesRowChanging(this, new TreeNodesRowChangeEvent(((TreeNodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TreeNodesRowDeleted != null)) {
                    this.TreeNodesRowDeleted(this, new TreeNodesRowChangeEvent(((TreeNodesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TreeNodesRowDeleting != null)) {
                    this.TreeNodesRowDeleting(this, new TreeNodesRowChangeEvent(((TreeNodesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTreeNodesRow(TreeNodesRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                ParentChildDataSet ds = new ParentChildDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TreeNodesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void TreeNodeIDChangeEventHandler(TreeNodesDataTable sender, TreeNodeIDChangeEventArg e);
            
            public class TreeNodeIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public TreeNodeIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public TreeNodesRow Row {
                    get {
                        return ((TreeNodesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn TreeNodeIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void ParentTreeNodeIDChangeEventHandler(TreeNodesDataTable sender, ParentTreeNodeIDChangeEventArg e);
            
            public class ParentTreeNodeIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ParentTreeNodeIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public TreeNodesRow Row {
                    get {
                        return ((TreeNodesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ParentTreeNodeIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void TreeNodeNameChangeEventHandler(TreeNodesDataTable sender, TreeNodeNameChangeEventArg e);
            
            public class TreeNodeNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public TreeNodeNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public TreeNodesRow Row {
                    get {
                        return ((TreeNodesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn TreeNodeNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        public class TreeNodesRow : System.Data.DataRow {
            
            private TreeNodesDataTable tableTreeNodes;
            
            internal TreeNodesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTreeNodes = ((TreeNodesDataTable)(this.Table));
            }
            
            public int TreeNodeID {
                get {
                    return ((int)(this[this.tableTreeNodes.TreeNodeIDColumn]));
                }
                set {
                    this[this.tableTreeNodes.TreeNodeIDColumn] = value;
                }
            }
            
            public int ParentTreeNodeID {
                get {
                    try {
                        return ((int)(this[this.tableTreeNodes.ParentTreeNodeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableTreeNodes.ParentTreeNodeIDColumn] = value;
                }
            }
            
            public string TreeNodeName {
                get {
                    try {
                        return ((string)(this[this.tableTreeNodes.TreeNodeNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableTreeNodes.TreeNodeNameColumn] = value;
                }
            }
            
            public TreeNodesRow TreeNodesRowParent {
                get {
                    return ((TreeNodesRow)(this.GetParentRow(this.Table.ParentRelations["FK_TreeNodes_ParentTreeNodes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TreeNodes_ParentTreeNodes"]);
                }
            }
            
            public bool IsParentTreeNodeIDNull() {
                return this.IsNull(this.tableTreeNodes.ParentTreeNodeIDColumn);
            }
            
            public void SetParentTreeNodeIDNull() {
                this[this.tableTreeNodes.ParentTreeNodeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsTreeNodeNameNull() {
                return this.IsNull(this.tableTreeNodes.TreeNodeNameColumn);
            }
            
            public void SetTreeNodeNameNull() {
                this[this.tableTreeNodes.TreeNodeNameColumn] = System.Convert.DBNull;
            }
            
            public TreeNodesRow[] GetTreeNodesRows() {
                return ((TreeNodesRow[])(this.GetChildRows(this.Table.ChildRelations["FK_TreeNodes_ParentTreeNodes"])));
            }
        }
        
        public class TreeNodesRowChangeEvent : System.EventArgs {
            
            private TreeNodesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public TreeNodesRowChangeEvent(TreeNodesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TreeNodesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
