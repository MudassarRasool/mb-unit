//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Diagnostics;
using System.Reflection;

using MbUnit.Core;
using MbUnit.Core.Framework;
using MbUnit.Core.Invokers;
using MbUnit.Framework.Testers;
using MbUnit.Core.Runs;

namespace MbUnit.Framework 
{
	
	/// <summary>
	/// Collection indexing pattern.
	/// </summary>
	/// <include file="MbUnit.Framework.doc.xml" path="doc/remarkss/remarks[@name='CollectionIndexingFixtureAttribute']"/>
	/// <include file="MbUnit.Framework.doc.xml" path="doc/examples/example[@name='Indexing']"/>
	[AttributeUsage(AttributeTargets.Class, AllowMultiple=false, Inherited=true)]
	public sealed class CollectionIndexingFixtureAttribute : 
		TestFixturePatternAttribute 
	{
		/// <summary>
		/// Default constructor
		/// </summary>
		public CollectionIndexingFixtureAttribute()
			:base()
		{}
		
		/// <summary>
		/// Constructor with fixture description
		/// </summary>		
		public CollectionIndexingFixtureAttribute(
			string description)
			:base(description)
		{}

		/// <summary>
		/// Creates the execution logic
		/// </summary>
		/// <remarks>
		/// See summary.
		/// </remarks>
		/// <returns>A <see cref="IRun"/> instance that represent the type
		/// test logic.
		/// </returns>
		/// <include file="MbUnit.Framework.doc.xml" path="doc/examples/example[@name='Indexing']"/>
		public override IRun GetRun()
		{
			SequenceRun runs = new SequenceRun();
			
			// set up
			OptionalMethodRun setup = new OptionalMethodRun(typeof(SetUpAttribute),false);			
			runs.Runs.Add( setup );
						
			// add tester for the indexing
			IndexerProviderRun indexingTest = new IndexerProviderRun(
				typeof(CollectionIndexingTester)
				);
			runs.Runs.Add( indexingTest );

			// tear down
			OptionalMethodRun tearDown = new OptionalMethodRun(typeof(TearDownAttribute),false);
			runs.Runs.Add(tearDown);
						
			return runs;						
		}
	}
}
