<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    This targets file dynamically chooses whether to build a project
    by combining its references using ILMerge based on the current
    configuration.

    In the 'Release' configuration, it first compiles the assembly
        to a temporary location for use as the AssemblyInfo assembly.
        This assumes that the assembly only contains the AssemblyInfo
        metadata and nothing else.  Then it runs ILMerge across all
        of the non-System references to produce a merged final output
        with the contents of these references, the metadata of the
        AssemblyInfo assembly.  It also produces merge Intellisense XML.

    In the 'Debug' configuration, it just compiles the assembly in
        place so that any projects that reference it will continue to
        build fine.  This assembly will only contain the AssemblyInfo
        metadata of course.  It is expected that dependent projects
        also employ a dynamic reference switching technique and will
        automatically fall back on the original (unmerged) source
        references in this configuration.

        See MbUnit.Gallio.ProjectReferences.targets for how this
        latter requirement is achieved.

    Remark: The only project that needs to import this targets file
            is the MbUnit.Gallio project because it is the only one
            that is ILMerged at this time.  Just the same, this
            targets file is general enough to work under other
            circumstances too if we should so desire later on.
  -->
  <PropertyGroup>
    <ILMergeExe>$(ProjectDir)..\..\..\libs\ILMerge\ILMerge.exe</ILMergeExe>
    <ILMergeXmlDocsArg Condition="'$(DocumentationFile)'!=''">/xmldocs</ILMergeXmlDocsArg>

    <AttributesAssemblyName>$(TargetName).Attributes.dll</AttributesAssemblyName>
    <AttributesAssemblyPath>$(IntermediateOutputPath)$(AttributesAssemblyName)</AttributesAssemblyPath>

    <CoreCompileDependsOn Condition="'$(Configuration)'=='Release'">
      $(CoreCompileDependsOn);
      CoreCompileAttributesAssembly;
      CoreCompileWithILMerge;
    </CoreCompileDependsOn>

    <CoreCompileDependsOn Condition="'$(Configuration)'!='Release'">
      $(CoreCompileDependsOn);
      CoreCompileStandard;
    </CoreCompileDependsOn>
  </PropertyGroup>

  <Target Name="CoreCompile"
          DependsOnTargets="$(CoreCompileDependsOn)" />

  <Target Name="CoreCompileAttributesAssembly"
          Inputs="$(MSBuildAllProjects);
                  @(Compile);
                  @(ReferencePath)"
          Outputs="$(AttributesAssemblyPath)">
    <Csc OutputAssembly="$(AttributesAssemblyPath)"
         References="@(ReferencePath)"
         Sources="@(Compile)"
         TargetType="library"
         ToolPath="$(CscToolPath)"
         UseHostCompilerIfAvailable="$(UseHostCompilerIfAvailable)"
         WarningLevel="$(WarningLevel)"
         WarningsAsErrors="$(WarningsAsErrors)"
         WarningsNotAsErrors="$(WarningsNotAsErrors)" />
  </Target>

  <Target Name="CoreCompileWithILMerge"
          Inputs="$(MSBuildAllProjects);
                  @(ReferencePath);
                  $(AssemblyOriginatorKeyFile);"
          Outputs="@(DocFileItem);
                   @(IntermediateAssembly)">
    <CreateItem Include="@(ReferencePath)"
                Condition="'%(Filename)'!='System'">
      <Output TaskParameter="Include" ItemName="MergeAssembly" />
    </CreateItem>
 
    <Exec Command="&quot;$(ILMergeExe)&quot; /attr:&quot;$(AttributesAssemblyPath)&quot; /keyfile:&quot;$(AssemblyOriginatorKeyFile)&quot; /out:&quot;@(IntermediateAssembly)&quot; /target:$(OutputType) $(ILMergeXmlDocsArg) @(MergeAssembly, ' ')" />

    <Copy Condition="'$(ILMergeXmlDocsArg)'!=''"
          SourceFiles="@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).xml')"
          DestinationFiles="@(DocFileItem)" />
  </Target>

  <Target
        Name="CoreCompileStandard"
        Inputs="$(MSBuildAllProjects);
                @(Compile);
                @(ManifestResourceWithNoCulture);
                $(ApplicationIcon);
                $(AssemblyOriginatorKeyFile);
                @(ManifestNonResxWithNoCultureOnDisk);
                @(ReferencePath);
                @(CompiledLicenseFile);
                @(EmbeddedDocumentation);                
                @(CustomAdditionalCompileInputs)"
        Outputs="@(DocFileItem);
                 @(IntermediateAssembly);
                 $(NonExistentFile);
                 @(CustomAdditionalCompileOutputs)">      
        <Csc
              AdditionalLibPaths="$(AdditionalLibPaths)"
              AddModules="@(AddModules)"
              AllowUnsafeBlocks="$(AllowUnsafeBlocks)"
              BaseAddress="$(BaseAddress)"
              CheckForOverflowUnderflow="$(CheckForOverflowUnderflow)"
              CodePage="$(CodePage)"
              DebugType="$(DebugType)"
              DefineConstants="$(DefineConstants)"
              DelaySign="$(DelaySign)"
              DisabledWarnings="$(_DisabledWarnings)"
              DocumentationFile="@(DocFileItem)"
              EmitDebugInformation="$(DebugSymbols)"
              ErrorReport="$(ErrorReport)"
              FileAlignment="$(FileAlignment)"
              GenerateFullPaths="$(GenerateFullPaths)"
              KeyContainer="$(KeyContainerName)"
              KeyFile="$(KeyOriginatorFile)"
              LangVersion="$(LangVersion)"
              MainEntryPoint="$(StartupObject)"
              ModuleAssemblyName="$(ModuleAssemblyName)"
              NoConfig="true"
              NoLogo="$(NoLogo)"
              NoStandardLib="$(NoStdLib)"
              Optimize="$(Optimize)"
              OutputAssembly="@(IntermediateAssembly)"
              PdbFile="$(PdbFile)" 
              Platform="$(PlatformTarget)"
              References="@(ReferencePath)"
              Resources="@(ManifestResourceWithNoCulture);@(ManifestNonResxWithNoCultureOnDisk);@(CompiledLicenseFile)"
              ResponseFiles="$(CompilerResponseFile)"
              Sources="@(Compile)"
              TargetType="$(OutputType)"
              ToolPath="$(CscToolPath)"
              TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
              UseHostCompilerIfAvailable="$(UseHostCompilerIfAvailable)"
              Utf8Output="$(Utf8Output)"
              WarningLevel="$(WarningLevel)"
              WarningsAsErrors="$(WarningsAsErrors)"
              WarningsNotAsErrors="$(WarningsNotAsErrors)"
              Win32Icon="$(ApplicationIcon)"
              Win32Resource="$(Win32Resource)"
              />
  </Target>
</Project>
