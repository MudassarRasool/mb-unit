//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TestFu.Tests.Data {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("NorthwindDataSet")]
    public class NorthwindDataSet : System.Data.DataSet {
        
        private ProductsDataTable tableProducts;
        
        private OrdersDataTable tableOrders;
        
        private SuppliersDataTable tableSuppliers;
        
        private ShippersDataTable tableShippers;
        
        private CustomersDataTable tableCustomers;
        
        private CategoriesDataTable tableCategories;
        
        private Order_DetailsDataTable tableOrder_Details;
        
        private EmployeesDataTable tableEmployees;
        
        private System.Data.DataRelation relationSuppliersProducts;
        
        private System.Data.DataRelation relationCategoriesProducts;
        
        private System.Data.DataRelation relationShippersOrders;
        
        private System.Data.DataRelation relationCustomersOrders;
        
        private System.Data.DataRelation relationEmployeesOrders;
        
        private System.Data.DataRelation relationProductsOrder_Details;
        
        private System.Data.DataRelation relationOrdersOrder_Details;
        
        public NorthwindDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        protected NorthwindDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Products"] != null)) {
                    base.Tables.Add(new ProductsDataTable(ds.Tables["Products"]));
                }
                if ((ds.Tables["Orders"] != null)) {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                if ((ds.Tables["Suppliers"] != null)) {
                    base.Tables.Add(new SuppliersDataTable(ds.Tables["Suppliers"]));
                }
                if ((ds.Tables["Shippers"] != null)) {
                    base.Tables.Add(new ShippersDataTable(ds.Tables["Shippers"]));
                }
                if ((ds.Tables["Customers"] != null)) {
                    base.Tables.Add(new CustomersDataTable(ds.Tables["Customers"]));
                }
                if ((ds.Tables["Categories"] != null)) {
                    base.Tables.Add(new CategoriesDataTable(ds.Tables["Categories"]));
                }
                if ((ds.Tables["Order Details"] != null)) {
                    base.Tables.Add(new Order_DetailsDataTable(ds.Tables["Order Details"]));
                }
                if ((ds.Tables["Employees"] != null)) {
                    base.Tables.Add(new EmployeesDataTable(ds.Tables["Employees"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductsDataTable Products {
            get {
                return this.tableProducts;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrdersDataTable Orders {
            get {
                return this.tableOrders;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SuppliersDataTable Suppliers {
            get {
                return this.tableSuppliers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShippersDataTable Shippers {
            get {
                return this.tableShippers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CustomersDataTable Customers {
            get {
                return this.tableCustomers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoriesDataTable Categories {
            get {
                return this.tableCategories;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Order_DetailsDataTable Order_Details {
            get {
                return this.tableOrder_Details;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeesDataTable Employees {
            get {
                return this.tableEmployees;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        public override System.Data.DataSet Clone() {
            NorthwindDataSet cln = ((NorthwindDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Products"] != null)) {
                base.Tables.Add(new ProductsDataTable(ds.Tables["Products"]));
            }
            if ((ds.Tables["Orders"] != null)) {
                base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
            }
            if ((ds.Tables["Suppliers"] != null)) {
                base.Tables.Add(new SuppliersDataTable(ds.Tables["Suppliers"]));
            }
            if ((ds.Tables["Shippers"] != null)) {
                base.Tables.Add(new ShippersDataTable(ds.Tables["Shippers"]));
            }
            if ((ds.Tables["Customers"] != null)) {
                base.Tables.Add(new CustomersDataTable(ds.Tables["Customers"]));
            }
            if ((ds.Tables["Categories"] != null)) {
                base.Tables.Add(new CategoriesDataTable(ds.Tables["Categories"]));
            }
            if ((ds.Tables["Order Details"] != null)) {
                base.Tables.Add(new Order_DetailsDataTable(ds.Tables["Order Details"]));
            }
            if ((ds.Tables["Employees"] != null)) {
                base.Tables.Add(new EmployeesDataTable(ds.Tables["Employees"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableProducts = ((ProductsDataTable)(base.Tables["Products"]));
            if ((initTable == true)) {
                if ((this.tableProducts != null)) {
                    this.tableProducts.InitVars();
                }
            }
            this.tableOrders = ((OrdersDataTable)(base.Tables["Orders"]));
            if ((initTable == true)) {
                if ((this.tableOrders != null)) {
                    this.tableOrders.InitVars();
                }
            }
            this.tableSuppliers = ((SuppliersDataTable)(base.Tables["Suppliers"]));
            if ((initTable == true)) {
                if ((this.tableSuppliers != null)) {
                    this.tableSuppliers.InitVars();
                }
            }
            this.tableShippers = ((ShippersDataTable)(base.Tables["Shippers"]));
            if ((initTable == true)) {
                if ((this.tableShippers != null)) {
                    this.tableShippers.InitVars();
                }
            }
            this.tableCustomers = ((CustomersDataTable)(base.Tables["Customers"]));
            if ((initTable == true)) {
                if ((this.tableCustomers != null)) {
                    this.tableCustomers.InitVars();
                }
            }
            this.tableCategories = ((CategoriesDataTable)(base.Tables["Categories"]));
            if ((initTable == true)) {
                if ((this.tableCategories != null)) {
                    this.tableCategories.InitVars();
                }
            }
            this.tableOrder_Details = ((Order_DetailsDataTable)(base.Tables["Order Details"]));
            if ((initTable == true)) {
                if ((this.tableOrder_Details != null)) {
                    this.tableOrder_Details.InitVars();
                }
            }
            this.tableEmployees = ((EmployeesDataTable)(base.Tables["Employees"]));
            if ((initTable == true)) {
                if ((this.tableEmployees != null)) {
                    this.tableEmployees.InitVars();
                }
            }
            this.relationSuppliersProducts = this.Relations["SuppliersProducts"];
            this.relationCategoriesProducts = this.Relations["CategoriesProducts"];
            this.relationShippersOrders = this.Relations["ShippersOrders"];
            this.relationCustomersOrders = this.Relations["CustomersOrders"];
            this.relationEmployeesOrders = this.Relations["EmployeesOrders"];
            this.relationProductsOrder_Details = this.Relations["ProductsOrder Details"];
            this.relationOrdersOrder_Details = this.Relations["OrdersOrder Details"];
        }
        
        private void InitClass() {
            this.DataSetName = "NorthwindDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/NorthwindDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableProducts = new ProductsDataTable();
            base.Tables.Add(this.tableProducts);
            this.tableOrders = new OrdersDataTable();
            base.Tables.Add(this.tableOrders);
            this.tableSuppliers = new SuppliersDataTable();
            base.Tables.Add(this.tableSuppliers);
            this.tableShippers = new ShippersDataTable();
            base.Tables.Add(this.tableShippers);
            this.tableCustomers = new CustomersDataTable();
            base.Tables.Add(this.tableCustomers);
            this.tableCategories = new CategoriesDataTable();
            base.Tables.Add(this.tableCategories);
            this.tableOrder_Details = new Order_DetailsDataTable();
            base.Tables.Add(this.tableOrder_Details);
            this.tableEmployees = new EmployeesDataTable();
            base.Tables.Add(this.tableEmployees);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("SuppliersProducts", new System.Data.DataColumn[] {
                        this.tableSuppliers.SupplierIDColumn}, new System.Data.DataColumn[] {
                        this.tableProducts.SupplierIDColumn});
            this.tableProducts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("CategoriesProducts", new System.Data.DataColumn[] {
                        this.tableCategories.CategoryIDColumn}, new System.Data.DataColumn[] {
                        this.tableProducts.CategoryIDColumn});
            this.tableProducts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ShippersOrders", new System.Data.DataColumn[] {
                        this.tableShippers.ShipperIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.ShipViaColumn});
            this.tableOrders.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("CustomersOrders", new System.Data.DataColumn[] {
                        this.tableCustomers.CustomerIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.CustomerIDColumn});
            this.tableOrders.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("EmployeesOrders", new System.Data.DataColumn[] {
                        this.tableEmployees.EmployeeIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.EmployeeIDColumn});
            this.tableOrders.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("ProductsOrder Details", new System.Data.DataColumn[] {
                        this.tableProducts.ProductIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrder_Details.ProductIDColumn});
            this.tableOrder_Details.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("OrdersOrder Details", new System.Data.DataColumn[] {
                        this.tableOrders.OrderIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrder_Details.OrderIDColumn});
            this.tableOrder_Details.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationSuppliersProducts = new System.Data.DataRelation("SuppliersProducts", new System.Data.DataColumn[] {
                        this.tableSuppliers.SupplierIDColumn}, new System.Data.DataColumn[] {
                        this.tableProducts.SupplierIDColumn}, false);
            this.Relations.Add(this.relationSuppliersProducts);
            this.relationCategoriesProducts = new System.Data.DataRelation("CategoriesProducts", new System.Data.DataColumn[] {
                        this.tableCategories.CategoryIDColumn}, new System.Data.DataColumn[] {
                        this.tableProducts.CategoryIDColumn}, false);
            this.Relations.Add(this.relationCategoriesProducts);
            this.relationShippersOrders = new System.Data.DataRelation("ShippersOrders", new System.Data.DataColumn[] {
                        this.tableShippers.ShipperIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.ShipViaColumn}, false);
            this.Relations.Add(this.relationShippersOrders);
            this.relationCustomersOrders = new System.Data.DataRelation("CustomersOrders", new System.Data.DataColumn[] {
                        this.tableCustomers.CustomerIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.CustomerIDColumn}, false);
            this.Relations.Add(this.relationCustomersOrders);
            this.relationEmployeesOrders = new System.Data.DataRelation("EmployeesOrders", new System.Data.DataColumn[] {
                        this.tableEmployees.EmployeeIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.EmployeeIDColumn}, false);
            this.Relations.Add(this.relationEmployeesOrders);
            this.relationProductsOrder_Details = new System.Data.DataRelation("ProductsOrder Details", new System.Data.DataColumn[] {
                        this.tableProducts.ProductIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrder_Details.ProductIDColumn}, false);
            this.Relations.Add(this.relationProductsOrder_Details);
            this.relationOrdersOrder_Details = new System.Data.DataRelation("OrdersOrder Details", new System.Data.DataColumn[] {
                        this.tableOrders.OrderIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrder_Details.OrderIDColumn}, false);
            this.Relations.Add(this.relationOrdersOrder_Details);
            this.ExtendedProperties.Add("DSGenerator_DataSetName", "NorthwindDataSet");
            this.ExtendedProperties.Add("User_DataSetName", "NorthwindDataSet");
        }
        
        private bool ShouldSerializeProducts() {
            return false;
        }
        
        private bool ShouldSerializeOrders() {
            return false;
        }
        
        private bool ShouldSerializeSuppliers() {
            return false;
        }
        
        private bool ShouldSerializeShippers() {
            return false;
        }
        
        private bool ShouldSerializeCustomers() {
            return false;
        }
        
        private bool ShouldSerializeCategories() {
            return false;
        }
        
        private bool ShouldSerializeOrder_Details() {
            return false;
        }
        
        private bool ShouldSerializeEmployees() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            NorthwindDataSet ds = new NorthwindDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            if (PublishLegacyWSDL()) {
                System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
                any.Namespace = ds.Namespace;
                sequence.Items.Add(any);
            }
            else {
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(0);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                sequence.MaxOccurs = decimal.MaxValue;
                System.Xml.Schema.XmlSchemaAttribute attribute = new System.Xml.Schema.XmlSchemaAttribute();
                attribute.Name = "namespace";
                attribute.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute);
            }
            type.Particle = sequence;
            return type;
        }
        
        protected static bool PublishLegacyWSDL() {
            System.Collections.Specialized.NameValueCollection settings = ((System.Collections.Specialized.NameValueCollection)(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset")));
            if ((settings != null)) {
                string[] values = settings.GetValues("WSDL_VERSION");
                if ((values != null)) {
                    float version = float.Parse(((string)(values[0])), ((System.IFormatProvider)(null)));
                    return (version < 2);
                }
            }
            return true;
        }
        
        public delegate void ProductsRowChangeEventHandler(object sender, ProductsRowChangeEvent e);
        
        public delegate void OrdersRowChangeEventHandler(object sender, OrdersRowChangeEvent e);
        
        public delegate void SuppliersRowChangeEventHandler(object sender, SuppliersRowChangeEvent e);
        
        public delegate void ShippersRowChangeEventHandler(object sender, ShippersRowChangeEvent e);
        
        public delegate void CustomersRowChangeEventHandler(object sender, CustomersRowChangeEvent e);
        
        public delegate void CategoriesRowChangeEventHandler(object sender, CategoriesRowChangeEvent e);
        
        public delegate void Order_DetailsRowChangeEventHandler(object sender, Order_DetailsRowChangeEvent e);
        
        public delegate void EmployeesRowChangeEventHandler(object sender, EmployeesRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class ProductsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnProductID;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnSupplierID;
            
            private System.Data.DataColumn columnCategoryID;
            
            private System.Data.DataColumn columnQuantityPerUnit;
            
            private System.Data.DataColumn columnUnitPrice;
            
            private System.Data.DataColumn columnUnitsInStock;
            
            private System.Data.DataColumn columnUnitsOnOrder;
            
            private System.Data.DataColumn columnReorderLevel;
            
            private System.Data.DataColumn columnDiscontinued;
            
            private bool m_suspendValidation = false;
            
            public ProductsDataTable() {
                this.TableName = "Products";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal ProductsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected ProductsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            internal System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            internal System.Data.DataColumn SupplierIDColumn {
                get {
                    return this.columnSupplierID;
                }
            }
            
            internal System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            internal System.Data.DataColumn QuantityPerUnitColumn {
                get {
                    return this.columnQuantityPerUnit;
                }
            }
            
            internal System.Data.DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            internal System.Data.DataColumn UnitsInStockColumn {
                get {
                    return this.columnUnitsInStock;
                }
            }
            
            internal System.Data.DataColumn UnitsOnOrderColumn {
                get {
                    return this.columnUnitsOnOrder;
                }
            }
            
            internal System.Data.DataColumn ReorderLevelColumn {
                get {
                    return this.columnReorderLevel;
                }
            }
            
            internal System.Data.DataColumn DiscontinuedColumn {
                get {
                    return this.columnDiscontinued;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public ProductsRow this[int index] {
                get {
                    return ((ProductsRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event ProductIDChangeEventHandler ProductIDChanging;
            
            public event ProductIDChangeEventHandler ProductIDChanged;
            
            public event ProductNameChangeEventHandler ProductNameChanging;
            
            public event ProductNameChangeEventHandler ProductNameChanged;
            
            public event SupplierIDChangeEventHandler SupplierIDChanging;
            
            public event SupplierIDChangeEventHandler SupplierIDChanged;
            
            public event CategoryIDChangeEventHandler CategoryIDChanging;
            
            public event CategoryIDChangeEventHandler CategoryIDChanged;
            
            public event QuantityPerUnitChangeEventHandler QuantityPerUnitChanging;
            
            public event QuantityPerUnitChangeEventHandler QuantityPerUnitChanged;
            
            public event UnitPriceChangeEventHandler UnitPriceChanging;
            
            public event UnitPriceChangeEventHandler UnitPriceChanged;
            
            public event UnitsInStockChangeEventHandler UnitsInStockChanging;
            
            public event UnitsInStockChangeEventHandler UnitsInStockChanged;
            
            public event UnitsOnOrderChangeEventHandler UnitsOnOrderChanging;
            
            public event UnitsOnOrderChangeEventHandler UnitsOnOrderChanged;
            
            public event ReorderLevelChangeEventHandler ReorderLevelChanging;
            
            public event ReorderLevelChangeEventHandler ReorderLevelChanged;
            
            public event DiscontinuedChangeEventHandler DiscontinuedChanging;
            
            public event DiscontinuedChangeEventHandler DiscontinuedChanged;
            
            public event ProductsRowChangeEventHandler ProductsRowChanged;
            
            public event ProductsRowChangeEventHandler ProductsRowChanging;
            
            public event ProductsRowChangeEventHandler ProductsRowDeleted;
            
            public event ProductsRowChangeEventHandler ProductsRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ProductID")) {
                    if ((this.ProductIDChanging != null)) {
                        this.ProductIDChanging(this, new ProductIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "ProductName")) {
                        if ((this.ProductNameChanging != null)) {
                            this.ProductNameChanging(this, new ProductNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "SupplierID")) {
                            if ((this.SupplierIDChanging != null)) {
                                this.SupplierIDChanging(this, new SupplierIDChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "CategoryID")) {
                                if ((this.CategoryIDChanging != null)) {
                                    this.CategoryIDChanging(this, new CategoryIDChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "QuantityPerUnit")) {
                                    if ((this.QuantityPerUnitChanging != null)) {
                                        this.QuantityPerUnitChanging(this, new QuantityPerUnitChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "UnitPrice")) {
                                        if ((this.UnitPriceChanging != null)) {
                                            this.UnitPriceChanging(this, new UnitPriceChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "UnitsInStock")) {
                                            if ((this.UnitsInStockChanging != null)) {
                                                this.UnitsInStockChanging(this, new UnitsInStockChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "UnitsOnOrder")) {
                                                if ((this.UnitsOnOrderChanging != null)) {
                                                    this.UnitsOnOrderChanging(this, new UnitsOnOrderChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "ReorderLevel")) {
                                                    if ((this.ReorderLevelChanging != null)) {
                                                        this.ReorderLevelChanging(this, new ReorderLevelChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "Discontinued")) {
                                                        if ((this.DiscontinuedChanging != null)) {
                                                            this.DiscontinuedChanging(this, new DiscontinuedChangeEventArg(e));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ProductID")) {
                    if ((this.ProductIDChanged != null)) {
                        this.ProductIDChanged(this, new ProductIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "ProductName")) {
                        if ((this.ProductNameChanged != null)) {
                            this.ProductNameChanged(this, new ProductNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "SupplierID")) {
                            if ((this.SupplierIDChanged != null)) {
                                this.SupplierIDChanged(this, new SupplierIDChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "CategoryID")) {
                                if ((this.CategoryIDChanged != null)) {
                                    this.CategoryIDChanged(this, new CategoryIDChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "QuantityPerUnit")) {
                                    if ((this.QuantityPerUnitChanged != null)) {
                                        this.QuantityPerUnitChanged(this, new QuantityPerUnitChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "UnitPrice")) {
                                        if ((this.UnitPriceChanged != null)) {
                                            this.UnitPriceChanged(this, new UnitPriceChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "UnitsInStock")) {
                                            if ((this.UnitsInStockChanged != null)) {
                                                this.UnitsInStockChanged(this, new UnitsInStockChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "UnitsOnOrder")) {
                                                if ((this.UnitsOnOrderChanged != null)) {
                                                    this.UnitsOnOrderChanged(this, new UnitsOnOrderChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "ReorderLevel")) {
                                                    if ((this.ReorderLevelChanged != null)) {
                                                        this.ReorderLevelChanged(this, new ReorderLevelChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "Discontinued")) {
                                                        if ((this.DiscontinuedChanged != null)) {
                                                            this.DiscontinuedChanged(this, new DiscontinuedChangeEventArg(e));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddProductsRow(ProductsRow row) {
                this.Rows.Add(row);
            }
            
            public ProductsRow AddProductsRow(string ProductName, SuppliersRow parentSuppliersRowBySuppliersProducts, CategoriesRow parentCategoriesRowByCategoriesProducts, string QuantityPerUnit, decimal UnitPrice, short UnitsInStock, short UnitsOnOrder, short ReorderLevel, bool Discontinued) {
                ProductsRow rowProductsRow = ((ProductsRow)(this.NewRow()));
                rowProductsRow.ItemArray = new object[] {
                        null,
                        ProductName,
                        parentSuppliersRowBySuppliersProducts[0],
                        parentCategoriesRowByCategoriesProducts[0],
                        QuantityPerUnit,
                        UnitPrice,
                        UnitsInStock,
                        UnitsOnOrder,
                        ReorderLevel,
                        Discontinued};
                this.Rows.Add(rowProductsRow);
                return rowProductsRow;
            }
            
            public ProductsRow FindByProductID(int ProductID) {
                return ((ProductsRow)(this.Rows.Find(new object[] {
                            ProductID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                ProductsDataTable cln = ((ProductsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new ProductsDataTable();
            }
            
            internal void InitVars() {
                this.columnProductID = base.Columns["ProductID"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnSupplierID = base.Columns["SupplierID"];
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnQuantityPerUnit = base.Columns["QuantityPerUnit"];
                this.columnUnitPrice = base.Columns["UnitPrice"];
                this.columnUnitsInStock = base.Columns["UnitsInStock"];
                this.columnUnitsOnOrder = base.Columns["UnitsOnOrder"];
                this.columnReorderLevel = base.Columns["ReorderLevel"];
                this.columnDiscontinued = base.Columns["Discontinued"];
            }
            
            private void InitClass() {
                this.columnProductID = new System.Data.DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.columnProductID.ExtendedProperties.Add("Generator_ChangedEventName", "ProductIDChanged");
                this.columnProductID.ExtendedProperties.Add("Generator_ChangingEventName", "ProductIDChanging");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ProductID");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ProductIDColumn");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnProductID");
                this.columnProductID.ExtendedProperties.Add("Generator_DelegateName", "ProductIDChangeEventHandler");
                this.columnProductID.ExtendedProperties.Add("Generator_EventArgName", "ProductIDChangeEventArg");
                this.columnProductID.ExtendedProperties.Add("User_ColumnName", "ProductID");
                base.Columns.Add(this.columnProductID);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                this.columnProductName.ExtendedProperties.Add("Generator_ChangedEventName", "ProductNameChanged");
                this.columnProductName.ExtendedProperties.Add("Generator_ChangingEventName", "ProductNameChanging");
                this.columnProductName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ProductName");
                this.columnProductName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ProductNameColumn");
                this.columnProductName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnProductName");
                this.columnProductName.ExtendedProperties.Add("Generator_DelegateName", "ProductNameChangeEventHandler");
                this.columnProductName.ExtendedProperties.Add("Generator_EventArgName", "ProductNameChangeEventArg");
                this.columnProductName.ExtendedProperties.Add("User_ColumnName", "ProductName");
                base.Columns.Add(this.columnProductName);
                this.columnSupplierID = new System.Data.DataColumn("SupplierID", typeof(int), null, System.Data.MappingType.Element);
                this.columnSupplierID.ExtendedProperties.Add("Generator_ChangedEventName", "SupplierIDChanged");
                this.columnSupplierID.ExtendedProperties.Add("Generator_ChangingEventName", "SupplierIDChanging");
                this.columnSupplierID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "SupplierID");
                this.columnSupplierID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "SupplierIDColumn");
                this.columnSupplierID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnSupplierID");
                this.columnSupplierID.ExtendedProperties.Add("Generator_DelegateName", "SupplierIDChangeEventHandler");
                this.columnSupplierID.ExtendedProperties.Add("Generator_EventArgName", "SupplierIDChangeEventArg");
                this.columnSupplierID.ExtendedProperties.Add("User_ColumnName", "SupplierID");
                base.Columns.Add(this.columnSupplierID);
                this.columnCategoryID = new System.Data.DataColumn("CategoryID", typeof(int), null, System.Data.MappingType.Element);
                this.columnCategoryID.ExtendedProperties.Add("Generator_ChangedEventName", "CategoryIDChanged");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ChangingEventName", "CategoryIDChanging");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CategoryID");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CategoryIDColumn");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCategoryID");
                this.columnCategoryID.ExtendedProperties.Add("Generator_DelegateName", "CategoryIDChangeEventHandler");
                this.columnCategoryID.ExtendedProperties.Add("Generator_EventArgName", "CategoryIDChangeEventArg");
                this.columnCategoryID.ExtendedProperties.Add("User_ColumnName", "CategoryID");
                base.Columns.Add(this.columnCategoryID);
                this.columnQuantityPerUnit = new System.Data.DataColumn("QuantityPerUnit", typeof(string), null, System.Data.MappingType.Element);
                this.columnQuantityPerUnit.ExtendedProperties.Add("Generator_ChangedEventName", "QuantityPerUnitChanged");
                this.columnQuantityPerUnit.ExtendedProperties.Add("Generator_ChangingEventName", "QuantityPerUnitChanging");
                this.columnQuantityPerUnit.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "QuantityPerUnit");
                this.columnQuantityPerUnit.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "QuantityPerUnitColumn");
                this.columnQuantityPerUnit.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnQuantityPerUnit");
                this.columnQuantityPerUnit.ExtendedProperties.Add("Generator_DelegateName", "QuantityPerUnitChangeEventHandler");
                this.columnQuantityPerUnit.ExtendedProperties.Add("Generator_EventArgName", "QuantityPerUnitChangeEventArg");
                this.columnQuantityPerUnit.ExtendedProperties.Add("User_ColumnName", "QuantityPerUnit");
                base.Columns.Add(this.columnQuantityPerUnit);
                this.columnUnitPrice = new System.Data.DataColumn("UnitPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.columnUnitPrice.ExtendedProperties.Add("Generator_ChangedEventName", "UnitPriceChanged");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_ChangingEventName", "UnitPriceChanging");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UnitPrice");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UnitPriceColumn");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUnitPrice");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_DelegateName", "UnitPriceChangeEventHandler");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_EventArgName", "UnitPriceChangeEventArg");
                this.columnUnitPrice.ExtendedProperties.Add("User_ColumnName", "UnitPrice");
                base.Columns.Add(this.columnUnitPrice);
                this.columnUnitsInStock = new System.Data.DataColumn("UnitsInStock", typeof(short), null, System.Data.MappingType.Element);
                this.columnUnitsInStock.ExtendedProperties.Add("Generator_ChangedEventName", "UnitsInStockChanged");
                this.columnUnitsInStock.ExtendedProperties.Add("Generator_ChangingEventName", "UnitsInStockChanging");
                this.columnUnitsInStock.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UnitsInStock");
                this.columnUnitsInStock.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UnitsInStockColumn");
                this.columnUnitsInStock.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUnitsInStock");
                this.columnUnitsInStock.ExtendedProperties.Add("Generator_DelegateName", "UnitsInStockChangeEventHandler");
                this.columnUnitsInStock.ExtendedProperties.Add("Generator_EventArgName", "UnitsInStockChangeEventArg");
                this.columnUnitsInStock.ExtendedProperties.Add("User_ColumnName", "UnitsInStock");
                base.Columns.Add(this.columnUnitsInStock);
                this.columnUnitsOnOrder = new System.Data.DataColumn("UnitsOnOrder", typeof(short), null, System.Data.MappingType.Element);
                this.columnUnitsOnOrder.ExtendedProperties.Add("Generator_ChangedEventName", "UnitsOnOrderChanged");
                this.columnUnitsOnOrder.ExtendedProperties.Add("Generator_ChangingEventName", "UnitsOnOrderChanging");
                this.columnUnitsOnOrder.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UnitsOnOrder");
                this.columnUnitsOnOrder.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UnitsOnOrderColumn");
                this.columnUnitsOnOrder.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUnitsOnOrder");
                this.columnUnitsOnOrder.ExtendedProperties.Add("Generator_DelegateName", "UnitsOnOrderChangeEventHandler");
                this.columnUnitsOnOrder.ExtendedProperties.Add("Generator_EventArgName", "UnitsOnOrderChangeEventArg");
                this.columnUnitsOnOrder.ExtendedProperties.Add("User_ColumnName", "UnitsOnOrder");
                base.Columns.Add(this.columnUnitsOnOrder);
                this.columnReorderLevel = new System.Data.DataColumn("ReorderLevel", typeof(short), null, System.Data.MappingType.Element);
                this.columnReorderLevel.ExtendedProperties.Add("Generator_ChangedEventName", "ReorderLevelChanged");
                this.columnReorderLevel.ExtendedProperties.Add("Generator_ChangingEventName", "ReorderLevelChanging");
                this.columnReorderLevel.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ReorderLevel");
                this.columnReorderLevel.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ReorderLevelColumn");
                this.columnReorderLevel.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnReorderLevel");
                this.columnReorderLevel.ExtendedProperties.Add("Generator_DelegateName", "ReorderLevelChangeEventHandler");
                this.columnReorderLevel.ExtendedProperties.Add("Generator_EventArgName", "ReorderLevelChangeEventArg");
                this.columnReorderLevel.ExtendedProperties.Add("User_ColumnName", "ReorderLevel");
                base.Columns.Add(this.columnReorderLevel);
                this.columnDiscontinued = new System.Data.DataColumn("Discontinued", typeof(bool), null, System.Data.MappingType.Element);
                this.columnDiscontinued.ExtendedProperties.Add("Generator_ChangedEventName", "DiscontinuedChanged");
                this.columnDiscontinued.ExtendedProperties.Add("Generator_ChangingEventName", "DiscontinuedChanging");
                this.columnDiscontinued.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Discontinued");
                this.columnDiscontinued.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DiscontinuedColumn");
                this.columnDiscontinued.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDiscontinued");
                this.columnDiscontinued.ExtendedProperties.Add("Generator_DelegateName", "DiscontinuedChangeEventHandler");
                this.columnDiscontinued.ExtendedProperties.Add("Generator_EventArgName", "DiscontinuedChangeEventArg");
                this.columnDiscontinued.ExtendedProperties.Add("User_ColumnName", "Discontinued");
                base.Columns.Add(this.columnDiscontinued);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnProductID}, true));
                this.columnProductID.AutoIncrement = true;
                this.columnProductID.AllowDBNull = false;
                this.columnProductID.Unique = true;
                this.columnProductName.MaxLength = 40;
                this.columnQuantityPerUnit.MaxLength = 20;
                this.ExtendedProperties.Add("Generator_RowClassName", "ProductsRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ProductsRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ProductsRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "ProductsDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Products");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableProducts");
                this.ExtendedProperties.Add("User_TableName", "Products");
            }
            
            public ProductsRow NewProductsRow() {
                return ((ProductsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProductsRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductsRowChanged != null)) {
                    this.ProductsRowChanged(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductsRowChanging != null)) {
                    this.ProductsRowChanging(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductsRowDeleted != null)) {
                    this.ProductsRowDeleted(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductsRowDeleting != null)) {
                    this.ProductsRowDeleting(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProductsRow(ProductsRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NorthwindDataSet ds = new NorthwindDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void ProductIDChangeEventHandler(ProductsDataTable sender, ProductIDChangeEventArg e);
            
            public class ProductIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ProductIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ProductIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void ProductNameChangeEventHandler(ProductsDataTable sender, ProductNameChangeEventArg e);
            
            public class ProductNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ProductNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ProductNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void SupplierIDChangeEventHandler(ProductsDataTable sender, SupplierIDChangeEventArg e);
            
            public class SupplierIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public SupplierIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn SupplierIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void CategoryIDChangeEventHandler(ProductsDataTable sender, CategoryIDChangeEventArg e);
            
            public class CategoryIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CategoryIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CategoryIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void QuantityPerUnitChangeEventHandler(ProductsDataTable sender, QuantityPerUnitChangeEventArg e);
            
            public class QuantityPerUnitChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public QuantityPerUnitChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn QuantityPerUnitColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void UnitPriceChangeEventHandler(ProductsDataTable sender, UnitPriceChangeEventArg e);
            
            public class UnitPriceChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UnitPriceChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UnitPriceColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public decimal ProposedValue {
                    get {
                        return ((decimal)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((decimal)(value));
                    }
                }
            }
            
            public delegate void UnitsInStockChangeEventHandler(ProductsDataTable sender, UnitsInStockChangeEventArg e);
            
            public class UnitsInStockChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UnitsInStockChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UnitsInStockColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public short ProposedValue {
                    get {
                        return ((short)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((short)(value));
                    }
                }
            }
            
            public delegate void UnitsOnOrderChangeEventHandler(ProductsDataTable sender, UnitsOnOrderChangeEventArg e);
            
            public class UnitsOnOrderChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UnitsOnOrderChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UnitsOnOrderColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public short ProposedValue {
                    get {
                        return ((short)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((short)(value));
                    }
                }
            }
            
            public delegate void ReorderLevelChangeEventHandler(ProductsDataTable sender, ReorderLevelChangeEventArg e);
            
            public class ReorderLevelChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ReorderLevelChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ReorderLevelColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public short ProposedValue {
                    get {
                        return ((short)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((short)(value));
                    }
                }
            }
            
            public delegate void DiscontinuedChangeEventHandler(ProductsDataTable sender, DiscontinuedChangeEventArg e);
            
            public class DiscontinuedChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public DiscontinuedChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn DiscontinuedColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public bool ProposedValue {
                    get {
                        return ((bool)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((bool)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class OrdersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrderID;
            
            private System.Data.DataColumn columnCustomerID;
            
            private System.Data.DataColumn columnEmployeeID;
            
            private System.Data.DataColumn columnOrderDate;
            
            private System.Data.DataColumn columnRequiredDate;
            
            private System.Data.DataColumn columnShippedDate;
            
            private System.Data.DataColumn columnShipVia;
            
            private System.Data.DataColumn columnFreight;
            
            private System.Data.DataColumn columnShipName;
            
            private System.Data.DataColumn columnShipAddress;
            
            private System.Data.DataColumn columnShipCity;
            
            private System.Data.DataColumn columnShipRegion;
            
            private System.Data.DataColumn columnShipPostalCode;
            
            private System.Data.DataColumn columnShipCountry;
            
            private bool m_suspendValidation = false;
            
            public OrdersDataTable() {
                this.TableName = "Orders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal OrdersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected OrdersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn OrderIDColumn {
                get {
                    return this.columnOrderID;
                }
            }
            
            internal System.Data.DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            internal System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            internal System.Data.DataColumn OrderDateColumn {
                get {
                    return this.columnOrderDate;
                }
            }
            
            internal System.Data.DataColumn RequiredDateColumn {
                get {
                    return this.columnRequiredDate;
                }
            }
            
            internal System.Data.DataColumn ShippedDateColumn {
                get {
                    return this.columnShippedDate;
                }
            }
            
            internal System.Data.DataColumn ShipViaColumn {
                get {
                    return this.columnShipVia;
                }
            }
            
            internal System.Data.DataColumn FreightColumn {
                get {
                    return this.columnFreight;
                }
            }
            
            internal System.Data.DataColumn ShipNameColumn {
                get {
                    return this.columnShipName;
                }
            }
            
            internal System.Data.DataColumn ShipAddressColumn {
                get {
                    return this.columnShipAddress;
                }
            }
            
            internal System.Data.DataColumn ShipCityColumn {
                get {
                    return this.columnShipCity;
                }
            }
            
            internal System.Data.DataColumn ShipRegionColumn {
                get {
                    return this.columnShipRegion;
                }
            }
            
            internal System.Data.DataColumn ShipPostalCodeColumn {
                get {
                    return this.columnShipPostalCode;
                }
            }
            
            internal System.Data.DataColumn ShipCountryColumn {
                get {
                    return this.columnShipCountry;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public OrdersRow this[int index] {
                get {
                    return ((OrdersRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event OrderIDChangeEventHandler OrderIDChanging;
            
            public event OrderIDChangeEventHandler OrderIDChanged;
            
            public event CustomerIDChangeEventHandler CustomerIDChanging;
            
            public event CustomerIDChangeEventHandler CustomerIDChanged;
            
            public event EmployeeIDChangeEventHandler EmployeeIDChanging;
            
            public event EmployeeIDChangeEventHandler EmployeeIDChanged;
            
            public event OrderDateChangeEventHandler OrderDateChanging;
            
            public event OrderDateChangeEventHandler OrderDateChanged;
            
            public event RequiredDateChangeEventHandler RequiredDateChanging;
            
            public event RequiredDateChangeEventHandler RequiredDateChanged;
            
            public event ShippedDateChangeEventHandler ShippedDateChanging;
            
            public event ShippedDateChangeEventHandler ShippedDateChanged;
            
            public event ShipViaChangeEventHandler ShipViaChanging;
            
            public event ShipViaChangeEventHandler ShipViaChanged;
            
            public event FreightChangeEventHandler FreightChanging;
            
            public event FreightChangeEventHandler FreightChanged;
            
            public event ShipNameChangeEventHandler ShipNameChanging;
            
            public event ShipNameChangeEventHandler ShipNameChanged;
            
            public event ShipAddressChangeEventHandler ShipAddressChanging;
            
            public event ShipAddressChangeEventHandler ShipAddressChanged;
            
            public event ShipCityChangeEventHandler ShipCityChanging;
            
            public event ShipCityChangeEventHandler ShipCityChanged;
            
            public event ShipRegionChangeEventHandler ShipRegionChanging;
            
            public event ShipRegionChangeEventHandler ShipRegionChanged;
            
            public event ShipPostalCodeChangeEventHandler ShipPostalCodeChanging;
            
            public event ShipPostalCodeChangeEventHandler ShipPostalCodeChanged;
            
            public event ShipCountryChangeEventHandler ShipCountryChanging;
            
            public event ShipCountryChangeEventHandler ShipCountryChanged;
            
            public event OrdersRowChangeEventHandler OrdersRowChanged;
            
            public event OrdersRowChangeEventHandler OrdersRowChanging;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleted;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "OrderID")) {
                    if ((this.OrderIDChanging != null)) {
                        this.OrderIDChanging(this, new OrderIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CustomerID")) {
                        if ((this.CustomerIDChanging != null)) {
                            this.CustomerIDChanging(this, new CustomerIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "EmployeeID")) {
                            if ((this.EmployeeIDChanging != null)) {
                                this.EmployeeIDChanging(this, new EmployeeIDChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "OrderDate")) {
                                if ((this.OrderDateChanging != null)) {
                                    this.OrderDateChanging(this, new OrderDateChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "RequiredDate")) {
                                    if ((this.RequiredDateChanging != null)) {
                                        this.RequiredDateChanging(this, new RequiredDateChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "ShippedDate")) {
                                        if ((this.ShippedDateChanging != null)) {
                                            this.ShippedDateChanging(this, new ShippedDateChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "ShipVia")) {
                                            if ((this.ShipViaChanging != null)) {
                                                this.ShipViaChanging(this, new ShipViaChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "Freight")) {
                                                if ((this.FreightChanging != null)) {
                                                    this.FreightChanging(this, new FreightChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "ShipName")) {
                                                    if ((this.ShipNameChanging != null)) {
                                                        this.ShipNameChanging(this, new ShipNameChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "ShipAddress")) {
                                                        if ((this.ShipAddressChanging != null)) {
                                                            this.ShipAddressChanging(this, new ShipAddressChangeEventArg(e));
                                                        }
                                                    }
                                                    else {
                                                        if ((e.Column.ColumnName == "ShipCity")) {
                                                            if ((this.ShipCityChanging != null)) {
                                                                this.ShipCityChanging(this, new ShipCityChangeEventArg(e));
                                                            }
                                                        }
                                                        else {
                                                            if ((e.Column.ColumnName == "ShipRegion")) {
                                                                if ((this.ShipRegionChanging != null)) {
                                                                    this.ShipRegionChanging(this, new ShipRegionChangeEventArg(e));
                                                                }
                                                            }
                                                            else {
                                                                if ((e.Column.ColumnName == "ShipPostalCode")) {
                                                                    if ((this.ShipPostalCodeChanging != null)) {
                                                                        this.ShipPostalCodeChanging(this, new ShipPostalCodeChangeEventArg(e));
                                                                    }
                                                                }
                                                                else {
                                                                    if ((e.Column.ColumnName == "ShipCountry")) {
                                                                        if ((this.ShipCountryChanging != null)) {
                                                                            this.ShipCountryChanging(this, new ShipCountryChangeEventArg(e));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "OrderID")) {
                    if ((this.OrderIDChanged != null)) {
                        this.OrderIDChanged(this, new OrderIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CustomerID")) {
                        if ((this.CustomerIDChanged != null)) {
                            this.CustomerIDChanged(this, new CustomerIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "EmployeeID")) {
                            if ((this.EmployeeIDChanged != null)) {
                                this.EmployeeIDChanged(this, new EmployeeIDChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "OrderDate")) {
                                if ((this.OrderDateChanged != null)) {
                                    this.OrderDateChanged(this, new OrderDateChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "RequiredDate")) {
                                    if ((this.RequiredDateChanged != null)) {
                                        this.RequiredDateChanged(this, new RequiredDateChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "ShippedDate")) {
                                        if ((this.ShippedDateChanged != null)) {
                                            this.ShippedDateChanged(this, new ShippedDateChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "ShipVia")) {
                                            if ((this.ShipViaChanged != null)) {
                                                this.ShipViaChanged(this, new ShipViaChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "Freight")) {
                                                if ((this.FreightChanged != null)) {
                                                    this.FreightChanged(this, new FreightChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "ShipName")) {
                                                    if ((this.ShipNameChanged != null)) {
                                                        this.ShipNameChanged(this, new ShipNameChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "ShipAddress")) {
                                                        if ((this.ShipAddressChanged != null)) {
                                                            this.ShipAddressChanged(this, new ShipAddressChangeEventArg(e));
                                                        }
                                                    }
                                                    else {
                                                        if ((e.Column.ColumnName == "ShipCity")) {
                                                            if ((this.ShipCityChanged != null)) {
                                                                this.ShipCityChanged(this, new ShipCityChangeEventArg(e));
                                                            }
                                                        }
                                                        else {
                                                            if ((e.Column.ColumnName == "ShipRegion")) {
                                                                if ((this.ShipRegionChanged != null)) {
                                                                    this.ShipRegionChanged(this, new ShipRegionChangeEventArg(e));
                                                                }
                                                            }
                                                            else {
                                                                if ((e.Column.ColumnName == "ShipPostalCode")) {
                                                                    if ((this.ShipPostalCodeChanged != null)) {
                                                                        this.ShipPostalCodeChanged(this, new ShipPostalCodeChangeEventArg(e));
                                                                    }
                                                                }
                                                                else {
                                                                    if ((e.Column.ColumnName == "ShipCountry")) {
                                                                        if ((this.ShipCountryChanged != null)) {
                                                                            this.ShipCountryChanged(this, new ShipCountryChangeEventArg(e));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddOrdersRow(OrdersRow row) {
                this.Rows.Add(row);
            }
            
            public OrdersRow AddOrdersRow(CustomersRow parentCustomersRowByCustomersOrders, EmployeesRow parentEmployeesRowByEmployeesOrders, System.DateTime OrderDate, System.DateTime RequiredDate, System.DateTime ShippedDate, ShippersRow parentShippersRowByShippersOrders, decimal Freight, string ShipName, string ShipAddress, string ShipCity, string ShipRegion, string ShipPostalCode, string ShipCountry) {
                OrdersRow rowOrdersRow = ((OrdersRow)(this.NewRow()));
                rowOrdersRow.ItemArray = new object[] {
                        null,
                        parentCustomersRowByCustomersOrders[0],
                        parentEmployeesRowByEmployeesOrders[0],
                        OrderDate,
                        RequiredDate,
                        ShippedDate,
                        parentShippersRowByShippersOrders[0],
                        Freight,
                        ShipName,
                        ShipAddress,
                        ShipCity,
                        ShipRegion,
                        ShipPostalCode,
                        ShipCountry};
                this.Rows.Add(rowOrdersRow);
                return rowOrdersRow;
            }
            
            public OrdersRow FindByOrderID(int OrderID) {
                return ((OrdersRow)(this.Rows.Find(new object[] {
                            OrderID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                OrdersDataTable cln = ((OrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new OrdersDataTable();
            }
            
            internal void InitVars() {
                this.columnOrderID = base.Columns["OrderID"];
                this.columnCustomerID = base.Columns["CustomerID"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnOrderDate = base.Columns["OrderDate"];
                this.columnRequiredDate = base.Columns["RequiredDate"];
                this.columnShippedDate = base.Columns["ShippedDate"];
                this.columnShipVia = base.Columns["ShipVia"];
                this.columnFreight = base.Columns["Freight"];
                this.columnShipName = base.Columns["ShipName"];
                this.columnShipAddress = base.Columns["ShipAddress"];
                this.columnShipCity = base.Columns["ShipCity"];
                this.columnShipRegion = base.Columns["ShipRegion"];
                this.columnShipPostalCode = base.Columns["ShipPostalCode"];
                this.columnShipCountry = base.Columns["ShipCountry"];
            }
            
            private void InitClass() {
                this.columnOrderID = new System.Data.DataColumn("OrderID", typeof(int), null, System.Data.MappingType.Element);
                this.columnOrderID.ExtendedProperties.Add("Generator_ChangedEventName", "OrderIDChanged");
                this.columnOrderID.ExtendedProperties.Add("Generator_ChangingEventName", "OrderIDChanging");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "OrderID");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OrderIDColumn");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOrderID");
                this.columnOrderID.ExtendedProperties.Add("Generator_DelegateName", "OrderIDChangeEventHandler");
                this.columnOrderID.ExtendedProperties.Add("Generator_EventArgName", "OrderIDChangeEventArg");
                this.columnOrderID.ExtendedProperties.Add("User_ColumnName", "OrderID");
                base.Columns.Add(this.columnOrderID);
                this.columnCustomerID = new System.Data.DataColumn("CustomerID", typeof(string), null, System.Data.MappingType.Element);
                this.columnCustomerID.ExtendedProperties.Add("Generator_ChangedEventName", "CustomerIDChanged");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ChangingEventName", "CustomerIDChanging");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CustomerID");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CustomerIDColumn");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCustomerID");
                this.columnCustomerID.ExtendedProperties.Add("Generator_DelegateName", "CustomerIDChangeEventHandler");
                this.columnCustomerID.ExtendedProperties.Add("Generator_EventArgName", "CustomerIDChangeEventArg");
                this.columnCustomerID.ExtendedProperties.Add("User_ColumnName", "CustomerID");
                base.Columns.Add(this.columnCustomerID);
                this.columnEmployeeID = new System.Data.DataColumn("EmployeeID", typeof(int), null, System.Data.MappingType.Element);
                this.columnEmployeeID.ExtendedProperties.Add("Generator_ChangedEventName", "EmployeeIDChanged");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_ChangingEventName", "EmployeeIDChanging");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "EmployeeID");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "EmployeeIDColumn");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnEmployeeID");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_DelegateName", "EmployeeIDChangeEventHandler");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_EventArgName", "EmployeeIDChangeEventArg");
                this.columnEmployeeID.ExtendedProperties.Add("User_ColumnName", "EmployeeID");
                base.Columns.Add(this.columnEmployeeID);
                this.columnOrderDate = new System.Data.DataColumn("OrderDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnOrderDate.ExtendedProperties.Add("Generator_ChangedEventName", "OrderDateChanged");
                this.columnOrderDate.ExtendedProperties.Add("Generator_ChangingEventName", "OrderDateChanging");
                this.columnOrderDate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "OrderDate");
                this.columnOrderDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OrderDateColumn");
                this.columnOrderDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOrderDate");
                this.columnOrderDate.ExtendedProperties.Add("Generator_DelegateName", "OrderDateChangeEventHandler");
                this.columnOrderDate.ExtendedProperties.Add("Generator_EventArgName", "OrderDateChangeEventArg");
                this.columnOrderDate.ExtendedProperties.Add("User_ColumnName", "OrderDate");
                base.Columns.Add(this.columnOrderDate);
                this.columnRequiredDate = new System.Data.DataColumn("RequiredDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnRequiredDate.ExtendedProperties.Add("Generator_ChangedEventName", "RequiredDateChanged");
                this.columnRequiredDate.ExtendedProperties.Add("Generator_ChangingEventName", "RequiredDateChanging");
                this.columnRequiredDate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "RequiredDate");
                this.columnRequiredDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RequiredDateColumn");
                this.columnRequiredDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRequiredDate");
                this.columnRequiredDate.ExtendedProperties.Add("Generator_DelegateName", "RequiredDateChangeEventHandler");
                this.columnRequiredDate.ExtendedProperties.Add("Generator_EventArgName", "RequiredDateChangeEventArg");
                this.columnRequiredDate.ExtendedProperties.Add("User_ColumnName", "RequiredDate");
                base.Columns.Add(this.columnRequiredDate);
                this.columnShippedDate = new System.Data.DataColumn("ShippedDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnShippedDate.ExtendedProperties.Add("Generator_ChangedEventName", "ShippedDateChanged");
                this.columnShippedDate.ExtendedProperties.Add("Generator_ChangingEventName", "ShippedDateChanging");
                this.columnShippedDate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ShippedDate");
                this.columnShippedDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ShippedDateColumn");
                this.columnShippedDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnShippedDate");
                this.columnShippedDate.ExtendedProperties.Add("Generator_DelegateName", "ShippedDateChangeEventHandler");
                this.columnShippedDate.ExtendedProperties.Add("Generator_EventArgName", "ShippedDateChangeEventArg");
                this.columnShippedDate.ExtendedProperties.Add("User_ColumnName", "ShippedDate");
                base.Columns.Add(this.columnShippedDate);
                this.columnShipVia = new System.Data.DataColumn("ShipVia", typeof(int), null, System.Data.MappingType.Element);
                this.columnShipVia.ExtendedProperties.Add("Generator_ChangedEventName", "ShipViaChanged");
                this.columnShipVia.ExtendedProperties.Add("Generator_ChangingEventName", "ShipViaChanging");
                this.columnShipVia.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ShipVia");
                this.columnShipVia.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ShipViaColumn");
                this.columnShipVia.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnShipVia");
                this.columnShipVia.ExtendedProperties.Add("Generator_DelegateName", "ShipViaChangeEventHandler");
                this.columnShipVia.ExtendedProperties.Add("Generator_EventArgName", "ShipViaChangeEventArg");
                this.columnShipVia.ExtendedProperties.Add("User_ColumnName", "ShipVia");
                base.Columns.Add(this.columnShipVia);
                this.columnFreight = new System.Data.DataColumn("Freight", typeof(decimal), null, System.Data.MappingType.Element);
                this.columnFreight.ExtendedProperties.Add("Generator_ChangedEventName", "FreightChanged");
                this.columnFreight.ExtendedProperties.Add("Generator_ChangingEventName", "FreightChanging");
                this.columnFreight.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Freight");
                this.columnFreight.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FreightColumn");
                this.columnFreight.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFreight");
                this.columnFreight.ExtendedProperties.Add("Generator_DelegateName", "FreightChangeEventHandler");
                this.columnFreight.ExtendedProperties.Add("Generator_EventArgName", "FreightChangeEventArg");
                this.columnFreight.ExtendedProperties.Add("User_ColumnName", "Freight");
                base.Columns.Add(this.columnFreight);
                this.columnShipName = new System.Data.DataColumn("ShipName", typeof(string), null, System.Data.MappingType.Element);
                this.columnShipName.ExtendedProperties.Add("Generator_ChangedEventName", "ShipNameChanged");
                this.columnShipName.ExtendedProperties.Add("Generator_ChangingEventName", "ShipNameChanging");
                this.columnShipName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ShipName");
                this.columnShipName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ShipNameColumn");
                this.columnShipName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnShipName");
                this.columnShipName.ExtendedProperties.Add("Generator_DelegateName", "ShipNameChangeEventHandler");
                this.columnShipName.ExtendedProperties.Add("Generator_EventArgName", "ShipNameChangeEventArg");
                this.columnShipName.ExtendedProperties.Add("User_ColumnName", "ShipName");
                base.Columns.Add(this.columnShipName);
                this.columnShipAddress = new System.Data.DataColumn("ShipAddress", typeof(string), null, System.Data.MappingType.Element);
                this.columnShipAddress.ExtendedProperties.Add("Generator_ChangedEventName", "ShipAddressChanged");
                this.columnShipAddress.ExtendedProperties.Add("Generator_ChangingEventName", "ShipAddressChanging");
                this.columnShipAddress.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ShipAddress");
                this.columnShipAddress.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ShipAddressColumn");
                this.columnShipAddress.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnShipAddress");
                this.columnShipAddress.ExtendedProperties.Add("Generator_DelegateName", "ShipAddressChangeEventHandler");
                this.columnShipAddress.ExtendedProperties.Add("Generator_EventArgName", "ShipAddressChangeEventArg");
                this.columnShipAddress.ExtendedProperties.Add("User_ColumnName", "ShipAddress");
                base.Columns.Add(this.columnShipAddress);
                this.columnShipCity = new System.Data.DataColumn("ShipCity", typeof(string), null, System.Data.MappingType.Element);
                this.columnShipCity.ExtendedProperties.Add("Generator_ChangedEventName", "ShipCityChanged");
                this.columnShipCity.ExtendedProperties.Add("Generator_ChangingEventName", "ShipCityChanging");
                this.columnShipCity.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ShipCity");
                this.columnShipCity.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ShipCityColumn");
                this.columnShipCity.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnShipCity");
                this.columnShipCity.ExtendedProperties.Add("Generator_DelegateName", "ShipCityChangeEventHandler");
                this.columnShipCity.ExtendedProperties.Add("Generator_EventArgName", "ShipCityChangeEventArg");
                this.columnShipCity.ExtendedProperties.Add("User_ColumnName", "ShipCity");
                base.Columns.Add(this.columnShipCity);
                this.columnShipRegion = new System.Data.DataColumn("ShipRegion", typeof(string), null, System.Data.MappingType.Element);
                this.columnShipRegion.ExtendedProperties.Add("Generator_ChangedEventName", "ShipRegionChanged");
                this.columnShipRegion.ExtendedProperties.Add("Generator_ChangingEventName", "ShipRegionChanging");
                this.columnShipRegion.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ShipRegion");
                this.columnShipRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ShipRegionColumn");
                this.columnShipRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnShipRegion");
                this.columnShipRegion.ExtendedProperties.Add("Generator_DelegateName", "ShipRegionChangeEventHandler");
                this.columnShipRegion.ExtendedProperties.Add("Generator_EventArgName", "ShipRegionChangeEventArg");
                this.columnShipRegion.ExtendedProperties.Add("User_ColumnName", "ShipRegion");
                base.Columns.Add(this.columnShipRegion);
                this.columnShipPostalCode = new System.Data.DataColumn("ShipPostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.columnShipPostalCode.ExtendedProperties.Add("Generator_ChangedEventName", "ShipPostalCodeChanged");
                this.columnShipPostalCode.ExtendedProperties.Add("Generator_ChangingEventName", "ShipPostalCodeChanging");
                this.columnShipPostalCode.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ShipPostalCode");
                this.columnShipPostalCode.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ShipPostalCodeColumn");
                this.columnShipPostalCode.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnShipPostalCode");
                this.columnShipPostalCode.ExtendedProperties.Add("Generator_DelegateName", "ShipPostalCodeChangeEventHandler");
                this.columnShipPostalCode.ExtendedProperties.Add("Generator_EventArgName", "ShipPostalCodeChangeEventArg");
                this.columnShipPostalCode.ExtendedProperties.Add("User_ColumnName", "ShipPostalCode");
                base.Columns.Add(this.columnShipPostalCode);
                this.columnShipCountry = new System.Data.DataColumn("ShipCountry", typeof(string), null, System.Data.MappingType.Element);
                this.columnShipCountry.ExtendedProperties.Add("Generator_ChangedEventName", "ShipCountryChanged");
                this.columnShipCountry.ExtendedProperties.Add("Generator_ChangingEventName", "ShipCountryChanging");
                this.columnShipCountry.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ShipCountry");
                this.columnShipCountry.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ShipCountryColumn");
                this.columnShipCountry.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnShipCountry");
                this.columnShipCountry.ExtendedProperties.Add("Generator_DelegateName", "ShipCountryChangeEventHandler");
                this.columnShipCountry.ExtendedProperties.Add("Generator_EventArgName", "ShipCountryChangeEventArg");
                this.columnShipCountry.ExtendedProperties.Add("User_ColumnName", "ShipCountry");
                base.Columns.Add(this.columnShipCountry);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnOrderID}, true));
                this.columnOrderID.AutoIncrement = true;
                this.columnOrderID.AllowDBNull = false;
                this.columnOrderID.Unique = true;
                this.columnCustomerID.MaxLength = 5;
                this.columnShipName.MaxLength = 40;
                this.columnShipAddress.MaxLength = 60;
                this.columnShipCity.MaxLength = 15;
                this.columnShipRegion.MaxLength = 15;
                this.columnShipPostalCode.MaxLength = 10;
                this.columnShipCountry.MaxLength = 15;
                this.ExtendedProperties.Add("Generator_RowClassName", "OrdersRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "OrdersRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "OrdersRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "OrdersDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Orders");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableOrders");
                this.ExtendedProperties.Add("User_TableName", "Orders");
            }
            
            public OrdersRow NewOrdersRow() {
                return ((OrdersRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrdersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrdersRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrdersRowChanged != null)) {
                    this.OrdersRowChanged(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrdersRowChanging != null)) {
                    this.OrdersRowChanging(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrdersRowDeleted != null)) {
                    this.OrdersRowDeleted(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrdersRowDeleting != null)) {
                    this.OrdersRowDeleting(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrdersRow(OrdersRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NorthwindDataSet ds = new NorthwindDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void OrderIDChangeEventHandler(OrdersDataTable sender, OrderIDChangeEventArg e);
            
            public class OrderIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public OrderIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn OrderIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void CustomerIDChangeEventHandler(OrdersDataTable sender, CustomerIDChangeEventArg e);
            
            public class CustomerIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CustomerIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CustomerIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void EmployeeIDChangeEventHandler(OrdersDataTable sender, EmployeeIDChangeEventArg e);
            
            public class EmployeeIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public EmployeeIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn EmployeeIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void OrderDateChangeEventHandler(OrdersDataTable sender, OrderDateChangeEventArg e);
            
            public class OrderDateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public OrderDateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn OrderDateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public System.DateTime ProposedValue {
                    get {
                        return ((System.DateTime)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((System.DateTime)(value));
                    }
                }
            }
            
            public delegate void RequiredDateChangeEventHandler(OrdersDataTable sender, RequiredDateChangeEventArg e);
            
            public class RequiredDateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public RequiredDateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn RequiredDateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public System.DateTime ProposedValue {
                    get {
                        return ((System.DateTime)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((System.DateTime)(value));
                    }
                }
            }
            
            public delegate void ShippedDateChangeEventHandler(OrdersDataTable sender, ShippedDateChangeEventArg e);
            
            public class ShippedDateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ShippedDateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ShippedDateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public System.DateTime ProposedValue {
                    get {
                        return ((System.DateTime)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((System.DateTime)(value));
                    }
                }
            }
            
            public delegate void ShipViaChangeEventHandler(OrdersDataTable sender, ShipViaChangeEventArg e);
            
            public class ShipViaChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ShipViaChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ShipViaColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void FreightChangeEventHandler(OrdersDataTable sender, FreightChangeEventArg e);
            
            public class FreightChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public FreightChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn FreightColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public decimal ProposedValue {
                    get {
                        return ((decimal)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((decimal)(value));
                    }
                }
            }
            
            public delegate void ShipNameChangeEventHandler(OrdersDataTable sender, ShipNameChangeEventArg e);
            
            public class ShipNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ShipNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ShipNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ShipAddressChangeEventHandler(OrdersDataTable sender, ShipAddressChangeEventArg e);
            
            public class ShipAddressChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ShipAddressChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ShipAddressColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ShipCityChangeEventHandler(OrdersDataTable sender, ShipCityChangeEventArg e);
            
            public class ShipCityChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ShipCityChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ShipCityColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ShipRegionChangeEventHandler(OrdersDataTable sender, ShipRegionChangeEventArg e);
            
            public class ShipRegionChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ShipRegionChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ShipRegionColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ShipPostalCodeChangeEventHandler(OrdersDataTable sender, ShipPostalCodeChangeEventArg e);
            
            public class ShipPostalCodeChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ShipPostalCodeChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ShipPostalCodeColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ShipCountryChangeEventHandler(OrdersDataTable sender, ShipCountryChangeEventArg e);
            
            public class ShipCountryChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ShipCountryChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ShipCountryColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class SuppliersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSupplierID;
            
            private System.Data.DataColumn columnCompanyName;
            
            private System.Data.DataColumn columnContactName;
            
            private System.Data.DataColumn columnContactTitle;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnCity;
            
            private System.Data.DataColumn columnRegion;
            
            private System.Data.DataColumn columnPostalCode;
            
            private System.Data.DataColumn columnCountry;
            
            private System.Data.DataColumn columnPhone;
            
            private System.Data.DataColumn columnFax;
            
            private System.Data.DataColumn columnHomePage;
            
            private bool m_suspendValidation = false;
            
            public SuppliersDataTable() {
                this.TableName = "Suppliers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal SuppliersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected SuppliersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn SupplierIDColumn {
                get {
                    return this.columnSupplierID;
                }
            }
            
            internal System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            internal System.Data.DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal System.Data.DataColumn ContactTitleColumn {
                get {
                    return this.columnContactTitle;
                }
            }
            
            internal System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal System.Data.DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            internal System.Data.DataColumn HomePageColumn {
                get {
                    return this.columnHomePage;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public SuppliersRow this[int index] {
                get {
                    return ((SuppliersRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event SupplierIDChangeEventHandler SupplierIDChanging;
            
            public event SupplierIDChangeEventHandler SupplierIDChanged;
            
            public event CompanyNameChangeEventHandler CompanyNameChanging;
            
            public event CompanyNameChangeEventHandler CompanyNameChanged;
            
            public event ContactNameChangeEventHandler ContactNameChanging;
            
            public event ContactNameChangeEventHandler ContactNameChanged;
            
            public event ContactTitleChangeEventHandler ContactTitleChanging;
            
            public event ContactTitleChangeEventHandler ContactTitleChanged;
            
            public event AddressChangeEventHandler AddressChanging;
            
            public event AddressChangeEventHandler AddressChanged;
            
            public event CityChangeEventHandler CityChanging;
            
            public event CityChangeEventHandler CityChanged;
            
            public event RegionChangeEventHandler RegionChanging;
            
            public event RegionChangeEventHandler RegionChanged;
            
            public event PostalCodeChangeEventHandler PostalCodeChanging;
            
            public event PostalCodeChangeEventHandler PostalCodeChanged;
            
            public event CountryChangeEventHandler CountryChanging;
            
            public event CountryChangeEventHandler CountryChanged;
            
            public event PhoneChangeEventHandler PhoneChanging;
            
            public event PhoneChangeEventHandler PhoneChanged;
            
            public event FaxChangeEventHandler FaxChanging;
            
            public event FaxChangeEventHandler FaxChanged;
            
            public event HomePageChangeEventHandler HomePageChanging;
            
            public event HomePageChangeEventHandler HomePageChanged;
            
            public event SuppliersRowChangeEventHandler SuppliersRowChanged;
            
            public event SuppliersRowChangeEventHandler SuppliersRowChanging;
            
            public event SuppliersRowChangeEventHandler SuppliersRowDeleted;
            
            public event SuppliersRowChangeEventHandler SuppliersRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "SupplierID")) {
                    if ((this.SupplierIDChanging != null)) {
                        this.SupplierIDChanging(this, new SupplierIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CompanyName")) {
                        if ((this.CompanyNameChanging != null)) {
                            this.CompanyNameChanging(this, new CompanyNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ContactName")) {
                            if ((this.ContactNameChanging != null)) {
                                this.ContactNameChanging(this, new ContactNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "ContactTitle")) {
                                if ((this.ContactTitleChanging != null)) {
                                    this.ContactTitleChanging(this, new ContactTitleChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Address")) {
                                    if ((this.AddressChanging != null)) {
                                        this.AddressChanging(this, new AddressChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "City")) {
                                        if ((this.CityChanging != null)) {
                                            this.CityChanging(this, new CityChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "Region")) {
                                            if ((this.RegionChanging != null)) {
                                                this.RegionChanging(this, new RegionChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "PostalCode")) {
                                                if ((this.PostalCodeChanging != null)) {
                                                    this.PostalCodeChanging(this, new PostalCodeChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "Country")) {
                                                    if ((this.CountryChanging != null)) {
                                                        this.CountryChanging(this, new CountryChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "Phone")) {
                                                        if ((this.PhoneChanging != null)) {
                                                            this.PhoneChanging(this, new PhoneChangeEventArg(e));
                                                        }
                                                    }
                                                    else {
                                                        if ((e.Column.ColumnName == "Fax")) {
                                                            if ((this.FaxChanging != null)) {
                                                                this.FaxChanging(this, new FaxChangeEventArg(e));
                                                            }
                                                        }
                                                        else {
                                                            if ((e.Column.ColumnName == "HomePage")) {
                                                                if ((this.HomePageChanging != null)) {
                                                                    this.HomePageChanging(this, new HomePageChangeEventArg(e));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "SupplierID")) {
                    if ((this.SupplierIDChanged != null)) {
                        this.SupplierIDChanged(this, new SupplierIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CompanyName")) {
                        if ((this.CompanyNameChanged != null)) {
                            this.CompanyNameChanged(this, new CompanyNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ContactName")) {
                            if ((this.ContactNameChanged != null)) {
                                this.ContactNameChanged(this, new ContactNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "ContactTitle")) {
                                if ((this.ContactTitleChanged != null)) {
                                    this.ContactTitleChanged(this, new ContactTitleChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Address")) {
                                    if ((this.AddressChanged != null)) {
                                        this.AddressChanged(this, new AddressChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "City")) {
                                        if ((this.CityChanged != null)) {
                                            this.CityChanged(this, new CityChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "Region")) {
                                            if ((this.RegionChanged != null)) {
                                                this.RegionChanged(this, new RegionChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "PostalCode")) {
                                                if ((this.PostalCodeChanged != null)) {
                                                    this.PostalCodeChanged(this, new PostalCodeChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "Country")) {
                                                    if ((this.CountryChanged != null)) {
                                                        this.CountryChanged(this, new CountryChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "Phone")) {
                                                        if ((this.PhoneChanged != null)) {
                                                            this.PhoneChanged(this, new PhoneChangeEventArg(e));
                                                        }
                                                    }
                                                    else {
                                                        if ((e.Column.ColumnName == "Fax")) {
                                                            if ((this.FaxChanged != null)) {
                                                                this.FaxChanged(this, new FaxChangeEventArg(e));
                                                            }
                                                        }
                                                        else {
                                                            if ((e.Column.ColumnName == "HomePage")) {
                                                                if ((this.HomePageChanged != null)) {
                                                                    this.HomePageChanged(this, new HomePageChangeEventArg(e));
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddSuppliersRow(SuppliersRow row) {
                this.Rows.Add(row);
            }
            
            public SuppliersRow AddSuppliersRow(string CompanyName, string ContactName, string ContactTitle, string Address, string City, string Region, string PostalCode, string Country, string Phone, string Fax, string HomePage) {
                SuppliersRow rowSuppliersRow = ((SuppliersRow)(this.NewRow()));
                rowSuppliersRow.ItemArray = new object[] {
                        null,
                        CompanyName,
                        ContactName,
                        ContactTitle,
                        Address,
                        City,
                        Region,
                        PostalCode,
                        Country,
                        Phone,
                        Fax,
                        HomePage};
                this.Rows.Add(rowSuppliersRow);
                return rowSuppliersRow;
            }
            
            public SuppliersRow FindBySupplierID(int SupplierID) {
                return ((SuppliersRow)(this.Rows.Find(new object[] {
                            SupplierID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                SuppliersDataTable cln = ((SuppliersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new SuppliersDataTable();
            }
            
            internal void InitVars() {
                this.columnSupplierID = base.Columns["SupplierID"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnContactName = base.Columns["ContactName"];
                this.columnContactTitle = base.Columns["ContactTitle"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnRegion = base.Columns["Region"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnCountry = base.Columns["Country"];
                this.columnPhone = base.Columns["Phone"];
                this.columnFax = base.Columns["Fax"];
                this.columnHomePage = base.Columns["HomePage"];
            }
            
            private void InitClass() {
                this.columnSupplierID = new System.Data.DataColumn("SupplierID", typeof(int), null, System.Data.MappingType.Element);
                this.columnSupplierID.ExtendedProperties.Add("Generator_ChangedEventName", "SupplierIDChanged");
                this.columnSupplierID.ExtendedProperties.Add("Generator_ChangingEventName", "SupplierIDChanging");
                this.columnSupplierID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "SupplierID");
                this.columnSupplierID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "SupplierIDColumn");
                this.columnSupplierID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnSupplierID");
                this.columnSupplierID.ExtendedProperties.Add("Generator_DelegateName", "SupplierIDChangeEventHandler");
                this.columnSupplierID.ExtendedProperties.Add("Generator_EventArgName", "SupplierIDChangeEventArg");
                this.columnSupplierID.ExtendedProperties.Add("User_ColumnName", "SupplierID");
                base.Columns.Add(this.columnSupplierID);
                this.columnCompanyName = new System.Data.DataColumn("CompanyName", typeof(string), null, System.Data.MappingType.Element);
                this.columnCompanyName.ExtendedProperties.Add("Generator_ChangedEventName", "CompanyNameChanged");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ChangingEventName", "CompanyNameChanging");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CompanyName");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CompanyNameColumn");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCompanyName");
                this.columnCompanyName.ExtendedProperties.Add("Generator_DelegateName", "CompanyNameChangeEventHandler");
                this.columnCompanyName.ExtendedProperties.Add("Generator_EventArgName", "CompanyNameChangeEventArg");
                this.columnCompanyName.ExtendedProperties.Add("User_ColumnName", "CompanyName");
                base.Columns.Add(this.columnCompanyName);
                this.columnContactName = new System.Data.DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.columnContactName.ExtendedProperties.Add("Generator_ChangedEventName", "ContactNameChanged");
                this.columnContactName.ExtendedProperties.Add("Generator_ChangingEventName", "ContactNameChanging");
                this.columnContactName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ContactName");
                this.columnContactName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ContactNameColumn");
                this.columnContactName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnContactName");
                this.columnContactName.ExtendedProperties.Add("Generator_DelegateName", "ContactNameChangeEventHandler");
                this.columnContactName.ExtendedProperties.Add("Generator_EventArgName", "ContactNameChangeEventArg");
                this.columnContactName.ExtendedProperties.Add("User_ColumnName", "ContactName");
                base.Columns.Add(this.columnContactName);
                this.columnContactTitle = new System.Data.DataColumn("ContactTitle", typeof(string), null, System.Data.MappingType.Element);
                this.columnContactTitle.ExtendedProperties.Add("Generator_ChangedEventName", "ContactTitleChanged");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ChangingEventName", "ContactTitleChanging");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ContactTitle");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ContactTitleColumn");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnContactTitle");
                this.columnContactTitle.ExtendedProperties.Add("Generator_DelegateName", "ContactTitleChangeEventHandler");
                this.columnContactTitle.ExtendedProperties.Add("Generator_EventArgName", "ContactTitleChangeEventArg");
                this.columnContactTitle.ExtendedProperties.Add("User_ColumnName", "ContactTitle");
                base.Columns.Add(this.columnContactTitle);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.columnAddress.ExtendedProperties.Add("Generator_ChangedEventName", "AddressChanged");
                this.columnAddress.ExtendedProperties.Add("Generator_ChangingEventName", "AddressChanging");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Address");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "AddressColumn");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAddress");
                this.columnAddress.ExtendedProperties.Add("Generator_DelegateName", "AddressChangeEventHandler");
                this.columnAddress.ExtendedProperties.Add("Generator_EventArgName", "AddressChangeEventArg");
                this.columnAddress.ExtendedProperties.Add("User_ColumnName", "Address");
                base.Columns.Add(this.columnAddress);
                this.columnCity = new System.Data.DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.columnCity.ExtendedProperties.Add("Generator_ChangedEventName", "CityChanged");
                this.columnCity.ExtendedProperties.Add("Generator_ChangingEventName", "CityChanging");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "City");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CityColumn");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCity");
                this.columnCity.ExtendedProperties.Add("Generator_DelegateName", "CityChangeEventHandler");
                this.columnCity.ExtendedProperties.Add("Generator_EventArgName", "CityChangeEventArg");
                this.columnCity.ExtendedProperties.Add("User_ColumnName", "City");
                base.Columns.Add(this.columnCity);
                this.columnRegion = new System.Data.DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.columnRegion.ExtendedProperties.Add("Generator_ChangedEventName", "RegionChanged");
                this.columnRegion.ExtendedProperties.Add("Generator_ChangingEventName", "RegionChanging");
                this.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Region");
                this.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn");
                this.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion");
                this.columnRegion.ExtendedProperties.Add("Generator_DelegateName", "RegionChangeEventHandler");
                this.columnRegion.ExtendedProperties.Add("Generator_EventArgName", "RegionChangeEventArg");
                this.columnRegion.ExtendedProperties.Add("User_ColumnName", "Region");
                base.Columns.Add(this.columnRegion);
                this.columnPostalCode = new System.Data.DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.columnPostalCode.ExtendedProperties.Add("Generator_ChangedEventName", "PostalCodeChanged");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ChangingEventName", "PostalCodeChanging");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PostalCode");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PostalCodeColumn");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPostalCode");
                this.columnPostalCode.ExtendedProperties.Add("Generator_DelegateName", "PostalCodeChangeEventHandler");
                this.columnPostalCode.ExtendedProperties.Add("Generator_EventArgName", "PostalCodeChangeEventArg");
                this.columnPostalCode.ExtendedProperties.Add("User_ColumnName", "PostalCode");
                base.Columns.Add(this.columnPostalCode);
                this.columnCountry = new System.Data.DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.columnCountry.ExtendedProperties.Add("Generator_ChangedEventName", "CountryChanged");
                this.columnCountry.ExtendedProperties.Add("Generator_ChangingEventName", "CountryChanging");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Country");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CountryColumn");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCountry");
                this.columnCountry.ExtendedProperties.Add("Generator_DelegateName", "CountryChangeEventHandler");
                this.columnCountry.ExtendedProperties.Add("Generator_EventArgName", "CountryChangeEventArg");
                this.columnCountry.ExtendedProperties.Add("User_ColumnName", "Country");
                base.Columns.Add(this.columnCountry);
                this.columnPhone = new System.Data.DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.columnPhone.ExtendedProperties.Add("Generator_ChangedEventName", "PhoneChanged");
                this.columnPhone.ExtendedProperties.Add("Generator_ChangingEventName", "PhoneChanging");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Phone");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PhoneColumn");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPhone");
                this.columnPhone.ExtendedProperties.Add("Generator_DelegateName", "PhoneChangeEventHandler");
                this.columnPhone.ExtendedProperties.Add("Generator_EventArgName", "PhoneChangeEventArg");
                this.columnPhone.ExtendedProperties.Add("User_ColumnName", "Phone");
                base.Columns.Add(this.columnPhone);
                this.columnFax = new System.Data.DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.columnFax.ExtendedProperties.Add("Generator_ChangedEventName", "FaxChanged");
                this.columnFax.ExtendedProperties.Add("Generator_ChangingEventName", "FaxChanging");
                this.columnFax.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Fax");
                this.columnFax.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FaxColumn");
                this.columnFax.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFax");
                this.columnFax.ExtendedProperties.Add("Generator_DelegateName", "FaxChangeEventHandler");
                this.columnFax.ExtendedProperties.Add("Generator_EventArgName", "FaxChangeEventArg");
                this.columnFax.ExtendedProperties.Add("User_ColumnName", "Fax");
                base.Columns.Add(this.columnFax);
                this.columnHomePage = new System.Data.DataColumn("HomePage", typeof(string), null, System.Data.MappingType.Element);
                this.columnHomePage.ExtendedProperties.Add("Generator_ChangedEventName", "HomePageChanged");
                this.columnHomePage.ExtendedProperties.Add("Generator_ChangingEventName", "HomePageChanging");
                this.columnHomePage.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "HomePage");
                this.columnHomePage.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "HomePageColumn");
                this.columnHomePage.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnHomePage");
                this.columnHomePage.ExtendedProperties.Add("Generator_DelegateName", "HomePageChangeEventHandler");
                this.columnHomePage.ExtendedProperties.Add("Generator_EventArgName", "HomePageChangeEventArg");
                this.columnHomePage.ExtendedProperties.Add("User_ColumnName", "HomePage");
                base.Columns.Add(this.columnHomePage);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSupplierID}, true));
                this.columnSupplierID.AutoIncrement = true;
                this.columnSupplierID.AllowDBNull = false;
                this.columnSupplierID.Unique = true;
                this.columnCompanyName.MaxLength = 40;
                this.columnContactName.MaxLength = 30;
                this.columnContactTitle.MaxLength = 30;
                this.columnAddress.MaxLength = 60;
                this.columnCity.MaxLength = 15;
                this.columnRegion.MaxLength = 15;
                this.columnPostalCode.MaxLength = 10;
                this.columnCountry.MaxLength = 15;
                this.columnPhone.MaxLength = 24;
                this.columnFax.MaxLength = 24;
                this.columnHomePage.MaxLength = 536870910;
                this.ExtendedProperties.Add("Generator_RowClassName", "SuppliersRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "SuppliersRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "SuppliersRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "SuppliersDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Suppliers");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableSuppliers");
                this.ExtendedProperties.Add("User_TableName", "Suppliers");
            }
            
            public SuppliersRow NewSuppliersRow() {
                return ((SuppliersRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SuppliersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SuppliersRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SuppliersRowChanged != null)) {
                    this.SuppliersRowChanged(this, new SuppliersRowChangeEvent(((SuppliersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SuppliersRowChanging != null)) {
                    this.SuppliersRowChanging(this, new SuppliersRowChangeEvent(((SuppliersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SuppliersRowDeleted != null)) {
                    this.SuppliersRowDeleted(this, new SuppliersRowChangeEvent(((SuppliersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SuppliersRowDeleting != null)) {
                    this.SuppliersRowDeleting(this, new SuppliersRowChangeEvent(((SuppliersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSuppliersRow(SuppliersRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NorthwindDataSet ds = new NorthwindDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SuppliersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void SupplierIDChangeEventHandler(SuppliersDataTable sender, SupplierIDChangeEventArg e);
            
            public class SupplierIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public SupplierIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn SupplierIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void CompanyNameChangeEventHandler(SuppliersDataTable sender, CompanyNameChangeEventArg e);
            
            public class CompanyNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CompanyNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CompanyNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ContactNameChangeEventHandler(SuppliersDataTable sender, ContactNameChangeEventArg e);
            
            public class ContactNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ContactNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ContactNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ContactTitleChangeEventHandler(SuppliersDataTable sender, ContactTitleChangeEventArg e);
            
            public class ContactTitleChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ContactTitleChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ContactTitleColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void AddressChangeEventHandler(SuppliersDataTable sender, AddressChangeEventArg e);
            
            public class AddressChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public AddressChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn AddressColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void CityChangeEventHandler(SuppliersDataTable sender, CityChangeEventArg e);
            
            public class CityChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CityChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CityColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void RegionChangeEventHandler(SuppliersDataTable sender, RegionChangeEventArg e);
            
            public class RegionChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public RegionChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn RegionColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PostalCodeChangeEventHandler(SuppliersDataTable sender, PostalCodeChangeEventArg e);
            
            public class PostalCodeChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PostalCodeChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PostalCodeColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void CountryChangeEventHandler(SuppliersDataTable sender, CountryChangeEventArg e);
            
            public class CountryChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CountryChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CountryColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PhoneChangeEventHandler(SuppliersDataTable sender, PhoneChangeEventArg e);
            
            public class PhoneChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PhoneChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PhoneColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void FaxChangeEventHandler(SuppliersDataTable sender, FaxChangeEventArg e);
            
            public class FaxChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public FaxChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn FaxColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void HomePageChangeEventHandler(SuppliersDataTable sender, HomePageChangeEventArg e);
            
            public class HomePageChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public HomePageChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public SuppliersRow Row {
                    get {
                        return ((SuppliersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn HomePageColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class ShippersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnShipperID;
            
            private System.Data.DataColumn columnCompanyName;
            
            private System.Data.DataColumn columnPhone;
            
            private bool m_suspendValidation = false;
            
            public ShippersDataTable() {
                this.TableName = "Shippers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal ShippersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected ShippersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn ShipperIDColumn {
                get {
                    return this.columnShipperID;
                }
            }
            
            internal System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            internal System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public ShippersRow this[int index] {
                get {
                    return ((ShippersRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event ShipperIDChangeEventHandler ShipperIDChanging;
            
            public event ShipperIDChangeEventHandler ShipperIDChanged;
            
            public event CompanyNameChangeEventHandler CompanyNameChanging;
            
            public event CompanyNameChangeEventHandler CompanyNameChanged;
            
            public event PhoneChangeEventHandler PhoneChanging;
            
            public event PhoneChangeEventHandler PhoneChanged;
            
            public event ShippersRowChangeEventHandler ShippersRowChanged;
            
            public event ShippersRowChangeEventHandler ShippersRowChanging;
            
            public event ShippersRowChangeEventHandler ShippersRowDeleted;
            
            public event ShippersRowChangeEventHandler ShippersRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ShipperID")) {
                    if ((this.ShipperIDChanging != null)) {
                        this.ShipperIDChanging(this, new ShipperIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CompanyName")) {
                        if ((this.CompanyNameChanging != null)) {
                            this.CompanyNameChanging(this, new CompanyNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "Phone")) {
                            if ((this.PhoneChanging != null)) {
                                this.PhoneChanging(this, new PhoneChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ShipperID")) {
                    if ((this.ShipperIDChanged != null)) {
                        this.ShipperIDChanged(this, new ShipperIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CompanyName")) {
                        if ((this.CompanyNameChanged != null)) {
                            this.CompanyNameChanged(this, new CompanyNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "Phone")) {
                            if ((this.PhoneChanged != null)) {
                                this.PhoneChanged(this, new PhoneChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            public void AddShippersRow(ShippersRow row) {
                this.Rows.Add(row);
            }
            
            public ShippersRow AddShippersRow(string CompanyName, string Phone) {
                ShippersRow rowShippersRow = ((ShippersRow)(this.NewRow()));
                rowShippersRow.ItemArray = new object[] {
                        null,
                        CompanyName,
                        Phone};
                this.Rows.Add(rowShippersRow);
                return rowShippersRow;
            }
            
            public ShippersRow FindByShipperID(int ShipperID) {
                return ((ShippersRow)(this.Rows.Find(new object[] {
                            ShipperID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                ShippersDataTable cln = ((ShippersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new ShippersDataTable();
            }
            
            internal void InitVars() {
                this.columnShipperID = base.Columns["ShipperID"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnPhone = base.Columns["Phone"];
            }
            
            private void InitClass() {
                this.columnShipperID = new System.Data.DataColumn("ShipperID", typeof(int), null, System.Data.MappingType.Element);
                this.columnShipperID.ExtendedProperties.Add("Generator_ChangedEventName", "ShipperIDChanged");
                this.columnShipperID.ExtendedProperties.Add("Generator_ChangingEventName", "ShipperIDChanging");
                this.columnShipperID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ShipperID");
                this.columnShipperID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ShipperIDColumn");
                this.columnShipperID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnShipperID");
                this.columnShipperID.ExtendedProperties.Add("Generator_DelegateName", "ShipperIDChangeEventHandler");
                this.columnShipperID.ExtendedProperties.Add("Generator_EventArgName", "ShipperIDChangeEventArg");
                this.columnShipperID.ExtendedProperties.Add("User_ColumnName", "ShipperID");
                base.Columns.Add(this.columnShipperID);
                this.columnCompanyName = new System.Data.DataColumn("CompanyName", typeof(string), null, System.Data.MappingType.Element);
                this.columnCompanyName.ExtendedProperties.Add("Generator_ChangedEventName", "CompanyNameChanged");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ChangingEventName", "CompanyNameChanging");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CompanyName");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CompanyNameColumn");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCompanyName");
                this.columnCompanyName.ExtendedProperties.Add("Generator_DelegateName", "CompanyNameChangeEventHandler");
                this.columnCompanyName.ExtendedProperties.Add("Generator_EventArgName", "CompanyNameChangeEventArg");
                this.columnCompanyName.ExtendedProperties.Add("User_ColumnName", "CompanyName");
                base.Columns.Add(this.columnCompanyName);
                this.columnPhone = new System.Data.DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.columnPhone.ExtendedProperties.Add("Generator_ChangedEventName", "PhoneChanged");
                this.columnPhone.ExtendedProperties.Add("Generator_ChangingEventName", "PhoneChanging");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Phone");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PhoneColumn");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPhone");
                this.columnPhone.ExtendedProperties.Add("Generator_DelegateName", "PhoneChangeEventHandler");
                this.columnPhone.ExtendedProperties.Add("Generator_EventArgName", "PhoneChangeEventArg");
                this.columnPhone.ExtendedProperties.Add("User_ColumnName", "Phone");
                base.Columns.Add(this.columnPhone);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnShipperID}, true));
                this.columnShipperID.AutoIncrement = true;
                this.columnShipperID.AllowDBNull = false;
                this.columnShipperID.Unique = true;
                this.columnCompanyName.MaxLength = 40;
                this.columnPhone.MaxLength = 24;
                this.ExtendedProperties.Add("Generator_RowClassName", "ShippersRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ShippersRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ShippersRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "ShippersDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Shippers");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableShippers");
                this.ExtendedProperties.Add("User_TableName", "Shippers");
            }
            
            public ShippersRow NewShippersRow() {
                return ((ShippersRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ShippersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ShippersRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShippersRowChanged != null)) {
                    this.ShippersRowChanged(this, new ShippersRowChangeEvent(((ShippersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShippersRowChanging != null)) {
                    this.ShippersRowChanging(this, new ShippersRowChangeEvent(((ShippersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShippersRowDeleted != null)) {
                    this.ShippersRowDeleted(this, new ShippersRowChangeEvent(((ShippersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShippersRowDeleting != null)) {
                    this.ShippersRowDeleting(this, new ShippersRowChangeEvent(((ShippersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveShippersRow(ShippersRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NorthwindDataSet ds = new NorthwindDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ShippersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void ShipperIDChangeEventHandler(ShippersDataTable sender, ShipperIDChangeEventArg e);
            
            public class ShipperIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ShipperIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ShippersRow Row {
                    get {
                        return ((ShippersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ShipperIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void CompanyNameChangeEventHandler(ShippersDataTable sender, CompanyNameChangeEventArg e);
            
            public class CompanyNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CompanyNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ShippersRow Row {
                    get {
                        return ((ShippersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CompanyNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PhoneChangeEventHandler(ShippersDataTable sender, PhoneChangeEventArg e);
            
            public class PhoneChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PhoneChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ShippersRow Row {
                    get {
                        return ((ShippersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PhoneColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class CustomersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCustomerID;
            
            private System.Data.DataColumn columnCompanyName;
            
            private System.Data.DataColumn columnContactName;
            
            private System.Data.DataColumn columnContactTitle;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnCity;
            
            private System.Data.DataColumn columnRegion;
            
            private System.Data.DataColumn columnPostalCode;
            
            private System.Data.DataColumn columnCountry;
            
            private System.Data.DataColumn columnPhone;
            
            private System.Data.DataColumn columnFax;
            
            private bool m_suspendValidation = false;
            
            public CustomersDataTable() {
                this.TableName = "Customers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal CustomersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected CustomersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn CustomerIDColumn {
                get {
                    return this.columnCustomerID;
                }
            }
            
            internal System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            internal System.Data.DataColumn ContactNameColumn {
                get {
                    return this.columnContactName;
                }
            }
            
            internal System.Data.DataColumn ContactTitleColumn {
                get {
                    return this.columnContactTitle;
                }
            }
            
            internal System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            internal System.Data.DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public CustomersRow this[int index] {
                get {
                    return ((CustomersRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event CustomerIDChangeEventHandler CustomerIDChanging;
            
            public event CustomerIDChangeEventHandler CustomerIDChanged;
            
            public event CompanyNameChangeEventHandler CompanyNameChanging;
            
            public event CompanyNameChangeEventHandler CompanyNameChanged;
            
            public event ContactNameChangeEventHandler ContactNameChanging;
            
            public event ContactNameChangeEventHandler ContactNameChanged;
            
            public event ContactTitleChangeEventHandler ContactTitleChanging;
            
            public event ContactTitleChangeEventHandler ContactTitleChanged;
            
            public event AddressChangeEventHandler AddressChanging;
            
            public event AddressChangeEventHandler AddressChanged;
            
            public event CityChangeEventHandler CityChanging;
            
            public event CityChangeEventHandler CityChanged;
            
            public event RegionChangeEventHandler RegionChanging;
            
            public event RegionChangeEventHandler RegionChanged;
            
            public event PostalCodeChangeEventHandler PostalCodeChanging;
            
            public event PostalCodeChangeEventHandler PostalCodeChanged;
            
            public event CountryChangeEventHandler CountryChanging;
            
            public event CountryChangeEventHandler CountryChanged;
            
            public event PhoneChangeEventHandler PhoneChanging;
            
            public event PhoneChangeEventHandler PhoneChanged;
            
            public event FaxChangeEventHandler FaxChanging;
            
            public event FaxChangeEventHandler FaxChanged;
            
            public event CustomersRowChangeEventHandler CustomersRowChanged;
            
            public event CustomersRowChangeEventHandler CustomersRowChanging;
            
            public event CustomersRowChangeEventHandler CustomersRowDeleted;
            
            public event CustomersRowChangeEventHandler CustomersRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "CustomerID")) {
                    if ((this.CustomerIDChanging != null)) {
                        this.CustomerIDChanging(this, new CustomerIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CompanyName")) {
                        if ((this.CompanyNameChanging != null)) {
                            this.CompanyNameChanging(this, new CompanyNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ContactName")) {
                            if ((this.ContactNameChanging != null)) {
                                this.ContactNameChanging(this, new ContactNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "ContactTitle")) {
                                if ((this.ContactTitleChanging != null)) {
                                    this.ContactTitleChanging(this, new ContactTitleChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Address")) {
                                    if ((this.AddressChanging != null)) {
                                        this.AddressChanging(this, new AddressChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "City")) {
                                        if ((this.CityChanging != null)) {
                                            this.CityChanging(this, new CityChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "Region")) {
                                            if ((this.RegionChanging != null)) {
                                                this.RegionChanging(this, new RegionChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "PostalCode")) {
                                                if ((this.PostalCodeChanging != null)) {
                                                    this.PostalCodeChanging(this, new PostalCodeChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "Country")) {
                                                    if ((this.CountryChanging != null)) {
                                                        this.CountryChanging(this, new CountryChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "Phone")) {
                                                        if ((this.PhoneChanging != null)) {
                                                            this.PhoneChanging(this, new PhoneChangeEventArg(e));
                                                        }
                                                    }
                                                    else {
                                                        if ((e.Column.ColumnName == "Fax")) {
                                                            if ((this.FaxChanging != null)) {
                                                                this.FaxChanging(this, new FaxChangeEventArg(e));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "CustomerID")) {
                    if ((this.CustomerIDChanged != null)) {
                        this.CustomerIDChanged(this, new CustomerIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CompanyName")) {
                        if ((this.CompanyNameChanged != null)) {
                            this.CompanyNameChanged(this, new CompanyNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ContactName")) {
                            if ((this.ContactNameChanged != null)) {
                                this.ContactNameChanged(this, new ContactNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "ContactTitle")) {
                                if ((this.ContactTitleChanged != null)) {
                                    this.ContactTitleChanged(this, new ContactTitleChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Address")) {
                                    if ((this.AddressChanged != null)) {
                                        this.AddressChanged(this, new AddressChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "City")) {
                                        if ((this.CityChanged != null)) {
                                            this.CityChanged(this, new CityChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "Region")) {
                                            if ((this.RegionChanged != null)) {
                                                this.RegionChanged(this, new RegionChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "PostalCode")) {
                                                if ((this.PostalCodeChanged != null)) {
                                                    this.PostalCodeChanged(this, new PostalCodeChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "Country")) {
                                                    if ((this.CountryChanged != null)) {
                                                        this.CountryChanged(this, new CountryChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "Phone")) {
                                                        if ((this.PhoneChanged != null)) {
                                                            this.PhoneChanged(this, new PhoneChangeEventArg(e));
                                                        }
                                                    }
                                                    else {
                                                        if ((e.Column.ColumnName == "Fax")) {
                                                            if ((this.FaxChanged != null)) {
                                                                this.FaxChanged(this, new FaxChangeEventArg(e));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddCustomersRow(CustomersRow row) {
                this.Rows.Add(row);
            }
            
            public CustomersRow AddCustomersRow(string CustomerID, string CompanyName, string ContactName, string ContactTitle, string Address, string City, string Region, string PostalCode, string Country, string Phone, string Fax) {
                CustomersRow rowCustomersRow = ((CustomersRow)(this.NewRow()));
                rowCustomersRow.ItemArray = new object[] {
                        CustomerID,
                        CompanyName,
                        ContactName,
                        ContactTitle,
                        Address,
                        City,
                        Region,
                        PostalCode,
                        Country,
                        Phone,
                        Fax};
                this.Rows.Add(rowCustomersRow);
                return rowCustomersRow;
            }
            
            public CustomersRow FindByCustomerID(string CustomerID) {
                return ((CustomersRow)(this.Rows.Find(new object[] {
                            CustomerID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CustomersDataTable cln = ((CustomersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CustomersDataTable();
            }
            
            internal void InitVars() {
                this.columnCustomerID = base.Columns["CustomerID"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnContactName = base.Columns["ContactName"];
                this.columnContactTitle = base.Columns["ContactTitle"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnRegion = base.Columns["Region"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnCountry = base.Columns["Country"];
                this.columnPhone = base.Columns["Phone"];
                this.columnFax = base.Columns["Fax"];
            }
            
            private void InitClass() {
                this.columnCustomerID = new System.Data.DataColumn("CustomerID", typeof(string), null, System.Data.MappingType.Element);
                this.columnCustomerID.ExtendedProperties.Add("Generator_ChangedEventName", "CustomerIDChanged");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ChangingEventName", "CustomerIDChanging");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CustomerID");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CustomerIDColumn");
                this.columnCustomerID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCustomerID");
                this.columnCustomerID.ExtendedProperties.Add("Generator_DelegateName", "CustomerIDChangeEventHandler");
                this.columnCustomerID.ExtendedProperties.Add("Generator_EventArgName", "CustomerIDChangeEventArg");
                this.columnCustomerID.ExtendedProperties.Add("User_ColumnName", "CustomerID");
                base.Columns.Add(this.columnCustomerID);
                this.columnCompanyName = new System.Data.DataColumn("CompanyName", typeof(string), null, System.Data.MappingType.Element);
                this.columnCompanyName.ExtendedProperties.Add("Generator_ChangedEventName", "CompanyNameChanged");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ChangingEventName", "CompanyNameChanging");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CompanyName");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CompanyNameColumn");
                this.columnCompanyName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCompanyName");
                this.columnCompanyName.ExtendedProperties.Add("Generator_DelegateName", "CompanyNameChangeEventHandler");
                this.columnCompanyName.ExtendedProperties.Add("Generator_EventArgName", "CompanyNameChangeEventArg");
                this.columnCompanyName.ExtendedProperties.Add("User_ColumnName", "CompanyName");
                base.Columns.Add(this.columnCompanyName);
                this.columnContactName = new System.Data.DataColumn("ContactName", typeof(string), null, System.Data.MappingType.Element);
                this.columnContactName.ExtendedProperties.Add("Generator_ChangedEventName", "ContactNameChanged");
                this.columnContactName.ExtendedProperties.Add("Generator_ChangingEventName", "ContactNameChanging");
                this.columnContactName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ContactName");
                this.columnContactName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ContactNameColumn");
                this.columnContactName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnContactName");
                this.columnContactName.ExtendedProperties.Add("Generator_DelegateName", "ContactNameChangeEventHandler");
                this.columnContactName.ExtendedProperties.Add("Generator_EventArgName", "ContactNameChangeEventArg");
                this.columnContactName.ExtendedProperties.Add("User_ColumnName", "ContactName");
                base.Columns.Add(this.columnContactName);
                this.columnContactTitle = new System.Data.DataColumn("ContactTitle", typeof(string), null, System.Data.MappingType.Element);
                this.columnContactTitle.ExtendedProperties.Add("Generator_ChangedEventName", "ContactTitleChanged");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ChangingEventName", "ContactTitleChanging");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ContactTitle");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ContactTitleColumn");
                this.columnContactTitle.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnContactTitle");
                this.columnContactTitle.ExtendedProperties.Add("Generator_DelegateName", "ContactTitleChangeEventHandler");
                this.columnContactTitle.ExtendedProperties.Add("Generator_EventArgName", "ContactTitleChangeEventArg");
                this.columnContactTitle.ExtendedProperties.Add("User_ColumnName", "ContactTitle");
                base.Columns.Add(this.columnContactTitle);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.columnAddress.ExtendedProperties.Add("Generator_ChangedEventName", "AddressChanged");
                this.columnAddress.ExtendedProperties.Add("Generator_ChangingEventName", "AddressChanging");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Address");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "AddressColumn");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAddress");
                this.columnAddress.ExtendedProperties.Add("Generator_DelegateName", "AddressChangeEventHandler");
                this.columnAddress.ExtendedProperties.Add("Generator_EventArgName", "AddressChangeEventArg");
                this.columnAddress.ExtendedProperties.Add("User_ColumnName", "Address");
                base.Columns.Add(this.columnAddress);
                this.columnCity = new System.Data.DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.columnCity.ExtendedProperties.Add("Generator_ChangedEventName", "CityChanged");
                this.columnCity.ExtendedProperties.Add("Generator_ChangingEventName", "CityChanging");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "City");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CityColumn");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCity");
                this.columnCity.ExtendedProperties.Add("Generator_DelegateName", "CityChangeEventHandler");
                this.columnCity.ExtendedProperties.Add("Generator_EventArgName", "CityChangeEventArg");
                this.columnCity.ExtendedProperties.Add("User_ColumnName", "City");
                base.Columns.Add(this.columnCity);
                this.columnRegion = new System.Data.DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.columnRegion.ExtendedProperties.Add("Generator_ChangedEventName", "RegionChanged");
                this.columnRegion.ExtendedProperties.Add("Generator_ChangingEventName", "RegionChanging");
                this.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Region");
                this.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn");
                this.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion");
                this.columnRegion.ExtendedProperties.Add("Generator_DelegateName", "RegionChangeEventHandler");
                this.columnRegion.ExtendedProperties.Add("Generator_EventArgName", "RegionChangeEventArg");
                this.columnRegion.ExtendedProperties.Add("User_ColumnName", "Region");
                base.Columns.Add(this.columnRegion);
                this.columnPostalCode = new System.Data.DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.columnPostalCode.ExtendedProperties.Add("Generator_ChangedEventName", "PostalCodeChanged");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ChangingEventName", "PostalCodeChanging");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PostalCode");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PostalCodeColumn");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPostalCode");
                this.columnPostalCode.ExtendedProperties.Add("Generator_DelegateName", "PostalCodeChangeEventHandler");
                this.columnPostalCode.ExtendedProperties.Add("Generator_EventArgName", "PostalCodeChangeEventArg");
                this.columnPostalCode.ExtendedProperties.Add("User_ColumnName", "PostalCode");
                base.Columns.Add(this.columnPostalCode);
                this.columnCountry = new System.Data.DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.columnCountry.ExtendedProperties.Add("Generator_ChangedEventName", "CountryChanged");
                this.columnCountry.ExtendedProperties.Add("Generator_ChangingEventName", "CountryChanging");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Country");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CountryColumn");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCountry");
                this.columnCountry.ExtendedProperties.Add("Generator_DelegateName", "CountryChangeEventHandler");
                this.columnCountry.ExtendedProperties.Add("Generator_EventArgName", "CountryChangeEventArg");
                this.columnCountry.ExtendedProperties.Add("User_ColumnName", "Country");
                base.Columns.Add(this.columnCountry);
                this.columnPhone = new System.Data.DataColumn("Phone", typeof(string), null, System.Data.MappingType.Element);
                this.columnPhone.ExtendedProperties.Add("Generator_ChangedEventName", "PhoneChanged");
                this.columnPhone.ExtendedProperties.Add("Generator_ChangingEventName", "PhoneChanging");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Phone");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PhoneColumn");
                this.columnPhone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPhone");
                this.columnPhone.ExtendedProperties.Add("Generator_DelegateName", "PhoneChangeEventHandler");
                this.columnPhone.ExtendedProperties.Add("Generator_EventArgName", "PhoneChangeEventArg");
                this.columnPhone.ExtendedProperties.Add("User_ColumnName", "Phone");
                base.Columns.Add(this.columnPhone);
                this.columnFax = new System.Data.DataColumn("Fax", typeof(string), null, System.Data.MappingType.Element);
                this.columnFax.ExtendedProperties.Add("Generator_ChangedEventName", "FaxChanged");
                this.columnFax.ExtendedProperties.Add("Generator_ChangingEventName", "FaxChanging");
                this.columnFax.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Fax");
                this.columnFax.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FaxColumn");
                this.columnFax.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFax");
                this.columnFax.ExtendedProperties.Add("Generator_DelegateName", "FaxChangeEventHandler");
                this.columnFax.ExtendedProperties.Add("Generator_EventArgName", "FaxChangeEventArg");
                this.columnFax.ExtendedProperties.Add("User_ColumnName", "Fax");
                base.Columns.Add(this.columnFax);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCustomerID}, true));
                this.columnCustomerID.AllowDBNull = false;
                this.columnCustomerID.Unique = true;
                this.columnCustomerID.MaxLength = 5;
                this.columnCompanyName.MaxLength = 40;
                this.columnContactName.MaxLength = 30;
                this.columnContactTitle.MaxLength = 30;
                this.columnAddress.MaxLength = 60;
                this.columnCity.MaxLength = 15;
                this.columnRegion.MaxLength = 15;
                this.columnPostalCode.MaxLength = 10;
                this.columnCountry.MaxLength = 15;
                this.columnPhone.MaxLength = 24;
                this.columnFax.MaxLength = 24;
                this.ExtendedProperties.Add("Generator_RowClassName", "CustomersRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "CustomersRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "CustomersRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "CustomersDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Customers");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableCustomers");
                this.ExtendedProperties.Add("User_TableName", "Customers");
            }
            
            public CustomersRow NewCustomersRow() {
                return ((CustomersRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CustomersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CustomersRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CustomersRowChanged != null)) {
                    this.CustomersRowChanged(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CustomersRowChanging != null)) {
                    this.CustomersRowChanging(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CustomersRowDeleted != null)) {
                    this.CustomersRowDeleted(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CustomersRowDeleting != null)) {
                    this.CustomersRowDeleting(this, new CustomersRowChangeEvent(((CustomersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCustomersRow(CustomersRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NorthwindDataSet ds = new NorthwindDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CustomersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void CustomerIDChangeEventHandler(CustomersDataTable sender, CustomerIDChangeEventArg e);
            
            public class CustomerIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CustomerIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CustomerIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void CompanyNameChangeEventHandler(CustomersDataTable sender, CompanyNameChangeEventArg e);
            
            public class CompanyNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CompanyNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CompanyNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ContactNameChangeEventHandler(CustomersDataTable sender, ContactNameChangeEventArg e);
            
            public class ContactNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ContactNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ContactNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ContactTitleChangeEventHandler(CustomersDataTable sender, ContactTitleChangeEventArg e);
            
            public class ContactTitleChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ContactTitleChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ContactTitleColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void AddressChangeEventHandler(CustomersDataTable sender, AddressChangeEventArg e);
            
            public class AddressChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public AddressChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn AddressColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void CityChangeEventHandler(CustomersDataTable sender, CityChangeEventArg e);
            
            public class CityChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CityChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CityColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void RegionChangeEventHandler(CustomersDataTable sender, RegionChangeEventArg e);
            
            public class RegionChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public RegionChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn RegionColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PostalCodeChangeEventHandler(CustomersDataTable sender, PostalCodeChangeEventArg e);
            
            public class PostalCodeChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PostalCodeChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PostalCodeColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void CountryChangeEventHandler(CustomersDataTable sender, CountryChangeEventArg e);
            
            public class CountryChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CountryChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CountryColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PhoneChangeEventHandler(CustomersDataTable sender, PhoneChangeEventArg e);
            
            public class PhoneChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PhoneChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PhoneColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void FaxChangeEventHandler(CustomersDataTable sender, FaxChangeEventArg e);
            
            public class FaxChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public FaxChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CustomersRow Row {
                    get {
                        return ((CustomersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn FaxColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class CategoriesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCategoryID;
            
            private System.Data.DataColumn columnCategoryName;
            
            private System.Data.DataColumn columnDescription;
            
            private System.Data.DataColumn columnPicture;
            
            private bool m_suspendValidation = false;
            
            public CategoriesDataTable() {
                this.TableName = "Categories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal CategoriesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected CategoriesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            internal System.Data.DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            internal System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal System.Data.DataColumn PictureColumn {
                get {
                    return this.columnPicture;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public CategoriesRow this[int index] {
                get {
                    return ((CategoriesRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event CategoryIDChangeEventHandler CategoryIDChanging;
            
            public event CategoryIDChangeEventHandler CategoryIDChanged;
            
            public event CategoryNameChangeEventHandler CategoryNameChanging;
            
            public event CategoryNameChangeEventHandler CategoryNameChanged;
            
            public event DescriptionChangeEventHandler DescriptionChanging;
            
            public event DescriptionChangeEventHandler DescriptionChanged;
            
            public event PictureChangeEventHandler PictureChanging;
            
            public event PictureChangeEventHandler PictureChanged;
            
            public event CategoriesRowChangeEventHandler CategoriesRowChanged;
            
            public event CategoriesRowChangeEventHandler CategoriesRowChanging;
            
            public event CategoriesRowChangeEventHandler CategoriesRowDeleted;
            
            public event CategoriesRowChangeEventHandler CategoriesRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "CategoryID")) {
                    if ((this.CategoryIDChanging != null)) {
                        this.CategoryIDChanging(this, new CategoryIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CategoryName")) {
                        if ((this.CategoryNameChanging != null)) {
                            this.CategoryNameChanging(this, new CategoryNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "Description")) {
                            if ((this.DescriptionChanging != null)) {
                                this.DescriptionChanging(this, new DescriptionChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Picture")) {
                                if ((this.PictureChanging != null)) {
                                    this.PictureChanging(this, new PictureChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "CategoryID")) {
                    if ((this.CategoryIDChanged != null)) {
                        this.CategoryIDChanged(this, new CategoryIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CategoryName")) {
                        if ((this.CategoryNameChanged != null)) {
                            this.CategoryNameChanged(this, new CategoryNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "Description")) {
                            if ((this.DescriptionChanged != null)) {
                                this.DescriptionChanged(this, new DescriptionChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Picture")) {
                                if ((this.PictureChanged != null)) {
                                    this.PictureChanged(this, new PictureChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddCategoriesRow(CategoriesRow row) {
                this.Rows.Add(row);
            }
            
            public CategoriesRow AddCategoriesRow(string CategoryName, string Description, byte[] Picture) {
                CategoriesRow rowCategoriesRow = ((CategoriesRow)(this.NewRow()));
                rowCategoriesRow.ItemArray = new object[] {
                        null,
                        CategoryName,
                        Description,
                        Picture};
                this.Rows.Add(rowCategoriesRow);
                return rowCategoriesRow;
            }
            
            public CategoriesRow FindByCategoryID(int CategoryID) {
                return ((CategoriesRow)(this.Rows.Find(new object[] {
                            CategoryID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CategoriesDataTable cln = ((CategoriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CategoriesDataTable();
            }
            
            internal void InitVars() {
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnCategoryName = base.Columns["CategoryName"];
                this.columnDescription = base.Columns["Description"];
                this.columnPicture = base.Columns["Picture"];
            }
            
            private void InitClass() {
                this.columnCategoryID = new System.Data.DataColumn("CategoryID", typeof(int), null, System.Data.MappingType.Element);
                this.columnCategoryID.ExtendedProperties.Add("Generator_ChangedEventName", "CategoryIDChanged");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ChangingEventName", "CategoryIDChanging");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CategoryID");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CategoryIDColumn");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCategoryID");
                this.columnCategoryID.ExtendedProperties.Add("Generator_DelegateName", "CategoryIDChangeEventHandler");
                this.columnCategoryID.ExtendedProperties.Add("Generator_EventArgName", "CategoryIDChangeEventArg");
                this.columnCategoryID.ExtendedProperties.Add("User_ColumnName", "CategoryID");
                base.Columns.Add(this.columnCategoryID);
                this.columnCategoryName = new System.Data.DataColumn("CategoryName", typeof(string), null, System.Data.MappingType.Element);
                this.columnCategoryName.ExtendedProperties.Add("Generator_ChangedEventName", "CategoryNameChanged");
                this.columnCategoryName.ExtendedProperties.Add("Generator_ChangingEventName", "CategoryNameChanging");
                this.columnCategoryName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CategoryName");
                this.columnCategoryName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CategoryNameColumn");
                this.columnCategoryName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCategoryName");
                this.columnCategoryName.ExtendedProperties.Add("Generator_DelegateName", "CategoryNameChangeEventHandler");
                this.columnCategoryName.ExtendedProperties.Add("Generator_EventArgName", "CategoryNameChangeEventArg");
                this.columnCategoryName.ExtendedProperties.Add("User_ColumnName", "CategoryName");
                base.Columns.Add(this.columnCategoryName);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.columnDescription.ExtendedProperties.Add("Generator_ChangedEventName", "DescriptionChanged");
                this.columnDescription.ExtendedProperties.Add("Generator_ChangingEventName", "DescriptionChanging");
                this.columnDescription.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Description");
                this.columnDescription.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DescriptionColumn");
                this.columnDescription.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDescription");
                this.columnDescription.ExtendedProperties.Add("Generator_DelegateName", "DescriptionChangeEventHandler");
                this.columnDescription.ExtendedProperties.Add("Generator_EventArgName", "DescriptionChangeEventArg");
                this.columnDescription.ExtendedProperties.Add("User_ColumnName", "Description");
                base.Columns.Add(this.columnDescription);
                this.columnPicture = new System.Data.DataColumn("Picture", typeof(byte[]), null, System.Data.MappingType.Element);
                this.columnPicture.ExtendedProperties.Add("Generator_ChangedEventName", "PictureChanged");
                this.columnPicture.ExtendedProperties.Add("Generator_ChangingEventName", "PictureChanging");
                this.columnPicture.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Picture");
                this.columnPicture.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PictureColumn");
                this.columnPicture.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPicture");
                this.columnPicture.ExtendedProperties.Add("Generator_DelegateName", "PictureChangeEventHandler");
                this.columnPicture.ExtendedProperties.Add("Generator_EventArgName", "PictureChangeEventArg");
                this.columnPicture.ExtendedProperties.Add("User_ColumnName", "Picture");
                base.Columns.Add(this.columnPicture);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCategoryID}, true));
                this.columnCategoryID.AutoIncrement = true;
                this.columnCategoryID.AllowDBNull = false;
                this.columnCategoryID.Unique = true;
                this.columnCategoryName.MaxLength = 15;
                this.columnDescription.MaxLength = 536870910;
                this.ExtendedProperties.Add("Generator_RowClassName", "CategoriesRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "CategoriesRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "CategoriesRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "CategoriesDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Categories");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableCategories");
                this.ExtendedProperties.Add("User_TableName", "Categories");
            }
            
            public CategoriesRow NewCategoriesRow() {
                return ((CategoriesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CategoriesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CategoriesRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoriesRowChanged != null)) {
                    this.CategoriesRowChanged(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoriesRowChanging != null)) {
                    this.CategoriesRowChanging(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoriesRowDeleted != null)) {
                    this.CategoriesRowDeleted(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoriesRowDeleting != null)) {
                    this.CategoriesRowDeleting(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCategoriesRow(CategoriesRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NorthwindDataSet ds = new NorthwindDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void CategoryIDChangeEventHandler(CategoriesDataTable sender, CategoryIDChangeEventArg e);
            
            public class CategoryIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CategoryIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CategoriesRow Row {
                    get {
                        return ((CategoriesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CategoryIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void CategoryNameChangeEventHandler(CategoriesDataTable sender, CategoryNameChangeEventArg e);
            
            public class CategoryNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CategoryNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CategoriesRow Row {
                    get {
                        return ((CategoriesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CategoryNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void DescriptionChangeEventHandler(CategoriesDataTable sender, DescriptionChangeEventArg e);
            
            public class DescriptionChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public DescriptionChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CategoriesRow Row {
                    get {
                        return ((CategoriesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn DescriptionColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PictureChangeEventHandler(CategoriesDataTable sender, PictureChangeEventArg e);
            
            public class PictureChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PictureChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CategoriesRow Row {
                    get {
                        return ((CategoriesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PictureColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public byte[] ProposedValue {
                    get {
                        return ((byte[])(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((byte[])(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class Order_DetailsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrderID;
            
            private System.Data.DataColumn columnProductID;
            
            private System.Data.DataColumn columnUnitPrice;
            
            private System.Data.DataColumn columnQuantity;
            
            private System.Data.DataColumn columnDiscount;
            
            private bool m_suspendValidation = false;
            
            public Order_DetailsDataTable() {
                this.TableName = "Order Details";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal Order_DetailsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected Order_DetailsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn OrderIDColumn {
                get {
                    return this.columnOrderID;
                }
            }
            
            internal System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            internal System.Data.DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            internal System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            internal System.Data.DataColumn DiscountColumn {
                get {
                    return this.columnDiscount;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public Order_DetailsRow this[int index] {
                get {
                    return ((Order_DetailsRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event OrderIDChangeEventHandler OrderIDChanging;
            
            public event OrderIDChangeEventHandler OrderIDChanged;
            
            public event ProductIDChangeEventHandler ProductIDChanging;
            
            public event ProductIDChangeEventHandler ProductIDChanged;
            
            public event UnitPriceChangeEventHandler UnitPriceChanging;
            
            public event UnitPriceChangeEventHandler UnitPriceChanged;
            
            public event QuantityChangeEventHandler QuantityChanging;
            
            public event QuantityChangeEventHandler QuantityChanged;
            
            public event DiscountChangeEventHandler DiscountChanging;
            
            public event DiscountChangeEventHandler DiscountChanged;
            
            public event Order_DetailsRowChangeEventHandler Order_DetailsRowChanged;
            
            public event Order_DetailsRowChangeEventHandler Order_DetailsRowChanging;
            
            public event Order_DetailsRowChangeEventHandler Order_DetailsRowDeleted;
            
            public event Order_DetailsRowChangeEventHandler Order_DetailsRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "OrderID")) {
                    if ((this.OrderIDChanging != null)) {
                        this.OrderIDChanging(this, new OrderIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "ProductID")) {
                        if ((this.ProductIDChanging != null)) {
                            this.ProductIDChanging(this, new ProductIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "UnitPrice")) {
                            if ((this.UnitPriceChanging != null)) {
                                this.UnitPriceChanging(this, new UnitPriceChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Quantity")) {
                                if ((this.QuantityChanging != null)) {
                                    this.QuantityChanging(this, new QuantityChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Discount")) {
                                    if ((this.DiscountChanging != null)) {
                                        this.DiscountChanging(this, new DiscountChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "OrderID")) {
                    if ((this.OrderIDChanged != null)) {
                        this.OrderIDChanged(this, new OrderIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "ProductID")) {
                        if ((this.ProductIDChanged != null)) {
                            this.ProductIDChanged(this, new ProductIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "UnitPrice")) {
                            if ((this.UnitPriceChanged != null)) {
                                this.UnitPriceChanged(this, new UnitPriceChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Quantity")) {
                                if ((this.QuantityChanged != null)) {
                                    this.QuantityChanged(this, new QuantityChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "Discount")) {
                                    if ((this.DiscountChanged != null)) {
                                        this.DiscountChanged(this, new DiscountChangeEventArg(e));
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddOrder_DetailsRow(Order_DetailsRow row) {
                this.Rows.Add(row);
            }
            
            public Order_DetailsRow AddOrder_DetailsRow(OrdersRow parentOrdersRowByOrdersOrder_Details, ProductsRow parentProductsRowByProductsOrder_Details, decimal UnitPrice, short Quantity, float Discount) {
                Order_DetailsRow rowOrder_DetailsRow = ((Order_DetailsRow)(this.NewRow()));
                rowOrder_DetailsRow.ItemArray = new object[] {
                        parentOrdersRowByOrdersOrder_Details[0],
                        parentProductsRowByProductsOrder_Details[0],
                        UnitPrice,
                        Quantity,
                        Discount};
                this.Rows.Add(rowOrder_DetailsRow);
                return rowOrder_DetailsRow;
            }
            
            public Order_DetailsRow FindByOrderIDProductID(int OrderID, int ProductID) {
                return ((Order_DetailsRow)(this.Rows.Find(new object[] {
                            OrderID,
                            ProductID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                Order_DetailsDataTable cln = ((Order_DetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new Order_DetailsDataTable();
            }
            
            internal void InitVars() {
                this.columnOrderID = base.Columns["OrderID"];
                this.columnProductID = base.Columns["ProductID"];
                this.columnUnitPrice = base.Columns["UnitPrice"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnDiscount = base.Columns["Discount"];
            }
            
            private void InitClass() {
                this.columnOrderID = new System.Data.DataColumn("OrderID", typeof(int), null, System.Data.MappingType.Element);
                this.columnOrderID.ExtendedProperties.Add("Generator_ChangedEventName", "OrderIDChanged");
                this.columnOrderID.ExtendedProperties.Add("Generator_ChangingEventName", "OrderIDChanging");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "OrderID");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OrderIDColumn");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOrderID");
                this.columnOrderID.ExtendedProperties.Add("Generator_DelegateName", "OrderIDChangeEventHandler");
                this.columnOrderID.ExtendedProperties.Add("Generator_EventArgName", "OrderIDChangeEventArg");
                this.columnOrderID.ExtendedProperties.Add("User_ColumnName", "OrderID");
                base.Columns.Add(this.columnOrderID);
                this.columnProductID = new System.Data.DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.columnProductID.ExtendedProperties.Add("Generator_ChangedEventName", "ProductIDChanged");
                this.columnProductID.ExtendedProperties.Add("Generator_ChangingEventName", "ProductIDChanging");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ProductID");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ProductIDColumn");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnProductID");
                this.columnProductID.ExtendedProperties.Add("Generator_DelegateName", "ProductIDChangeEventHandler");
                this.columnProductID.ExtendedProperties.Add("Generator_EventArgName", "ProductIDChangeEventArg");
                this.columnProductID.ExtendedProperties.Add("User_ColumnName", "ProductID");
                base.Columns.Add(this.columnProductID);
                this.columnUnitPrice = new System.Data.DataColumn("UnitPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.columnUnitPrice.ExtendedProperties.Add("Generator_ChangedEventName", "UnitPriceChanged");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_ChangingEventName", "UnitPriceChanging");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UnitPrice");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UnitPriceColumn");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUnitPrice");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_DelegateName", "UnitPriceChangeEventHandler");
                this.columnUnitPrice.ExtendedProperties.Add("Generator_EventArgName", "UnitPriceChangeEventArg");
                this.columnUnitPrice.ExtendedProperties.Add("User_ColumnName", "UnitPrice");
                base.Columns.Add(this.columnUnitPrice);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(short), null, System.Data.MappingType.Element);
                this.columnQuantity.ExtendedProperties.Add("Generator_ChangedEventName", "QuantityChanged");
                this.columnQuantity.ExtendedProperties.Add("Generator_ChangingEventName", "QuantityChanging");
                this.columnQuantity.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Quantity");
                this.columnQuantity.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "QuantityColumn");
                this.columnQuantity.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnQuantity");
                this.columnQuantity.ExtendedProperties.Add("Generator_DelegateName", "QuantityChangeEventHandler");
                this.columnQuantity.ExtendedProperties.Add("Generator_EventArgName", "QuantityChangeEventArg");
                this.columnQuantity.ExtendedProperties.Add("User_ColumnName", "Quantity");
                base.Columns.Add(this.columnQuantity);
                this.columnDiscount = new System.Data.DataColumn("Discount", typeof(float), null, System.Data.MappingType.Element);
                this.columnDiscount.ExtendedProperties.Add("Generator_ChangedEventName", "DiscountChanged");
                this.columnDiscount.ExtendedProperties.Add("Generator_ChangingEventName", "DiscountChanging");
                this.columnDiscount.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Discount");
                this.columnDiscount.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DiscountColumn");
                this.columnDiscount.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDiscount");
                this.columnDiscount.ExtendedProperties.Add("Generator_DelegateName", "DiscountChangeEventHandler");
                this.columnDiscount.ExtendedProperties.Add("Generator_EventArgName", "DiscountChangeEventArg");
                this.columnDiscount.ExtendedProperties.Add("User_ColumnName", "Discount");
                base.Columns.Add(this.columnDiscount);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnOrderID,
                                this.columnProductID}, true));
                this.columnOrderID.AllowDBNull = false;
                this.columnProductID.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_RowClassName", "Order_DetailsRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "Order_DetailsRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "Order_DetailsRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "Order_DetailsDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Order_Details");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableOrder_Details");
                this.ExtendedProperties.Add("User_TableName", "Order Details");
            }
            
            public Order_DetailsRow NewOrder_DetailsRow() {
                return ((Order_DetailsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new Order_DetailsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Order_DetailsRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Order_DetailsRowChanged != null)) {
                    this.Order_DetailsRowChanged(this, new Order_DetailsRowChangeEvent(((Order_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Order_DetailsRowChanging != null)) {
                    this.Order_DetailsRowChanging(this, new Order_DetailsRowChangeEvent(((Order_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Order_DetailsRowDeleted != null)) {
                    this.Order_DetailsRowDeleted(this, new Order_DetailsRowChangeEvent(((Order_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Order_DetailsRowDeleting != null)) {
                    this.Order_DetailsRowDeleting(this, new Order_DetailsRowChangeEvent(((Order_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrder_DetailsRow(Order_DetailsRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NorthwindDataSet ds = new NorthwindDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Order_DetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void OrderIDChangeEventHandler(Order_DetailsDataTable sender, OrderIDChangeEventArg e);
            
            public class OrderIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public OrderIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public Order_DetailsRow Row {
                    get {
                        return ((Order_DetailsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn OrderIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void ProductIDChangeEventHandler(Order_DetailsDataTable sender, ProductIDChangeEventArg e);
            
            public class ProductIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ProductIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public Order_DetailsRow Row {
                    get {
                        return ((Order_DetailsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ProductIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void UnitPriceChangeEventHandler(Order_DetailsDataTable sender, UnitPriceChangeEventArg e);
            
            public class UnitPriceChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UnitPriceChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public Order_DetailsRow Row {
                    get {
                        return ((Order_DetailsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UnitPriceColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public decimal ProposedValue {
                    get {
                        return ((decimal)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((decimal)(value));
                    }
                }
            }
            
            public delegate void QuantityChangeEventHandler(Order_DetailsDataTable sender, QuantityChangeEventArg e);
            
            public class QuantityChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public QuantityChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public Order_DetailsRow Row {
                    get {
                        return ((Order_DetailsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn QuantityColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public short ProposedValue {
                    get {
                        return ((short)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((short)(value));
                    }
                }
            }
            
            public delegate void DiscountChangeEventHandler(Order_DetailsDataTable sender, DiscountChangeEventArg e);
            
            public class DiscountChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public DiscountChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public Order_DetailsRow Row {
                    get {
                        return ((Order_DetailsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn DiscountColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public float ProposedValue {
                    get {
                        return ((float)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((float)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class EmployeesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEmployeeID;
            
            private System.Data.DataColumn columnLastName;
            
            private System.Data.DataColumn columnFirstName;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnTitleOfCourtesy;
            
            private System.Data.DataColumn columnBirthDate;
            
            private System.Data.DataColumn columnHireDate;
            
            private System.Data.DataColumn columnAddress;
            
            private System.Data.DataColumn columnCity;
            
            private System.Data.DataColumn columnRegion;
            
            private System.Data.DataColumn columnPostalCode;
            
            private System.Data.DataColumn columnCountry;
            
            private System.Data.DataColumn columnHomePhone;
            
            private System.Data.DataColumn columnExtension;
            
            private System.Data.DataColumn columnPhoto;
            
            private System.Data.DataColumn columnNotes;
            
            private System.Data.DataColumn columnReportsTo;
            
            private bool m_suspendValidation = false;
            
            public EmployeesDataTable() {
                this.TableName = "Employees";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal EmployeesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected EmployeesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            internal System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            internal System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            internal System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            internal System.Data.DataColumn TitleOfCourtesyColumn {
                get {
                    return this.columnTitleOfCourtesy;
                }
            }
            
            internal System.Data.DataColumn BirthDateColumn {
                get {
                    return this.columnBirthDate;
                }
            }
            
            internal System.Data.DataColumn HireDateColumn {
                get {
                    return this.columnHireDate;
                }
            }
            
            internal System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            internal System.Data.DataColumn CityColumn {
                get {
                    return this.columnCity;
                }
            }
            
            internal System.Data.DataColumn RegionColumn {
                get {
                    return this.columnRegion;
                }
            }
            
            internal System.Data.DataColumn PostalCodeColumn {
                get {
                    return this.columnPostalCode;
                }
            }
            
            internal System.Data.DataColumn CountryColumn {
                get {
                    return this.columnCountry;
                }
            }
            
            internal System.Data.DataColumn HomePhoneColumn {
                get {
                    return this.columnHomePhone;
                }
            }
            
            internal System.Data.DataColumn ExtensionColumn {
                get {
                    return this.columnExtension;
                }
            }
            
            internal System.Data.DataColumn PhotoColumn {
                get {
                    return this.columnPhoto;
                }
            }
            
            internal System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            internal System.Data.DataColumn ReportsToColumn {
                get {
                    return this.columnReportsTo;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public EmployeesRow this[int index] {
                get {
                    return ((EmployeesRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event EmployeeIDChangeEventHandler EmployeeIDChanging;
            
            public event EmployeeIDChangeEventHandler EmployeeIDChanged;
            
            public event LastNameChangeEventHandler LastNameChanging;
            
            public event LastNameChangeEventHandler LastNameChanged;
            
            public event FirstNameChangeEventHandler FirstNameChanging;
            
            public event FirstNameChangeEventHandler FirstNameChanged;
            
            public event TitleChangeEventHandler TitleChanging;
            
            public event TitleChangeEventHandler TitleChanged;
            
            public event TitleOfCourtesyChangeEventHandler TitleOfCourtesyChanging;
            
            public event TitleOfCourtesyChangeEventHandler TitleOfCourtesyChanged;
            
            public event BirthDateChangeEventHandler BirthDateChanging;
            
            public event BirthDateChangeEventHandler BirthDateChanged;
            
            public event HireDateChangeEventHandler HireDateChanging;
            
            public event HireDateChangeEventHandler HireDateChanged;
            
            public event AddressChangeEventHandler AddressChanging;
            
            public event AddressChangeEventHandler AddressChanged;
            
            public event CityChangeEventHandler CityChanging;
            
            public event CityChangeEventHandler CityChanged;
            
            public event RegionChangeEventHandler RegionChanging;
            
            public event RegionChangeEventHandler RegionChanged;
            
            public event PostalCodeChangeEventHandler PostalCodeChanging;
            
            public event PostalCodeChangeEventHandler PostalCodeChanged;
            
            public event CountryChangeEventHandler CountryChanging;
            
            public event CountryChangeEventHandler CountryChanged;
            
            public event HomePhoneChangeEventHandler HomePhoneChanging;
            
            public event HomePhoneChangeEventHandler HomePhoneChanged;
            
            public event ExtensionChangeEventHandler ExtensionChanging;
            
            public event ExtensionChangeEventHandler ExtensionChanged;
            
            public event PhotoChangeEventHandler PhotoChanging;
            
            public event PhotoChangeEventHandler PhotoChanged;
            
            public event NotesChangeEventHandler NotesChanging;
            
            public event NotesChangeEventHandler NotesChanged;
            
            public event ReportsToChangeEventHandler ReportsToChanging;
            
            public event ReportsToChangeEventHandler ReportsToChanged;
            
            public event EmployeesRowChangeEventHandler EmployeesRowChanged;
            
            public event EmployeesRowChangeEventHandler EmployeesRowChanging;
            
            public event EmployeesRowChangeEventHandler EmployeesRowDeleted;
            
            public event EmployeesRowChangeEventHandler EmployeesRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "EmployeeID")) {
                    if ((this.EmployeeIDChanging != null)) {
                        this.EmployeeIDChanging(this, new EmployeeIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "LastName")) {
                        if ((this.LastNameChanging != null)) {
                            this.LastNameChanging(this, new LastNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "FirstName")) {
                            if ((this.FirstNameChanging != null)) {
                                this.FirstNameChanging(this, new FirstNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Title")) {
                                if ((this.TitleChanging != null)) {
                                    this.TitleChanging(this, new TitleChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "TitleOfCourtesy")) {
                                    if ((this.TitleOfCourtesyChanging != null)) {
                                        this.TitleOfCourtesyChanging(this, new TitleOfCourtesyChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "BirthDate")) {
                                        if ((this.BirthDateChanging != null)) {
                                            this.BirthDateChanging(this, new BirthDateChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "HireDate")) {
                                            if ((this.HireDateChanging != null)) {
                                                this.HireDateChanging(this, new HireDateChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "Address")) {
                                                if ((this.AddressChanging != null)) {
                                                    this.AddressChanging(this, new AddressChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "City")) {
                                                    if ((this.CityChanging != null)) {
                                                        this.CityChanging(this, new CityChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "Region")) {
                                                        if ((this.RegionChanging != null)) {
                                                            this.RegionChanging(this, new RegionChangeEventArg(e));
                                                        }
                                                    }
                                                    else {
                                                        if ((e.Column.ColumnName == "PostalCode")) {
                                                            if ((this.PostalCodeChanging != null)) {
                                                                this.PostalCodeChanging(this, new PostalCodeChangeEventArg(e));
                                                            }
                                                        }
                                                        else {
                                                            if ((e.Column.ColumnName == "Country")) {
                                                                if ((this.CountryChanging != null)) {
                                                                    this.CountryChanging(this, new CountryChangeEventArg(e));
                                                                }
                                                            }
                                                            else {
                                                                if ((e.Column.ColumnName == "HomePhone")) {
                                                                    if ((this.HomePhoneChanging != null)) {
                                                                        this.HomePhoneChanging(this, new HomePhoneChangeEventArg(e));
                                                                    }
                                                                }
                                                                else {
                                                                    if ((e.Column.ColumnName == "Extension")) {
                                                                        if ((this.ExtensionChanging != null)) {
                                                                            this.ExtensionChanging(this, new ExtensionChangeEventArg(e));
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ((e.Column.ColumnName == "Photo")) {
                                                                            if ((this.PhotoChanging != null)) {
                                                                                this.PhotoChanging(this, new PhotoChangeEventArg(e));
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ((e.Column.ColumnName == "Notes")) {
                                                                                if ((this.NotesChanging != null)) {
                                                                                    this.NotesChanging(this, new NotesChangeEventArg(e));
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ((e.Column.ColumnName == "ReportsTo")) {
                                                                                    if ((this.ReportsToChanging != null)) {
                                                                                        this.ReportsToChanging(this, new ReportsToChangeEventArg(e));
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "EmployeeID")) {
                    if ((this.EmployeeIDChanged != null)) {
                        this.EmployeeIDChanged(this, new EmployeeIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "LastName")) {
                        if ((this.LastNameChanged != null)) {
                            this.LastNameChanged(this, new LastNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "FirstName")) {
                            if ((this.FirstNameChanged != null)) {
                                this.FirstNameChanged(this, new FirstNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "Title")) {
                                if ((this.TitleChanged != null)) {
                                    this.TitleChanged(this, new TitleChangeEventArg(e));
                                }
                            }
                            else {
                                if ((e.Column.ColumnName == "TitleOfCourtesy")) {
                                    if ((this.TitleOfCourtesyChanged != null)) {
                                        this.TitleOfCourtesyChanged(this, new TitleOfCourtesyChangeEventArg(e));
                                    }
                                }
                                else {
                                    if ((e.Column.ColumnName == "BirthDate")) {
                                        if ((this.BirthDateChanged != null)) {
                                            this.BirthDateChanged(this, new BirthDateChangeEventArg(e));
                                        }
                                    }
                                    else {
                                        if ((e.Column.ColumnName == "HireDate")) {
                                            if ((this.HireDateChanged != null)) {
                                                this.HireDateChanged(this, new HireDateChangeEventArg(e));
                                            }
                                        }
                                        else {
                                            if ((e.Column.ColumnName == "Address")) {
                                                if ((this.AddressChanged != null)) {
                                                    this.AddressChanged(this, new AddressChangeEventArg(e));
                                                }
                                            }
                                            else {
                                                if ((e.Column.ColumnName == "City")) {
                                                    if ((this.CityChanged != null)) {
                                                        this.CityChanged(this, new CityChangeEventArg(e));
                                                    }
                                                }
                                                else {
                                                    if ((e.Column.ColumnName == "Region")) {
                                                        if ((this.RegionChanged != null)) {
                                                            this.RegionChanged(this, new RegionChangeEventArg(e));
                                                        }
                                                    }
                                                    else {
                                                        if ((e.Column.ColumnName == "PostalCode")) {
                                                            if ((this.PostalCodeChanged != null)) {
                                                                this.PostalCodeChanged(this, new PostalCodeChangeEventArg(e));
                                                            }
                                                        }
                                                        else {
                                                            if ((e.Column.ColumnName == "Country")) {
                                                                if ((this.CountryChanged != null)) {
                                                                    this.CountryChanged(this, new CountryChangeEventArg(e));
                                                                }
                                                            }
                                                            else {
                                                                if ((e.Column.ColumnName == "HomePhone")) {
                                                                    if ((this.HomePhoneChanged != null)) {
                                                                        this.HomePhoneChanged(this, new HomePhoneChangeEventArg(e));
                                                                    }
                                                                }
                                                                else {
                                                                    if ((e.Column.ColumnName == "Extension")) {
                                                                        if ((this.ExtensionChanged != null)) {
                                                                            this.ExtensionChanged(this, new ExtensionChangeEventArg(e));
                                                                        }
                                                                    }
                                                                    else {
                                                                        if ((e.Column.ColumnName == "Photo")) {
                                                                            if ((this.PhotoChanged != null)) {
                                                                                this.PhotoChanged(this, new PhotoChangeEventArg(e));
                                                                            }
                                                                        }
                                                                        else {
                                                                            if ((e.Column.ColumnName == "Notes")) {
                                                                                if ((this.NotesChanged != null)) {
                                                                                    this.NotesChanged(this, new NotesChangeEventArg(e));
                                                                                }
                                                                            }
                                                                            else {
                                                                                if ((e.Column.ColumnName == "ReportsTo")) {
                                                                                    if ((this.ReportsToChanged != null)) {
                                                                                        this.ReportsToChanged(this, new ReportsToChangeEventArg(e));
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddEmployeesRow(EmployeesRow row) {
                this.Rows.Add(row);
            }
            
            public EmployeesRow AddEmployeesRow(
                        string LastName, 
                        string FirstName, 
                        string Title, 
                        string TitleOfCourtesy, 
                        System.DateTime BirthDate, 
                        System.DateTime HireDate, 
                        string Address, 
                        string City, 
                        string Region, 
                        string PostalCode, 
                        string Country, 
                        string HomePhone, 
                        string Extension, 
                        byte[] Photo, 
                        string Notes, 
                        int ReportsTo) {
                EmployeesRow rowEmployeesRow = ((EmployeesRow)(this.NewRow()));
                rowEmployeesRow.ItemArray = new object[] {
                        null,
                        LastName,
                        FirstName,
                        Title,
                        TitleOfCourtesy,
                        BirthDate,
                        HireDate,
                        Address,
                        City,
                        Region,
                        PostalCode,
                        Country,
                        HomePhone,
                        Extension,
                        Photo,
                        Notes,
                        ReportsTo};
                this.Rows.Add(rowEmployeesRow);
                return rowEmployeesRow;
            }
            
            public EmployeesRow FindByEmployeeID(int EmployeeID) {
                return ((EmployeesRow)(this.Rows.Find(new object[] {
                            EmployeeID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                EmployeesDataTable cln = ((EmployeesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new EmployeesDataTable();
            }
            
            internal void InitVars() {
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnLastName = base.Columns["LastName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnTitle = base.Columns["Title"];
                this.columnTitleOfCourtesy = base.Columns["TitleOfCourtesy"];
                this.columnBirthDate = base.Columns["BirthDate"];
                this.columnHireDate = base.Columns["HireDate"];
                this.columnAddress = base.Columns["Address"];
                this.columnCity = base.Columns["City"];
                this.columnRegion = base.Columns["Region"];
                this.columnPostalCode = base.Columns["PostalCode"];
                this.columnCountry = base.Columns["Country"];
                this.columnHomePhone = base.Columns["HomePhone"];
                this.columnExtension = base.Columns["Extension"];
                this.columnPhoto = base.Columns["Photo"];
                this.columnNotes = base.Columns["Notes"];
                this.columnReportsTo = base.Columns["ReportsTo"];
            }
            
            private void InitClass() {
                this.columnEmployeeID = new System.Data.DataColumn("EmployeeID", typeof(int), null, System.Data.MappingType.Element);
                this.columnEmployeeID.ExtendedProperties.Add("Generator_ChangedEventName", "EmployeeIDChanged");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_ChangingEventName", "EmployeeIDChanging");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "EmployeeID");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "EmployeeIDColumn");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnEmployeeID");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_DelegateName", "EmployeeIDChangeEventHandler");
                this.columnEmployeeID.ExtendedProperties.Add("Generator_EventArgName", "EmployeeIDChangeEventArg");
                this.columnEmployeeID.ExtendedProperties.Add("User_ColumnName", "EmployeeID");
                base.Columns.Add(this.columnEmployeeID);
                this.columnLastName = new System.Data.DataColumn("LastName", typeof(string), null, System.Data.MappingType.Element);
                this.columnLastName.ExtendedProperties.Add("Generator_ChangedEventName", "LastNameChanged");
                this.columnLastName.ExtendedProperties.Add("Generator_ChangingEventName", "LastNameChanging");
                this.columnLastName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "LastName");
                this.columnLastName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "LastNameColumn");
                this.columnLastName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnLastName");
                this.columnLastName.ExtendedProperties.Add("Generator_DelegateName", "LastNameChangeEventHandler");
                this.columnLastName.ExtendedProperties.Add("Generator_EventArgName", "LastNameChangeEventArg");
                this.columnLastName.ExtendedProperties.Add("User_ColumnName", "LastName");
                base.Columns.Add(this.columnLastName);
                this.columnFirstName = new System.Data.DataColumn("FirstName", typeof(string), null, System.Data.MappingType.Element);
                this.columnFirstName.ExtendedProperties.Add("Generator_ChangedEventName", "FirstNameChanged");
                this.columnFirstName.ExtendedProperties.Add("Generator_ChangingEventName", "FirstNameChanging");
                this.columnFirstName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "FirstName");
                this.columnFirstName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "FirstNameColumn");
                this.columnFirstName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnFirstName");
                this.columnFirstName.ExtendedProperties.Add("Generator_DelegateName", "FirstNameChangeEventHandler");
                this.columnFirstName.ExtendedProperties.Add("Generator_EventArgName", "FirstNameChangeEventArg");
                this.columnFirstName.ExtendedProperties.Add("User_ColumnName", "FirstName");
                base.Columns.Add(this.columnFirstName);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                this.columnTitle.ExtendedProperties.Add("Generator_ChangedEventName", "TitleChanged");
                this.columnTitle.ExtendedProperties.Add("Generator_ChangingEventName", "TitleChanging");
                this.columnTitle.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Title");
                this.columnTitle.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "TitleColumn");
                this.columnTitle.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnTitle");
                this.columnTitle.ExtendedProperties.Add("Generator_DelegateName", "TitleChangeEventHandler");
                this.columnTitle.ExtendedProperties.Add("Generator_EventArgName", "TitleChangeEventArg");
                this.columnTitle.ExtendedProperties.Add("User_ColumnName", "Title");
                base.Columns.Add(this.columnTitle);
                this.columnTitleOfCourtesy = new System.Data.DataColumn("TitleOfCourtesy", typeof(string), null, System.Data.MappingType.Element);
                this.columnTitleOfCourtesy.ExtendedProperties.Add("Generator_ChangedEventName", "TitleOfCourtesyChanged");
                this.columnTitleOfCourtesy.ExtendedProperties.Add("Generator_ChangingEventName", "TitleOfCourtesyChanging");
                this.columnTitleOfCourtesy.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "TitleOfCourtesy");
                this.columnTitleOfCourtesy.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "TitleOfCourtesyColumn");
                this.columnTitleOfCourtesy.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnTitleOfCourtesy");
                this.columnTitleOfCourtesy.ExtendedProperties.Add("Generator_DelegateName", "TitleOfCourtesyChangeEventHandler");
                this.columnTitleOfCourtesy.ExtendedProperties.Add("Generator_EventArgName", "TitleOfCourtesyChangeEventArg");
                this.columnTitleOfCourtesy.ExtendedProperties.Add("User_ColumnName", "TitleOfCourtesy");
                base.Columns.Add(this.columnTitleOfCourtesy);
                this.columnBirthDate = new System.Data.DataColumn("BirthDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnBirthDate.ExtendedProperties.Add("Generator_ChangedEventName", "BirthDateChanged");
                this.columnBirthDate.ExtendedProperties.Add("Generator_ChangingEventName", "BirthDateChanging");
                this.columnBirthDate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "BirthDate");
                this.columnBirthDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "BirthDateColumn");
                this.columnBirthDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnBirthDate");
                this.columnBirthDate.ExtendedProperties.Add("Generator_DelegateName", "BirthDateChangeEventHandler");
                this.columnBirthDate.ExtendedProperties.Add("Generator_EventArgName", "BirthDateChangeEventArg");
                this.columnBirthDate.ExtendedProperties.Add("User_ColumnName", "BirthDate");
                base.Columns.Add(this.columnBirthDate);
                this.columnHireDate = new System.Data.DataColumn("HireDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.columnHireDate.ExtendedProperties.Add("Generator_ChangedEventName", "HireDateChanged");
                this.columnHireDate.ExtendedProperties.Add("Generator_ChangingEventName", "HireDateChanging");
                this.columnHireDate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "HireDate");
                this.columnHireDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "HireDateColumn");
                this.columnHireDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnHireDate");
                this.columnHireDate.ExtendedProperties.Add("Generator_DelegateName", "HireDateChangeEventHandler");
                this.columnHireDate.ExtendedProperties.Add("Generator_EventArgName", "HireDateChangeEventArg");
                this.columnHireDate.ExtendedProperties.Add("User_ColumnName", "HireDate");
                base.Columns.Add(this.columnHireDate);
                this.columnAddress = new System.Data.DataColumn("Address", typeof(string), null, System.Data.MappingType.Element);
                this.columnAddress.ExtendedProperties.Add("Generator_ChangedEventName", "AddressChanged");
                this.columnAddress.ExtendedProperties.Add("Generator_ChangingEventName", "AddressChanging");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Address");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "AddressColumn");
                this.columnAddress.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAddress");
                this.columnAddress.ExtendedProperties.Add("Generator_DelegateName", "AddressChangeEventHandler");
                this.columnAddress.ExtendedProperties.Add("Generator_EventArgName", "AddressChangeEventArg");
                this.columnAddress.ExtendedProperties.Add("User_ColumnName", "Address");
                base.Columns.Add(this.columnAddress);
                this.columnCity = new System.Data.DataColumn("City", typeof(string), null, System.Data.MappingType.Element);
                this.columnCity.ExtendedProperties.Add("Generator_ChangedEventName", "CityChanged");
                this.columnCity.ExtendedProperties.Add("Generator_ChangingEventName", "CityChanging");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "City");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CityColumn");
                this.columnCity.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCity");
                this.columnCity.ExtendedProperties.Add("Generator_DelegateName", "CityChangeEventHandler");
                this.columnCity.ExtendedProperties.Add("Generator_EventArgName", "CityChangeEventArg");
                this.columnCity.ExtendedProperties.Add("User_ColumnName", "City");
                base.Columns.Add(this.columnCity);
                this.columnRegion = new System.Data.DataColumn("Region", typeof(string), null, System.Data.MappingType.Element);
                this.columnRegion.ExtendedProperties.Add("Generator_ChangedEventName", "RegionChanged");
                this.columnRegion.ExtendedProperties.Add("Generator_ChangingEventName", "RegionChanging");
                this.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Region");
                this.columnRegion.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "RegionColumn");
                this.columnRegion.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnRegion");
                this.columnRegion.ExtendedProperties.Add("Generator_DelegateName", "RegionChangeEventHandler");
                this.columnRegion.ExtendedProperties.Add("Generator_EventArgName", "RegionChangeEventArg");
                this.columnRegion.ExtendedProperties.Add("User_ColumnName", "Region");
                base.Columns.Add(this.columnRegion);
                this.columnPostalCode = new System.Data.DataColumn("PostalCode", typeof(string), null, System.Data.MappingType.Element);
                this.columnPostalCode.ExtendedProperties.Add("Generator_ChangedEventName", "PostalCodeChanged");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ChangingEventName", "PostalCodeChanging");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "PostalCode");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PostalCodeColumn");
                this.columnPostalCode.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPostalCode");
                this.columnPostalCode.ExtendedProperties.Add("Generator_DelegateName", "PostalCodeChangeEventHandler");
                this.columnPostalCode.ExtendedProperties.Add("Generator_EventArgName", "PostalCodeChangeEventArg");
                this.columnPostalCode.ExtendedProperties.Add("User_ColumnName", "PostalCode");
                base.Columns.Add(this.columnPostalCode);
                this.columnCountry = new System.Data.DataColumn("Country", typeof(string), null, System.Data.MappingType.Element);
                this.columnCountry.ExtendedProperties.Add("Generator_ChangedEventName", "CountryChanged");
                this.columnCountry.ExtendedProperties.Add("Generator_ChangingEventName", "CountryChanging");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Country");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CountryColumn");
                this.columnCountry.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCountry");
                this.columnCountry.ExtendedProperties.Add("Generator_DelegateName", "CountryChangeEventHandler");
                this.columnCountry.ExtendedProperties.Add("Generator_EventArgName", "CountryChangeEventArg");
                this.columnCountry.ExtendedProperties.Add("User_ColumnName", "Country");
                base.Columns.Add(this.columnCountry);
                this.columnHomePhone = new System.Data.DataColumn("HomePhone", typeof(string), null, System.Data.MappingType.Element);
                this.columnHomePhone.ExtendedProperties.Add("Generator_ChangedEventName", "HomePhoneChanged");
                this.columnHomePhone.ExtendedProperties.Add("Generator_ChangingEventName", "HomePhoneChanging");
                this.columnHomePhone.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "HomePhone");
                this.columnHomePhone.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "HomePhoneColumn");
                this.columnHomePhone.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnHomePhone");
                this.columnHomePhone.ExtendedProperties.Add("Generator_DelegateName", "HomePhoneChangeEventHandler");
                this.columnHomePhone.ExtendedProperties.Add("Generator_EventArgName", "HomePhoneChangeEventArg");
                this.columnHomePhone.ExtendedProperties.Add("User_ColumnName", "HomePhone");
                base.Columns.Add(this.columnHomePhone);
                this.columnExtension = new System.Data.DataColumn("Extension", typeof(string), null, System.Data.MappingType.Element);
                this.columnExtension.ExtendedProperties.Add("Generator_ChangedEventName", "ExtensionChanged");
                this.columnExtension.ExtendedProperties.Add("Generator_ChangingEventName", "ExtensionChanging");
                this.columnExtension.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Extension");
                this.columnExtension.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ExtensionColumn");
                this.columnExtension.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnExtension");
                this.columnExtension.ExtendedProperties.Add("Generator_DelegateName", "ExtensionChangeEventHandler");
                this.columnExtension.ExtendedProperties.Add("Generator_EventArgName", "ExtensionChangeEventArg");
                this.columnExtension.ExtendedProperties.Add("User_ColumnName", "Extension");
                base.Columns.Add(this.columnExtension);
                this.columnPhoto = new System.Data.DataColumn("Photo", typeof(byte[]), null, System.Data.MappingType.Element);
                this.columnPhoto.ExtendedProperties.Add("Generator_ChangedEventName", "PhotoChanged");
                this.columnPhoto.ExtendedProperties.Add("Generator_ChangingEventName", "PhotoChanging");
                this.columnPhoto.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Photo");
                this.columnPhoto.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "PhotoColumn");
                this.columnPhoto.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnPhoto");
                this.columnPhoto.ExtendedProperties.Add("Generator_DelegateName", "PhotoChangeEventHandler");
                this.columnPhoto.ExtendedProperties.Add("Generator_EventArgName", "PhotoChangeEventArg");
                this.columnPhoto.ExtendedProperties.Add("User_ColumnName", "Photo");
                base.Columns.Add(this.columnPhoto);
                this.columnNotes = new System.Data.DataColumn("Notes", typeof(string), null, System.Data.MappingType.Element);
                this.columnNotes.ExtendedProperties.Add("Generator_ChangedEventName", "NotesChanged");
                this.columnNotes.ExtendedProperties.Add("Generator_ChangingEventName", "NotesChanging");
                this.columnNotes.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Notes");
                this.columnNotes.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "NotesColumn");
                this.columnNotes.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnNotes");
                this.columnNotes.ExtendedProperties.Add("Generator_DelegateName", "NotesChangeEventHandler");
                this.columnNotes.ExtendedProperties.Add("Generator_EventArgName", "NotesChangeEventArg");
                this.columnNotes.ExtendedProperties.Add("User_ColumnName", "Notes");
                base.Columns.Add(this.columnNotes);
                this.columnReportsTo = new System.Data.DataColumn("ReportsTo", typeof(int), null, System.Data.MappingType.Element);
                this.columnReportsTo.ExtendedProperties.Add("Generator_ChangedEventName", "ReportsToChanged");
                this.columnReportsTo.ExtendedProperties.Add("Generator_ChangingEventName", "ReportsToChanging");
                this.columnReportsTo.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ReportsTo");
                this.columnReportsTo.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ReportsToColumn");
                this.columnReportsTo.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnReportsTo");
                this.columnReportsTo.ExtendedProperties.Add("Generator_DelegateName", "ReportsToChangeEventHandler");
                this.columnReportsTo.ExtendedProperties.Add("Generator_EventArgName", "ReportsToChangeEventArg");
                this.columnReportsTo.ExtendedProperties.Add("User_ColumnName", "ReportsTo");
                base.Columns.Add(this.columnReportsTo);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEmployeeID}, true));
                this.columnEmployeeID.AutoIncrement = true;
                this.columnEmployeeID.AllowDBNull = false;
                this.columnEmployeeID.Unique = true;
                this.columnLastName.MaxLength = 20;
                this.columnFirstName.MaxLength = 10;
                this.columnTitle.MaxLength = 30;
                this.columnTitleOfCourtesy.MaxLength = 25;
                this.columnAddress.MaxLength = 60;
                this.columnCity.MaxLength = 15;
                this.columnRegion.MaxLength = 15;
                this.columnPostalCode.MaxLength = 10;
                this.columnCountry.MaxLength = 15;
                this.columnHomePhone.MaxLength = 24;
                this.columnExtension.MaxLength = 4;
                this.columnNotes.MaxLength = 536870910;
                this.ExtendedProperties.Add("Generator_RowClassName", "EmployeesRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "EmployeesRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "EmployeesRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "EmployeesDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Employees");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableEmployees");
                this.ExtendedProperties.Add("User_TableName", "Employees");
            }
            
            public EmployeesRow NewEmployeesRow() {
                return ((EmployeesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EmployeesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EmployeesRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeesRowChanged != null)) {
                    this.EmployeesRowChanged(this, new EmployeesRowChangeEvent(((EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeesRowChanging != null)) {
                    this.EmployeesRowChanging(this, new EmployeesRowChangeEvent(((EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeesRowDeleted != null)) {
                    this.EmployeesRowDeleted(this, new EmployeesRowChangeEvent(((EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeesRowDeleting != null)) {
                    this.EmployeesRowDeleting(this, new EmployeesRowChangeEvent(((EmployeesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEmployeesRow(EmployeesRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NorthwindDataSet ds = new NorthwindDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void EmployeeIDChangeEventHandler(EmployeesDataTable sender, EmployeeIDChangeEventArg e);
            
            public class EmployeeIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public EmployeeIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn EmployeeIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void LastNameChangeEventHandler(EmployeesDataTable sender, LastNameChangeEventArg e);
            
            public class LastNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public LastNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn LastNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void FirstNameChangeEventHandler(EmployeesDataTable sender, FirstNameChangeEventArg e);
            
            public class FirstNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public FirstNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn FirstNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void TitleChangeEventHandler(EmployeesDataTable sender, TitleChangeEventArg e);
            
            public class TitleChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public TitleChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn TitleColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void TitleOfCourtesyChangeEventHandler(EmployeesDataTable sender, TitleOfCourtesyChangeEventArg e);
            
            public class TitleOfCourtesyChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public TitleOfCourtesyChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn TitleOfCourtesyColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void BirthDateChangeEventHandler(EmployeesDataTable sender, BirthDateChangeEventArg e);
            
            public class BirthDateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public BirthDateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn BirthDateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public System.DateTime ProposedValue {
                    get {
                        return ((System.DateTime)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((System.DateTime)(value));
                    }
                }
            }
            
            public delegate void HireDateChangeEventHandler(EmployeesDataTable sender, HireDateChangeEventArg e);
            
            public class HireDateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public HireDateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn HireDateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public System.DateTime ProposedValue {
                    get {
                        return ((System.DateTime)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((System.DateTime)(value));
                    }
                }
            }
            
            public delegate void AddressChangeEventHandler(EmployeesDataTable sender, AddressChangeEventArg e);
            
            public class AddressChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public AddressChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn AddressColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void CityChangeEventHandler(EmployeesDataTable sender, CityChangeEventArg e);
            
            public class CityChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CityChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CityColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void RegionChangeEventHandler(EmployeesDataTable sender, RegionChangeEventArg e);
            
            public class RegionChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public RegionChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn RegionColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PostalCodeChangeEventHandler(EmployeesDataTable sender, PostalCodeChangeEventArg e);
            
            public class PostalCodeChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PostalCodeChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PostalCodeColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void CountryChangeEventHandler(EmployeesDataTable sender, CountryChangeEventArg e);
            
            public class CountryChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CountryChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CountryColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void HomePhoneChangeEventHandler(EmployeesDataTable sender, HomePhoneChangeEventArg e);
            
            public class HomePhoneChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public HomePhoneChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn HomePhoneColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ExtensionChangeEventHandler(EmployeesDataTable sender, ExtensionChangeEventArg e);
            
            public class ExtensionChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ExtensionChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ExtensionColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void PhotoChangeEventHandler(EmployeesDataTable sender, PhotoChangeEventArg e);
            
            public class PhotoChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public PhotoChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn PhotoColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public byte[] ProposedValue {
                    get {
                        return ((byte[])(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((byte[])(value));
                    }
                }
            }
            
            public delegate void NotesChangeEventHandler(EmployeesDataTable sender, NotesChangeEventArg e);
            
            public class NotesChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public NotesChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn NotesColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ReportsToChangeEventHandler(EmployeesDataTable sender, ReportsToChangeEventArg e);
            
            public class ReportsToChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ReportsToChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public EmployeesRow Row {
                    get {
                        return ((EmployeesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ReportsToColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
        }
        
        public class ProductsRow : System.Data.DataRow {
            
            private ProductsDataTable tableProducts;
            
            internal ProductsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProducts = ((ProductsDataTable)(this.Table));
            }
            
            public int ProductID {
                get {
                    return ((int)(this[this.tableProducts.ProductIDColumn]));
                }
                set {
                    this[this.tableProducts.ProductIDColumn] = value;
                }
            }
            
            public string ProductName {
                get {
                    try {
                        return ((string)(this[this.tableProducts.ProductNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableProducts.ProductNameColumn] = value;
                }
            }
            
            public int SupplierID {
                get {
                    try {
                        return ((int)(this[this.tableProducts.SupplierIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableProducts.SupplierIDColumn] = value;
                }
            }
            
            public int CategoryID {
                get {
                    try {
                        return ((int)(this[this.tableProducts.CategoryIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableProducts.CategoryIDColumn] = value;
                }
            }
            
            public string QuantityPerUnit {
                get {
                    try {
                        return ((string)(this[this.tableProducts.QuantityPerUnitColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableProducts.QuantityPerUnitColumn] = value;
                }
            }
            
            public decimal UnitPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableProducts.UnitPriceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableProducts.UnitPriceColumn] = value;
                }
            }
            
            public short UnitsInStock {
                get {
                    try {
                        return ((short)(this[this.tableProducts.UnitsInStockColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableProducts.UnitsInStockColumn] = value;
                }
            }
            
            public short UnitsOnOrder {
                get {
                    try {
                        return ((short)(this[this.tableProducts.UnitsOnOrderColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableProducts.UnitsOnOrderColumn] = value;
                }
            }
            
            public short ReorderLevel {
                get {
                    try {
                        return ((short)(this[this.tableProducts.ReorderLevelColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableProducts.ReorderLevelColumn] = value;
                }
            }
            
            public bool Discontinued {
                get {
                    try {
                        return ((bool)(this[this.tableProducts.DiscontinuedColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableProducts.DiscontinuedColumn] = value;
                }
            }
            
            public SuppliersRow SuppliersRow {
                get {
                    return ((SuppliersRow)(this.GetParentRow(this.Table.ParentRelations["SuppliersProducts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SuppliersProducts"]);
                }
            }
            
            public CategoriesRow CategoriesRow {
                get {
                    return ((CategoriesRow)(this.GetParentRow(this.Table.ParentRelations["CategoriesProducts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CategoriesProducts"]);
                }
            }
            
            public bool IsProductNameNull() {
                return this.IsNull(this.tableProducts.ProductNameColumn);
            }
            
            public void SetProductNameNull() {
                this[this.tableProducts.ProductNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsSupplierIDNull() {
                return this.IsNull(this.tableProducts.SupplierIDColumn);
            }
            
            public void SetSupplierIDNull() {
                this[this.tableProducts.SupplierIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCategoryIDNull() {
                return this.IsNull(this.tableProducts.CategoryIDColumn);
            }
            
            public void SetCategoryIDNull() {
                this[this.tableProducts.CategoryIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsQuantityPerUnitNull() {
                return this.IsNull(this.tableProducts.QuantityPerUnitColumn);
            }
            
            public void SetQuantityPerUnitNull() {
                this[this.tableProducts.QuantityPerUnitColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnitPriceNull() {
                return this.IsNull(this.tableProducts.UnitPriceColumn);
            }
            
            public void SetUnitPriceNull() {
                this[this.tableProducts.UnitPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnitsInStockNull() {
                return this.IsNull(this.tableProducts.UnitsInStockColumn);
            }
            
            public void SetUnitsInStockNull() {
                this[this.tableProducts.UnitsInStockColumn] = System.Convert.DBNull;
            }
            
            public bool IsUnitsOnOrderNull() {
                return this.IsNull(this.tableProducts.UnitsOnOrderColumn);
            }
            
            public void SetUnitsOnOrderNull() {
                this[this.tableProducts.UnitsOnOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsReorderLevelNull() {
                return this.IsNull(this.tableProducts.ReorderLevelColumn);
            }
            
            public void SetReorderLevelNull() {
                this[this.tableProducts.ReorderLevelColumn] = System.Convert.DBNull;
            }
            
            public bool IsDiscontinuedNull() {
                return this.IsNull(this.tableProducts.DiscontinuedColumn);
            }
            
            public void SetDiscontinuedNull() {
                this[this.tableProducts.DiscontinuedColumn] = System.Convert.DBNull;
            }
            
            public Order_DetailsRow[] GetOrder_DetailsRows() {
                return ((Order_DetailsRow[])(this.GetChildRows(this.Table.ChildRelations["ProductsOrder Details"])));
            }
        }
        
        public class OrdersRow : System.Data.DataRow {
            
            private OrdersDataTable tableOrders;
            
            internal OrdersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrders = ((OrdersDataTable)(this.Table));
            }
            
            public int OrderID {
                get {
                    return ((int)(this[this.tableOrders.OrderIDColumn]));
                }
                set {
                    this[this.tableOrders.OrderIDColumn] = value;
                }
            }
            
            public string CustomerID {
                get {
                    try {
                        return ((string)(this[this.tableOrders.CustomerIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.CustomerIDColumn] = value;
                }
            }
            
            public int EmployeeID {
                get {
                    try {
                        return ((int)(this[this.tableOrders.EmployeeIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.EmployeeIDColumn] = value;
                }
            }
            
            public System.DateTime OrderDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrders.OrderDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.OrderDateColumn] = value;
                }
            }
            
            public System.DateTime RequiredDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrders.RequiredDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.RequiredDateColumn] = value;
                }
            }
            
            public System.DateTime ShippedDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableOrders.ShippedDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.ShippedDateColumn] = value;
                }
            }
            
            public int ShipVia {
                get {
                    try {
                        return ((int)(this[this.tableOrders.ShipViaColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.ShipViaColumn] = value;
                }
            }
            
            public decimal Freight {
                get {
                    try {
                        return ((decimal)(this[this.tableOrders.FreightColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.FreightColumn] = value;
                }
            }
            
            public string ShipName {
                get {
                    try {
                        return ((string)(this[this.tableOrders.ShipNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.ShipNameColumn] = value;
                }
            }
            
            public string ShipAddress {
                get {
                    try {
                        return ((string)(this[this.tableOrders.ShipAddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.ShipAddressColumn] = value;
                }
            }
            
            public string ShipCity {
                get {
                    try {
                        return ((string)(this[this.tableOrders.ShipCityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.ShipCityColumn] = value;
                }
            }
            
            public string ShipRegion {
                get {
                    try {
                        return ((string)(this[this.tableOrders.ShipRegionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.ShipRegionColumn] = value;
                }
            }
            
            public string ShipPostalCode {
                get {
                    try {
                        return ((string)(this[this.tableOrders.ShipPostalCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.ShipPostalCodeColumn] = value;
                }
            }
            
            public string ShipCountry {
                get {
                    try {
                        return ((string)(this[this.tableOrders.ShipCountryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.ShipCountryColumn] = value;
                }
            }
            
            public ShippersRow ShippersRow {
                get {
                    return ((ShippersRow)(this.GetParentRow(this.Table.ParentRelations["ShippersOrders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ShippersOrders"]);
                }
            }
            
            public CustomersRow CustomersRow {
                get {
                    return ((CustomersRow)(this.GetParentRow(this.Table.ParentRelations["CustomersOrders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CustomersOrders"]);
                }
            }
            
            public EmployeesRow EmployeesRow {
                get {
                    return ((EmployeesRow)(this.GetParentRow(this.Table.ParentRelations["EmployeesOrders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EmployeesOrders"]);
                }
            }
            
            public bool IsCustomerIDNull() {
                return this.IsNull(this.tableOrders.CustomerIDColumn);
            }
            
            public void SetCustomerIDNull() {
                this[this.tableOrders.CustomerIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsEmployeeIDNull() {
                return this.IsNull(this.tableOrders.EmployeeIDColumn);
            }
            
            public void SetEmployeeIDNull() {
                this[this.tableOrders.EmployeeIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrderDateNull() {
                return this.IsNull(this.tableOrders.OrderDateColumn);
            }
            
            public void SetOrderDateNull() {
                this[this.tableOrders.OrderDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsRequiredDateNull() {
                return this.IsNull(this.tableOrders.RequiredDateColumn);
            }
            
            public void SetRequiredDateNull() {
                this[this.tableOrders.RequiredDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsShippedDateNull() {
                return this.IsNull(this.tableOrders.ShippedDateColumn);
            }
            
            public void SetShippedDateNull() {
                this[this.tableOrders.ShippedDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipViaNull() {
                return this.IsNull(this.tableOrders.ShipViaColumn);
            }
            
            public void SetShipViaNull() {
                this[this.tableOrders.ShipViaColumn] = System.Convert.DBNull;
            }
            
            public bool IsFreightNull() {
                return this.IsNull(this.tableOrders.FreightColumn);
            }
            
            public void SetFreightNull() {
                this[this.tableOrders.FreightColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipNameNull() {
                return this.IsNull(this.tableOrders.ShipNameColumn);
            }
            
            public void SetShipNameNull() {
                this[this.tableOrders.ShipNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipAddressNull() {
                return this.IsNull(this.tableOrders.ShipAddressColumn);
            }
            
            public void SetShipAddressNull() {
                this[this.tableOrders.ShipAddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipCityNull() {
                return this.IsNull(this.tableOrders.ShipCityColumn);
            }
            
            public void SetShipCityNull() {
                this[this.tableOrders.ShipCityColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipRegionNull() {
                return this.IsNull(this.tableOrders.ShipRegionColumn);
            }
            
            public void SetShipRegionNull() {
                this[this.tableOrders.ShipRegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipPostalCodeNull() {
                return this.IsNull(this.tableOrders.ShipPostalCodeColumn);
            }
            
            public void SetShipPostalCodeNull() {
                this[this.tableOrders.ShipPostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsShipCountryNull() {
                return this.IsNull(this.tableOrders.ShipCountryColumn);
            }
            
            public void SetShipCountryNull() {
                this[this.tableOrders.ShipCountryColumn] = System.Convert.DBNull;
            }
            
            public Order_DetailsRow[] GetOrder_DetailsRows() {
                return ((Order_DetailsRow[])(this.GetChildRows(this.Table.ChildRelations["OrdersOrder Details"])));
            }
        }
        
        public class SuppliersRow : System.Data.DataRow {
            
            private SuppliersDataTable tableSuppliers;
            
            internal SuppliersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSuppliers = ((SuppliersDataTable)(this.Table));
            }
            
            public int SupplierID {
                get {
                    return ((int)(this[this.tableSuppliers.SupplierIDColumn]));
                }
                set {
                    this[this.tableSuppliers.SupplierIDColumn] = value;
                }
            }
            
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.CompanyNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSuppliers.CompanyNameColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.ContactNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSuppliers.ContactNameColumn] = value;
                }
            }
            
            public string ContactTitle {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.ContactTitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSuppliers.ContactTitleColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSuppliers.AddressColumn] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.CityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSuppliers.CityColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.RegionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSuppliers.RegionColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.PostalCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSuppliers.PostalCodeColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.CountryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSuppliers.CountryColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.PhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSuppliers.PhoneColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.FaxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSuppliers.FaxColumn] = value;
                }
            }
            
            public string HomePage {
                get {
                    try {
                        return ((string)(this[this.tableSuppliers.HomePageColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableSuppliers.HomePageColumn] = value;
                }
            }
            
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableSuppliers.CompanyNameColumn);
            }
            
            public void SetCompanyNameNull() {
                this[this.tableSuppliers.CompanyNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableSuppliers.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableSuppliers.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactTitleNull() {
                return this.IsNull(this.tableSuppliers.ContactTitleColumn);
            }
            
            public void SetContactTitleNull() {
                this[this.tableSuppliers.ContactTitleColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableSuppliers.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableSuppliers.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableSuppliers.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableSuppliers.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableSuppliers.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableSuppliers.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableSuppliers.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableSuppliers.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableSuppliers.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableSuppliers.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableSuppliers.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableSuppliers.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableSuppliers.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableSuppliers.FaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsHomePageNull() {
                return this.IsNull(this.tableSuppliers.HomePageColumn);
            }
            
            public void SetHomePageNull() {
                this[this.tableSuppliers.HomePageColumn] = System.Convert.DBNull;
            }
            
            public ProductsRow[] GetProductsRows() {
                return ((ProductsRow[])(this.GetChildRows(this.Table.ChildRelations["SuppliersProducts"])));
            }
        }
        
        public class ShippersRow : System.Data.DataRow {
            
            private ShippersDataTable tableShippers;
            
            internal ShippersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableShippers = ((ShippersDataTable)(this.Table));
            }
            
            public int ShipperID {
                get {
                    return ((int)(this[this.tableShippers.ShipperIDColumn]));
                }
                set {
                    this[this.tableShippers.ShipperIDColumn] = value;
                }
            }
            
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableShippers.CompanyNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableShippers.CompanyNameColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableShippers.PhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableShippers.PhoneColumn] = value;
                }
            }
            
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableShippers.CompanyNameColumn);
            }
            
            public void SetCompanyNameNull() {
                this[this.tableShippers.CompanyNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableShippers.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableShippers.PhoneColumn] = System.Convert.DBNull;
            }
            
            public OrdersRow[] GetOrdersRows() {
                return ((OrdersRow[])(this.GetChildRows(this.Table.ChildRelations["ShippersOrders"])));
            }
        }
        
        public class CustomersRow : System.Data.DataRow {
            
            private CustomersDataTable tableCustomers;
            
            internal CustomersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCustomers = ((CustomersDataTable)(this.Table));
            }
            
            public string CustomerID {
                get {
                    return ((string)(this[this.tableCustomers.CustomerIDColumn]));
                }
                set {
                    this[this.tableCustomers.CustomerIDColumn] = value;
                }
            }
            
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.CompanyNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.CompanyNameColumn] = value;
                }
            }
            
            public string ContactName {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.ContactNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.ContactNameColumn] = value;
                }
            }
            
            public string ContactTitle {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.ContactTitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.ContactTitleColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.AddressColumn] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.CityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.CityColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.RegionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.RegionColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.PostalCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.PostalCodeColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.CountryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.CountryColumn] = value;
                }
            }
            
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.PhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.PhoneColumn] = value;
                }
            }
            
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableCustomers.FaxColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCustomers.FaxColumn] = value;
                }
            }
            
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableCustomers.CompanyNameColumn);
            }
            
            public void SetCompanyNameNull() {
                this[this.tableCustomers.CompanyNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactNameNull() {
                return this.IsNull(this.tableCustomers.ContactNameColumn);
            }
            
            public void SetContactNameNull() {
                this[this.tableCustomers.ContactNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsContactTitleNull() {
                return this.IsNull(this.tableCustomers.ContactTitleColumn);
            }
            
            public void SetContactTitleNull() {
                this[this.tableCustomers.ContactTitleColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableCustomers.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableCustomers.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableCustomers.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableCustomers.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableCustomers.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableCustomers.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableCustomers.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableCustomers.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableCustomers.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableCustomers.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNull() {
                return this.IsNull(this.tableCustomers.PhoneColumn);
            }
            
            public void SetPhoneNull() {
                this[this.tableCustomers.PhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsFaxNull() {
                return this.IsNull(this.tableCustomers.FaxColumn);
            }
            
            public void SetFaxNull() {
                this[this.tableCustomers.FaxColumn] = System.Convert.DBNull;
            }
            
            public OrdersRow[] GetOrdersRows() {
                return ((OrdersRow[])(this.GetChildRows(this.Table.ChildRelations["CustomersOrders"])));
            }
        }
        
        public class CategoriesRow : System.Data.DataRow {
            
            private CategoriesDataTable tableCategories;
            
            internal CategoriesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategories = ((CategoriesDataTable)(this.Table));
            }
            
            public int CategoryID {
                get {
                    return ((int)(this[this.tableCategories.CategoryIDColumn]));
                }
                set {
                    this[this.tableCategories.CategoryIDColumn] = value;
                }
            }
            
            public string CategoryName {
                get {
                    try {
                        return ((string)(this[this.tableCategories.CategoryNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCategories.CategoryNameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableCategories.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCategories.DescriptionColumn] = value;
                }
            }
            
            public byte[] Picture {
                get {
                    try {
                        return ((byte[])(this[this.tableCategories.PictureColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCategories.PictureColumn] = value;
                }
            }
            
            public bool IsCategoryNameNull() {
                return this.IsNull(this.tableCategories.CategoryNameColumn);
            }
            
            public void SetCategoryNameNull() {
                this[this.tableCategories.CategoryNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableCategories.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableCategories.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsPictureNull() {
                return this.IsNull(this.tableCategories.PictureColumn);
            }
            
            public void SetPictureNull() {
                this[this.tableCategories.PictureColumn] = System.Convert.DBNull;
            }
            
            public ProductsRow[] GetProductsRows() {
                return ((ProductsRow[])(this.GetChildRows(this.Table.ChildRelations["CategoriesProducts"])));
            }
        }
        
        public class Order_DetailsRow : System.Data.DataRow {
            
            private Order_DetailsDataTable tableOrder_Details;
            
            internal Order_DetailsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrder_Details = ((Order_DetailsDataTable)(this.Table));
            }
            
            public int OrderID {
                get {
                    return ((int)(this[this.tableOrder_Details.OrderIDColumn]));
                }
                set {
                    this[this.tableOrder_Details.OrderIDColumn] = value;
                }
            }
            
            public int ProductID {
                get {
                    return ((int)(this[this.tableOrder_Details.ProductIDColumn]));
                }
                set {
                    this[this.tableOrder_Details.ProductIDColumn] = value;
                }
            }
            
            public decimal UnitPrice {
                get {
                    try {
                        return ((decimal)(this[this.tableOrder_Details.UnitPriceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrder_Details.UnitPriceColumn] = value;
                }
            }
            
            public short Quantity {
                get {
                    try {
                        return ((short)(this[this.tableOrder_Details.QuantityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrder_Details.QuantityColumn] = value;
                }
            }
            
            public float Discount {
                get {
                    try {
                        return ((float)(this[this.tableOrder_Details.DiscountColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrder_Details.DiscountColumn] = value;
                }
            }
            
            public ProductsRow ProductsRow {
                get {
                    return ((ProductsRow)(this.GetParentRow(this.Table.ParentRelations["ProductsOrder Details"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ProductsOrder Details"]);
                }
            }
            
            public OrdersRow OrdersRow {
                get {
                    return ((OrdersRow)(this.GetParentRow(this.Table.ParentRelations["OrdersOrder Details"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OrdersOrder Details"]);
                }
            }
            
            public bool IsUnitPriceNull() {
                return this.IsNull(this.tableOrder_Details.UnitPriceColumn);
            }
            
            public void SetUnitPriceNull() {
                this[this.tableOrder_Details.UnitPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsQuantityNull() {
                return this.IsNull(this.tableOrder_Details.QuantityColumn);
            }
            
            public void SetQuantityNull() {
                this[this.tableOrder_Details.QuantityColumn] = System.Convert.DBNull;
            }
            
            public bool IsDiscountNull() {
                return this.IsNull(this.tableOrder_Details.DiscountColumn);
            }
            
            public void SetDiscountNull() {
                this[this.tableOrder_Details.DiscountColumn] = System.Convert.DBNull;
            }
        }
        
        public class EmployeesRow : System.Data.DataRow {
            
            private EmployeesDataTable tableEmployees;
            
            internal EmployeesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployees = ((EmployeesDataTable)(this.Table));
            }
            
            public int EmployeeID {
                get {
                    return ((int)(this[this.tableEmployees.EmployeeIDColumn]));
                }
                set {
                    this[this.tableEmployees.EmployeeIDColumn] = value;
                }
            }
            
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.LastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.LastNameColumn] = value;
                }
            }
            
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.FirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.FirstNameColumn] = value;
                }
            }
            
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.TitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.TitleColumn] = value;
                }
            }
            
            public string TitleOfCourtesy {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.TitleOfCourtesyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.TitleOfCourtesyColumn] = value;
                }
            }
            
            public System.DateTime BirthDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEmployees.BirthDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.BirthDateColumn] = value;
                }
            }
            
            public System.DateTime HireDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableEmployees.HireDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.HireDateColumn] = value;
                }
            }
            
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.AddressColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.AddressColumn] = value;
                }
            }
            
            public string City {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.CityColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.CityColumn] = value;
                }
            }
            
            public string Region {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.RegionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.RegionColumn] = value;
                }
            }
            
            public string PostalCode {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.PostalCodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.PostalCodeColumn] = value;
                }
            }
            
            public string Country {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.CountryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.CountryColumn] = value;
                }
            }
            
            public string HomePhone {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.HomePhoneColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.HomePhoneColumn] = value;
                }
            }
            
            public string Extension {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.ExtensionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.ExtensionColumn] = value;
                }
            }
            
            public byte[] Photo {
                get {
                    try {
                        return ((byte[])(this[this.tableEmployees.PhotoColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.PhotoColumn] = value;
                }
            }
            
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableEmployees.NotesColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.NotesColumn] = value;
                }
            }
            
            public int ReportsTo {
                get {
                    try {
                        return ((int)(this[this.tableEmployees.ReportsToColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableEmployees.ReportsToColumn] = value;
                }
            }
            
            public bool IsLastNameNull() {
                return this.IsNull(this.tableEmployees.LastNameColumn);
            }
            
            public void SetLastNameNull() {
                this[this.tableEmployees.LastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableEmployees.FirstNameColumn);
            }
            
            public void SetFirstNameNull() {
                this[this.tableEmployees.FirstNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsTitleNull() {
                return this.IsNull(this.tableEmployees.TitleColumn);
            }
            
            public void SetTitleNull() {
                this[this.tableEmployees.TitleColumn] = System.Convert.DBNull;
            }
            
            public bool IsTitleOfCourtesyNull() {
                return this.IsNull(this.tableEmployees.TitleOfCourtesyColumn);
            }
            
            public void SetTitleOfCourtesyNull() {
                this[this.tableEmployees.TitleOfCourtesyColumn] = System.Convert.DBNull;
            }
            
            public bool IsBirthDateNull() {
                return this.IsNull(this.tableEmployees.BirthDateColumn);
            }
            
            public void SetBirthDateNull() {
                this[this.tableEmployees.BirthDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsHireDateNull() {
                return this.IsNull(this.tableEmployees.HireDateColumn);
            }
            
            public void SetHireDateNull() {
                this[this.tableEmployees.HireDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsAddressNull() {
                return this.IsNull(this.tableEmployees.AddressColumn);
            }
            
            public void SetAddressNull() {
                this[this.tableEmployees.AddressColumn] = System.Convert.DBNull;
            }
            
            public bool IsCityNull() {
                return this.IsNull(this.tableEmployees.CityColumn);
            }
            
            public void SetCityNull() {
                this[this.tableEmployees.CityColumn] = System.Convert.DBNull;
            }
            
            public bool IsRegionNull() {
                return this.IsNull(this.tableEmployees.RegionColumn);
            }
            
            public void SetRegionNull() {
                this[this.tableEmployees.RegionColumn] = System.Convert.DBNull;
            }
            
            public bool IsPostalCodeNull() {
                return this.IsNull(this.tableEmployees.PostalCodeColumn);
            }
            
            public void SetPostalCodeNull() {
                this[this.tableEmployees.PostalCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCountryNull() {
                return this.IsNull(this.tableEmployees.CountryColumn);
            }
            
            public void SetCountryNull() {
                this[this.tableEmployees.CountryColumn] = System.Convert.DBNull;
            }
            
            public bool IsHomePhoneNull() {
                return this.IsNull(this.tableEmployees.HomePhoneColumn);
            }
            
            public void SetHomePhoneNull() {
                this[this.tableEmployees.HomePhoneColumn] = System.Convert.DBNull;
            }
            
            public bool IsExtensionNull() {
                return this.IsNull(this.tableEmployees.ExtensionColumn);
            }
            
            public void SetExtensionNull() {
                this[this.tableEmployees.ExtensionColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhotoNull() {
                return this.IsNull(this.tableEmployees.PhotoColumn);
            }
            
            public void SetPhotoNull() {
                this[this.tableEmployees.PhotoColumn] = System.Convert.DBNull;
            }
            
            public bool IsNotesNull() {
                return this.IsNull(this.tableEmployees.NotesColumn);
            }
            
            public void SetNotesNull() {
                this[this.tableEmployees.NotesColumn] = System.Convert.DBNull;
            }
            
            public bool IsReportsToNull() {
                return this.IsNull(this.tableEmployees.ReportsToColumn);
            }
            
            public void SetReportsToNull() {
                this[this.tableEmployees.ReportsToColumn] = System.Convert.DBNull;
            }
            
            public OrdersRow[] GetOrdersRows() {
                return ((OrdersRow[])(this.GetChildRows(this.Table.ChildRelations["EmployeesOrders"])));
            }
        }
        
        public class ProductsRowChangeEvent : System.EventArgs {
            
            private ProductsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ProductsRowChangeEvent(ProductsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProductsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class OrdersRowChangeEvent : System.EventArgs {
            
            private OrdersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public OrdersRowChangeEvent(OrdersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class SuppliersRowChangeEvent : System.EventArgs {
            
            private SuppliersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public SuppliersRowChangeEvent(SuppliersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SuppliersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class ShippersRowChangeEvent : System.EventArgs {
            
            private ShippersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ShippersRowChangeEvent(ShippersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ShippersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class CustomersRowChangeEvent : System.EventArgs {
            
            private CustomersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CustomersRowChangeEvent(CustomersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CustomersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class CategoriesRowChangeEvent : System.EventArgs {
            
            private CategoriesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CategoriesRowChangeEvent(CategoriesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CategoriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class Order_DetailsRowChangeEvent : System.EventArgs {
            
            private Order_DetailsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public Order_DetailsRowChangeEvent(Order_DetailsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Order_DetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class EmployeesRowChangeEvent : System.EventArgs {
            
            private EmployeesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public EmployeesRowChangeEvent(EmployeesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EmployeesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    public interface IProductsTableAdapter {
        
        int Fill(NorthwindDataSet dataSet);
        
        int Fill(NorthwindDataSet.ProductsDataTable dataTable);
        
        NorthwindDataSet.ProductsDataTable GetData();
        
        int Delete(int p1);
        
        int Delete(object p1);
        
        int Insert(string p1, int p2, int p3, string p4, decimal p5, short p6, short p7, short p8, bool p9);
        
        int Insert(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9);
        
        int Update(string p1, int p2, int p3, string p4, decimal p5, short p6, short p7, short p8, bool p9, int p10);
        
        int Update(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10);
        
        int Update(NorthwindDataSet dataSet);
        
        int Update(NorthwindDataSet.ProductsDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public class ProductsTableAdapter : System.ComponentModel.Component, IProductsTableAdapter {
        
        private System.Data.OleDb.OleDbCommand m_DeleteCommand;
        
        private System.Data.OleDb.OleDbCommand m_InsertCommand;
        
        private System.Data.OleDb.OleDbCommand m_UpdateCommand;
        
        private System.Data.OleDb.OleDbDataAdapter m_adapter;
        
        private System.Data.OleDb.OleDbConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.OleDb.OleDbTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.OleDb.OleDbCommand DeleteCommand {
            get {
                if ((this.m_DeleteCommand == null)) {
                    this.InitDeleteCommand();
                }
                return this.m_DeleteCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand InsertCommand {
            get {
                if ((this.m_InsertCommand == null)) {
                    this.InitInsertCommand();
                }
                return this.m_InsertCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand UpdateCommand {
            get {
                if ((this.m_UpdateCommand == null)) {
                    this.InitUpdateCommand();
                }
                return this.m_UpdateCommand;
            }
        }
        
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.OleDb.OleDbTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitDeleteCommand() {
            this.m_DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this.m_DeleteCommand.Connection = this.Connection;
            this.m_DeleteCommand.CommandText = "DELETE FROM `Products` WHERE ((`ProductID` = ?))";
            this.m_DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.m_DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitInsertCommand() {
            this.m_InsertCommand = new System.Data.OleDb.OleDbCommand();
            this.m_InsertCommand.Connection = this.Connection;
            this.m_InsertCommand.CommandText = "INSERT INTO `Products` (`ProductName`, `SupplierID`, `CategoryID`, `QuantityPerUn" +
                "it`, `UnitPrice`, `UnitsInStock`, `UnitsOnOrder`, `ReorderLevel`, `Discontinued`" +
                ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this.m_InsertCommand.CommandType = System.Data.CommandType.Text;
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductName", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "QuantityPerUnit", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsInStock", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsOnOrder", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReorderLevel", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.Boolean, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discontinued", System.Data.DataRowVersion.Current, false, null));
        }
        
        private void InitUpdateCommand() {
            this.m_UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this.m_UpdateCommand.Connection = this.Connection;
            this.m_UpdateCommand.CommandText = "UPDATE `Products` SET `ProductName` = ?, `SupplierID` = ?, `CategoryID` = ?, `Qua" +
                "ntityPerUnit` = ?, `UnitPrice` = ?, `UnitsInStock` = ?, `UnitsOnOrder` = ?, `Reo" +
                "rderLevel` = ?, `Discontinued` = ? WHERE ((`ProductID` = ?))";
            this.m_UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductName", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "QuantityPerUnit", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsInStock", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsOnOrder", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReorderLevel", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.Boolean, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discontinued", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Products";
            tableMapping.ColumnMappings.Add("ProductID", "ProductID");
            tableMapping.ColumnMappings.Add("ProductName", "ProductName");
            tableMapping.ColumnMappings.Add("SupplierID", "SupplierID");
            tableMapping.ColumnMappings.Add("CategoryID", "CategoryID");
            tableMapping.ColumnMappings.Add("QuantityPerUnit", "QuantityPerUnit");
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice");
            tableMapping.ColumnMappings.Add("UnitsInStock", "UnitsInStock");
            tableMapping.ColumnMappings.Add("UnitsOnOrder", "UnitsOnOrder");
            tableMapping.ColumnMappings.Add("ReorderLevel", "ReorderLevel");
            tableMapping.ColumnMappings.Add("Discontinued", "Discontinued");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandText = "SELECT ProductID, ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice" +
                ", UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued FROM Products";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.Text;
            this.m_adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandText = @"DELETE FROM `Products` WHERE ((`ProductID` = ?) AND ((? = 1 AND `ProductName` IS NULL) OR (`ProductName` = ?)) AND ((? = 1 AND `SupplierID` IS NULL) OR (`SupplierID` = ?)) AND ((? = 1 AND `CategoryID` IS NULL) OR (`CategoryID` = ?)) AND ((? = 1 AND `QuantityPerUnit` IS NULL) OR (`QuantityPerUnit` = ?)) AND ((? = 1 AND `UnitPrice` IS NULL) OR (`UnitPrice` = ?)) AND ((? = 1 AND `UnitsInStock` IS NULL) OR (`UnitsInStock` = ?)) AND ((? = 1 AND `UnitsOnOrder` IS NULL) OR (`UnitsOnOrder` = ?)) AND ((? = 1 AND `ReorderLevel` IS NULL) OR (`ReorderLevel` = ?)) AND ((? = 1 AND `Discontinued` IS NULL) OR (`Discontinued` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "QuantityPerUnit", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "QuantityPerUnit", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsInStock", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsInStock", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsOnOrder", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsOnOrder", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReorderLevel", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReorderLevel", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discontinued", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.Boolean, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discontinued", System.Data.DataRowVersion.Original, false, null));
            this.m_adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandText = "INSERT INTO `Products` (`ProductName`, `SupplierID`, `CategoryID`, `QuantityPerUn" +
                "it`, `UnitPrice`, `UnitsInStock`, `UnitsOnOrder`, `ReorderLevel`, `Discontinued`" +
                ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "QuantityPerUnit", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsInStock", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsOnOrder", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReorderLevel", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.Boolean, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discontinued", System.Data.DataRowVersion.Current, false, null));
            this.m_adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandText = @"UPDATE `Products` SET `ProductName` = ?, `SupplierID` = ?, `CategoryID` = ?, `QuantityPerUnit` = ?, `UnitPrice` = ?, `UnitsInStock` = ?, `UnitsOnOrder` = ?, `ReorderLevel` = ?, `Discontinued` = ? WHERE ((`ProductID` = ?) AND ((? = 1 AND `ProductName` IS NULL) OR (`ProductName` = ?)) AND ((? = 1 AND `SupplierID` IS NULL) OR (`SupplierID` = ?)) AND ((? = 1 AND `CategoryID` IS NULL) OR (`CategoryID` = ?)) AND ((? = 1 AND `QuantityPerUnit` IS NULL) OR (`QuantityPerUnit` = ?)) AND ((? = 1 AND `UnitPrice` IS NULL) OR (`UnitPrice` = ?)) AND ((? = 1 AND `UnitsInStock` IS NULL) OR (`UnitsInStock` = ?)) AND ((? = 1 AND `UnitsOnOrder` IS NULL) OR (`UnitsOnOrder` = ?)) AND ((? = 1 AND `ReorderLevel` IS NULL) OR (`ReorderLevel` = ?)) AND ((? = 1 AND `Discontinued` IS NULL) OR (`Discontinued` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "QuantityPerUnit", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsInStock", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsOnOrder", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReorderLevel", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.Boolean, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discontinued", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "QuantityPerUnit", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "QuantityPerUnit", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsInStock", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p22", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsInStock", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p23", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsOnOrder", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p24", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitsOnOrder", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p25", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReorderLevel", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p26", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReorderLevel", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p27", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discontinued", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p28", System.Data.OleDb.OleDbType.Boolean, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discontinued", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.OleDb.OleDbConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("TestFu.Tests.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("TestFu.Tests.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("Connection2");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandText = "SELECT ProductID, ProductName, SupplierID, CategoryID, QuantityPerUnit, UnitPrice" +
                ", UnitsInStock, UnitsOnOrder, ReorderLevel, Discontinued FROM Products";
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.Text;
        }
        
        public virtual int Fill(NorthwindDataSet dataSet) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.Products.Clear();
            }
            int returnValue = this.Adapter.Fill(dataSet);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NorthwindDataSet.ProductsDataTable dataTable) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NorthwindDataSet.ProductsDataTable GetData() {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            NorthwindDataSet.ProductsDataTable dataTable = new NorthwindDataSet.ProductsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Delete(int p1) {
            this.DeleteCommand.Parameters[0].Value = ((int)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(object p1) {
            this.DeleteCommand.Parameters[0].Value = ((object)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        public virtual int Insert(string p1, int p2, int p3, string p4, decimal p5, short p6, short p7, short p8, bool p9) {
            this.InsertCommand.Parameters[0].Value = ((string)(p1));
            this.InsertCommand.Parameters[1].Value = ((int)(p2));
            this.InsertCommand.Parameters[2].Value = ((int)(p3));
            this.InsertCommand.Parameters[3].Value = ((string)(p4));
            this.InsertCommand.Parameters[4].Value = ((decimal)(p5));
            this.InsertCommand.Parameters[5].Value = ((short)(p6));
            this.InsertCommand.Parameters[6].Value = ((short)(p7));
            this.InsertCommand.Parameters[7].Value = ((short)(p8));
            this.InsertCommand.Parameters[8].Value = ((bool)(p9));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9) {
            this.InsertCommand.Parameters[0].Value = ((object)(p1));
            this.InsertCommand.Parameters[1].Value = ((object)(p2));
            this.InsertCommand.Parameters[2].Value = ((object)(p3));
            this.InsertCommand.Parameters[3].Value = ((object)(p4));
            this.InsertCommand.Parameters[4].Value = ((object)(p5));
            this.InsertCommand.Parameters[5].Value = ((object)(p6));
            this.InsertCommand.Parameters[6].Value = ((object)(p7));
            this.InsertCommand.Parameters[7].Value = ((object)(p8));
            this.InsertCommand.Parameters[8].Value = ((object)(p9));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        public virtual int Update(string p1, int p2, int p3, string p4, decimal p5, short p6, short p7, short p8, bool p9, int p10) {
            this.UpdateCommand.Parameters[0].Value = ((string)(p1));
            this.UpdateCommand.Parameters[1].Value = ((int)(p2));
            this.UpdateCommand.Parameters[2].Value = ((int)(p3));
            this.UpdateCommand.Parameters[3].Value = ((string)(p4));
            this.UpdateCommand.Parameters[4].Value = ((decimal)(p5));
            this.UpdateCommand.Parameters[5].Value = ((short)(p6));
            this.UpdateCommand.Parameters[6].Value = ((short)(p7));
            this.UpdateCommand.Parameters[7].Value = ((short)(p8));
            this.UpdateCommand.Parameters[8].Value = ((bool)(p9));
            this.UpdateCommand.Parameters[9].Value = ((int)(p10));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10) {
            this.UpdateCommand.Parameters[0].Value = ((object)(p1));
            this.UpdateCommand.Parameters[1].Value = ((object)(p2));
            this.UpdateCommand.Parameters[2].Value = ((object)(p3));
            this.UpdateCommand.Parameters[3].Value = ((object)(p4));
            this.UpdateCommand.Parameters[4].Value = ((object)(p5));
            this.UpdateCommand.Parameters[5].Value = ((object)(p6));
            this.UpdateCommand.Parameters[6].Value = ((object)(p7));
            this.UpdateCommand.Parameters[7].Value = ((object)(p8));
            this.UpdateCommand.Parameters[8].Value = ((object)(p9));
            this.UpdateCommand.Parameters[9].Value = ((object)(p10));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        public virtual int Update(NorthwindDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Products");
        }
        
        public virtual int Update(NorthwindDataSet.ProductsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
    
    public interface IOrdersTableAdapter {
        
        int Fill(NorthwindDataSet dataSet);
        
        int Fill(NorthwindDataSet.OrdersDataTable dataTable);
        
        NorthwindDataSet.OrdersDataTable GetData();
        
        int Delete(int p1);
        
        int Delete(object p1);
        
        int Insert(string p1, int p2, System.DateTime p3, System.DateTime p4, System.DateTime p5, int p6, decimal p7, string p8, string p9, string p10, string p11, string p12, string p13);
        
        int Insert(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11, object p12, object p13);
        
        int Update(string p1, int p2, System.DateTime p3, System.DateTime p4, System.DateTime p5, int p6, decimal p7, string p8, string p9, string p10, string p11, string p12, string p13, int p14);
        
        int Update(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11, object p12, object p13, object p14);
        
        int Update(NorthwindDataSet dataSet);
        
        int Update(NorthwindDataSet.OrdersDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public class OrdersTableAdapter : System.ComponentModel.Component, IOrdersTableAdapter {
        
        private System.Data.OleDb.OleDbCommand m_DeleteCommand;
        
        private System.Data.OleDb.OleDbCommand m_InsertCommand;
        
        private System.Data.OleDb.OleDbCommand m_UpdateCommand;
        
        private System.Data.OleDb.OleDbDataAdapter m_adapter;
        
        private System.Data.OleDb.OleDbConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.OleDb.OleDbTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.OleDb.OleDbCommand DeleteCommand {
            get {
                if ((this.m_DeleteCommand == null)) {
                    this.InitDeleteCommand();
                }
                return this.m_DeleteCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand InsertCommand {
            get {
                if ((this.m_InsertCommand == null)) {
                    this.InitInsertCommand();
                }
                return this.m_InsertCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand UpdateCommand {
            get {
                if ((this.m_UpdateCommand == null)) {
                    this.InitUpdateCommand();
                }
                return this.m_UpdateCommand;
            }
        }
        
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.OleDb.OleDbTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitDeleteCommand() {
            this.m_DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this.m_DeleteCommand.Connection = this.Connection;
            this.m_DeleteCommand.CommandText = "DELETE FROM `Orders` WHERE ((`OrderID` = ?))";
            this.m_DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.m_DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitInsertCommand() {
            this.m_InsertCommand = new System.Data.OleDb.OleDbCommand();
            this.m_InsertCommand.Connection = this.Connection;
            this.m_InsertCommand.CommandText = "INSERT INTO `Orders` (`CustomerID`, `EmployeeID`, `OrderDate`, `RequiredDate`, `S" +
                "hippedDate`, `ShipVia`, `Freight`, `ShipName`, `ShipAddress`, `ShipCity`, `ShipR" +
                "egion`, `ShipPostalCode`, `ShipCountry`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?" +
                ", ?, ?)";
            this.m_InsertCommand.CommandType = System.Data.CommandType.Text;
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderDate", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RequiredDate", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShippedDate", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipVia", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Freight", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipName", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipAddress", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCity", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipRegion", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipPostalCode", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCountry", System.Data.DataRowVersion.Current, false, null));
        }
        
        private void InitUpdateCommand() {
            this.m_UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this.m_UpdateCommand.Connection = this.Connection;
            this.m_UpdateCommand.CommandText = @"UPDATE `Orders` SET `CustomerID` = ?, `EmployeeID` = ?, `OrderDate` = ?, `RequiredDate` = ?, `ShippedDate` = ?, `ShipVia` = ?, `Freight` = ?, `ShipName` = ?, `ShipAddress` = ?, `ShipCity` = ?, `ShipRegion` = ?, `ShipPostalCode` = ?, `ShipCountry` = ? WHERE ((`OrderID` = ?))";
            this.m_UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderDate", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RequiredDate", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShippedDate", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipVia", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Freight", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipName", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipAddress", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCity", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipRegion", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipPostalCode", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCountry", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Orders";
            tableMapping.ColumnMappings.Add("OrderID", "OrderID");
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID");
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID");
            tableMapping.ColumnMappings.Add("OrderDate", "OrderDate");
            tableMapping.ColumnMappings.Add("RequiredDate", "RequiredDate");
            tableMapping.ColumnMappings.Add("ShippedDate", "ShippedDate");
            tableMapping.ColumnMappings.Add("ShipVia", "ShipVia");
            tableMapping.ColumnMappings.Add("Freight", "Freight");
            tableMapping.ColumnMappings.Add("ShipName", "ShipName");
            tableMapping.ColumnMappings.Add("ShipAddress", "ShipAddress");
            tableMapping.ColumnMappings.Add("ShipCity", "ShipCity");
            tableMapping.ColumnMappings.Add("ShipRegion", "ShipRegion");
            tableMapping.ColumnMappings.Add("ShipPostalCode", "ShipPostalCode");
            tableMapping.ColumnMappings.Add("ShipCountry", "ShipCountry");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandText = "SELECT OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, Shi" +
                "pVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, Ship" +
                "Country FROM Orders";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.Text;
            this.m_adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandText = @"DELETE FROM `Orders` WHERE ((`OrderID` = ?) AND ((? = 1 AND `CustomerID` IS NULL) OR (`CustomerID` = ?)) AND ((? = 1 AND `EmployeeID` IS NULL) OR (`EmployeeID` = ?)) AND ((? = 1 AND `OrderDate` IS NULL) OR (`OrderDate` = ?)) AND ((? = 1 AND `RequiredDate` IS NULL) OR (`RequiredDate` = ?)) AND ((? = 1 AND `ShippedDate` IS NULL) OR (`ShippedDate` = ?)) AND ((? = 1 AND `ShipVia` IS NULL) OR (`ShipVia` = ?)) AND ((? = 1 AND `Freight` IS NULL) OR (`Freight` = ?)) AND ((? = 1 AND `ShipName` IS NULL) OR (`ShipName` = ?)) AND ((? = 1 AND `ShipAddress` IS NULL) OR (`ShipAddress` = ?)) AND ((? = 1 AND `ShipCity` IS NULL) OR (`ShipCity` = ?)) AND ((? = 1 AND `ShipRegion` IS NULL) OR (`ShipRegion` = ?)) AND ((? = 1 AND `ShipPostalCode` IS NULL) OR (`ShipPostalCode` = ?)) AND ((? = 1 AND `ShipCountry` IS NULL) OR (`ShipCountry` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderDate", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderDate", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RequiredDate", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RequiredDate", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShippedDate", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShippedDate", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipVia", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipVia", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Freight", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Freight", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipAddress", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipAddress", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCity", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCity", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p22", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipRegion", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p23", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipRegion", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p24", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipPostalCode", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p25", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipPostalCode", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p26", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCountry", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p27", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCountry", System.Data.DataRowVersion.Original, false, null));
            this.m_adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandText = "INSERT INTO `Orders` (`CustomerID`, `EmployeeID`, `OrderDate`, `RequiredDate`, `S" +
                "hippedDate`, `ShipVia`, `Freight`, `ShipName`, `ShipAddress`, `ShipCity`, `ShipR" +
                "egion`, `ShipPostalCode`, `ShipCountry`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?" +
                ", ?, ?)";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderDate", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RequiredDate", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShippedDate", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipVia", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Freight", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipAddress", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCity", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipRegion", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipPostalCode", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCountry", System.Data.DataRowVersion.Current, false, null));
            this.m_adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandText = @"UPDATE `Orders` SET `CustomerID` = ?, `EmployeeID` = ?, `OrderDate` = ?, `RequiredDate` = ?, `ShippedDate` = ?, `ShipVia` = ?, `Freight` = ?, `ShipName` = ?, `ShipAddress` = ?, `ShipCity` = ?, `ShipRegion` = ?, `ShipPostalCode` = ?, `ShipCountry` = ? WHERE ((`OrderID` = ?) AND ((? = 1 AND `CustomerID` IS NULL) OR (`CustomerID` = ?)) AND ((? = 1 AND `EmployeeID` IS NULL) OR (`EmployeeID` = ?)) AND ((? = 1 AND `OrderDate` IS NULL) OR (`OrderDate` = ?)) AND ((? = 1 AND `RequiredDate` IS NULL) OR (`RequiredDate` = ?)) AND ((? = 1 AND `ShippedDate` IS NULL) OR (`ShippedDate` = ?)) AND ((? = 1 AND `ShipVia` IS NULL) OR (`ShipVia` = ?)) AND ((? = 1 AND `Freight` IS NULL) OR (`Freight` = ?)) AND ((? = 1 AND `ShipName` IS NULL) OR (`ShipName` = ?)) AND ((? = 1 AND `ShipAddress` IS NULL) OR (`ShipAddress` = ?)) AND ((? = 1 AND `ShipCity` IS NULL) OR (`ShipCity` = ?)) AND ((? = 1 AND `ShipRegion` IS NULL) OR (`ShipRegion` = ?)) AND ((? = 1 AND `ShipPostalCode` IS NULL) OR (`ShipPostalCode` = ?)) AND ((? = 1 AND `ShipCountry` IS NULL) OR (`ShipCountry` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderDate", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RequiredDate", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShippedDate", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipVia", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Freight", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipAddress", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCity", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipRegion", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipPostalCode", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCountry", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderDate", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderDate", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RequiredDate", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p22", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RequiredDate", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p23", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShippedDate", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p24", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShippedDate", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p25", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipVia", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p26", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipVia", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p27", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Freight", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p28", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Freight", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p29", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p30", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p31", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipAddress", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p32", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipAddress", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p33", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCity", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p34", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCity", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p35", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipRegion", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p36", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipRegion", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p37", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipPostalCode", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p38", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipPostalCode", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p39", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCountry", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p40", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipCountry", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.OleDb.OleDbConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("TestFu.Tests.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("TestFu.Tests.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("Connection2");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandText = "SELECT OrderID, CustomerID, EmployeeID, OrderDate, RequiredDate, ShippedDate, Shi" +
                "pVia, Freight, ShipName, ShipAddress, ShipCity, ShipRegion, ShipPostalCode, Ship" +
                "Country FROM Orders";
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.Text;
        }
        
        public virtual int Fill(NorthwindDataSet dataSet) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.Orders.Clear();
            }
            int returnValue = this.Adapter.Fill(dataSet);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NorthwindDataSet.OrdersDataTable dataTable) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NorthwindDataSet.OrdersDataTable GetData() {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            NorthwindDataSet.OrdersDataTable dataTable = new NorthwindDataSet.OrdersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Delete(int p1) {
            this.DeleteCommand.Parameters[0].Value = ((int)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(object p1) {
            this.DeleteCommand.Parameters[0].Value = ((object)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        public virtual int Insert(string p1, int p2, System.DateTime p3, System.DateTime p4, System.DateTime p5, int p6, decimal p7, string p8, string p9, string p10, string p11, string p12, string p13) {
            this.InsertCommand.Parameters[0].Value = ((string)(p1));
            this.InsertCommand.Parameters[1].Value = ((int)(p2));
            this.InsertCommand.Parameters[2].Value = ((System.DateTime)(p3));
            this.InsertCommand.Parameters[3].Value = ((System.DateTime)(p4));
            this.InsertCommand.Parameters[4].Value = ((System.DateTime)(p5));
            this.InsertCommand.Parameters[5].Value = ((int)(p6));
            this.InsertCommand.Parameters[6].Value = ((decimal)(p7));
            this.InsertCommand.Parameters[7].Value = ((string)(p8));
            this.InsertCommand.Parameters[8].Value = ((string)(p9));
            this.InsertCommand.Parameters[9].Value = ((string)(p10));
            this.InsertCommand.Parameters[10].Value = ((string)(p11));
            this.InsertCommand.Parameters[11].Value = ((string)(p12));
            this.InsertCommand.Parameters[12].Value = ((string)(p13));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11, object p12, object p13) {
            this.InsertCommand.Parameters[0].Value = ((object)(p1));
            this.InsertCommand.Parameters[1].Value = ((object)(p2));
            this.InsertCommand.Parameters[2].Value = ((object)(p3));
            this.InsertCommand.Parameters[3].Value = ((object)(p4));
            this.InsertCommand.Parameters[4].Value = ((object)(p5));
            this.InsertCommand.Parameters[5].Value = ((object)(p6));
            this.InsertCommand.Parameters[6].Value = ((object)(p7));
            this.InsertCommand.Parameters[7].Value = ((object)(p8));
            this.InsertCommand.Parameters[8].Value = ((object)(p9));
            this.InsertCommand.Parameters[9].Value = ((object)(p10));
            this.InsertCommand.Parameters[10].Value = ((object)(p11));
            this.InsertCommand.Parameters[11].Value = ((object)(p12));
            this.InsertCommand.Parameters[12].Value = ((object)(p13));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        public virtual int Update(string p1, int p2, System.DateTime p3, System.DateTime p4, System.DateTime p5, int p6, decimal p7, string p8, string p9, string p10, string p11, string p12, string p13, int p14) {
            this.UpdateCommand.Parameters[0].Value = ((string)(p1));
            this.UpdateCommand.Parameters[1].Value = ((int)(p2));
            this.UpdateCommand.Parameters[2].Value = ((System.DateTime)(p3));
            this.UpdateCommand.Parameters[3].Value = ((System.DateTime)(p4));
            this.UpdateCommand.Parameters[4].Value = ((System.DateTime)(p5));
            this.UpdateCommand.Parameters[5].Value = ((int)(p6));
            this.UpdateCommand.Parameters[6].Value = ((decimal)(p7));
            this.UpdateCommand.Parameters[7].Value = ((string)(p8));
            this.UpdateCommand.Parameters[8].Value = ((string)(p9));
            this.UpdateCommand.Parameters[9].Value = ((string)(p10));
            this.UpdateCommand.Parameters[10].Value = ((string)(p11));
            this.UpdateCommand.Parameters[11].Value = ((string)(p12));
            this.UpdateCommand.Parameters[12].Value = ((string)(p13));
            this.UpdateCommand.Parameters[13].Value = ((int)(p14));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11, object p12, object p13, object p14) {
            this.UpdateCommand.Parameters[0].Value = ((object)(p1));
            this.UpdateCommand.Parameters[1].Value = ((object)(p2));
            this.UpdateCommand.Parameters[2].Value = ((object)(p3));
            this.UpdateCommand.Parameters[3].Value = ((object)(p4));
            this.UpdateCommand.Parameters[4].Value = ((object)(p5));
            this.UpdateCommand.Parameters[5].Value = ((object)(p6));
            this.UpdateCommand.Parameters[6].Value = ((object)(p7));
            this.UpdateCommand.Parameters[7].Value = ((object)(p8));
            this.UpdateCommand.Parameters[8].Value = ((object)(p9));
            this.UpdateCommand.Parameters[9].Value = ((object)(p10));
            this.UpdateCommand.Parameters[10].Value = ((object)(p11));
            this.UpdateCommand.Parameters[11].Value = ((object)(p12));
            this.UpdateCommand.Parameters[12].Value = ((object)(p13));
            this.UpdateCommand.Parameters[13].Value = ((object)(p14));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        public virtual int Update(NorthwindDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Orders");
        }
        
        public virtual int Update(NorthwindDataSet.OrdersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
    
    public interface ISuppliersTableAdapter {
        
        int Fill(NorthwindDataSet dataSet);
        
        int Fill(NorthwindDataSet.SuppliersDataTable dataTable);
        
        NorthwindDataSet.SuppliersDataTable GetData();
        
        int Delete(int p1);
        
        int Delete(object p1);
        
        int Insert(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10, string p11);
        
        int Insert(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11);
        
        int Update(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10, string p11, int p12);
        
        int Update(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11, object p12);
        
        int Update(NorthwindDataSet dataSet);
        
        int Update(NorthwindDataSet.SuppliersDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public class SuppliersTableAdapter : System.ComponentModel.Component, ISuppliersTableAdapter {
        
        private System.Data.OleDb.OleDbCommand m_DeleteCommand;
        
        private System.Data.OleDb.OleDbCommand m_InsertCommand;
        
        private System.Data.OleDb.OleDbCommand m_UpdateCommand;
        
        private System.Data.OleDb.OleDbDataAdapter m_adapter;
        
        private System.Data.OleDb.OleDbConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.OleDb.OleDbTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.OleDb.OleDbCommand DeleteCommand {
            get {
                if ((this.m_DeleteCommand == null)) {
                    this.InitDeleteCommand();
                }
                return this.m_DeleteCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand InsertCommand {
            get {
                if ((this.m_InsertCommand == null)) {
                    this.InitInsertCommand();
                }
                return this.m_InsertCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand UpdateCommand {
            get {
                if ((this.m_UpdateCommand == null)) {
                    this.InitUpdateCommand();
                }
                return this.m_UpdateCommand;
            }
        }
        
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.OleDb.OleDbTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitDeleteCommand() {
            this.m_DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this.m_DeleteCommand.Connection = this.Connection;
            this.m_DeleteCommand.CommandText = "DELETE FROM `Suppliers` WHERE ((`SupplierID` = ?))";
            this.m_DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.m_DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitInsertCommand() {
            this.m_InsertCommand = new System.Data.OleDb.OleDbCommand();
            this.m_InsertCommand.Connection = this.Connection;
            this.m_InsertCommand.CommandText = "INSERT INTO `Suppliers` (`CompanyName`, `ContactName`, `ContactTitle`, `Address`," +
                " `City`, `Region`, `PostalCode`, `Country`, `Phone`, `Fax`, `HomePage`) VALUES (" +
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this.m_InsertCommand.CommandType = System.Data.CommandType.Text;
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePage", System.Data.DataRowVersion.Current, false, null));
        }
        
        private void InitUpdateCommand() {
            this.m_UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this.m_UpdateCommand.Connection = this.Connection;
            this.m_UpdateCommand.CommandText = "UPDATE `Suppliers` SET `CompanyName` = ?, `ContactName` = ?, `ContactTitle` = ?, " +
                "`Address` = ?, `City` = ?, `Region` = ?, `PostalCode` = ?, `Country` = ?, `Phone" +
                "` = ?, `Fax` = ?, `HomePage` = ? WHERE ((`SupplierID` = ?))";
            this.m_UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePage", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Suppliers";
            tableMapping.ColumnMappings.Add("SupplierID", "SupplierID");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            tableMapping.ColumnMappings.Add("ContactName", "ContactName");
            tableMapping.ColumnMappings.Add("ContactTitle", "ContactTitle");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("Region", "Region");
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode");
            tableMapping.ColumnMappings.Add("Country", "Country");
            tableMapping.ColumnMappings.Add("Phone", "Phone");
            tableMapping.ColumnMappings.Add("Fax", "Fax");
            tableMapping.ColumnMappings.Add("HomePage", "HomePage");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandText = "SELECT SupplierID, CompanyName, ContactName, ContactTitle, Address, City, Region," +
                " PostalCode, Country, Phone, Fax, HomePage FROM Suppliers";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.Text;
            this.m_adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandText = @"DELETE FROM `Suppliers` WHERE ((`SupplierID` = ?) AND ((? = 1 AND `CompanyName` IS NULL) OR (`CompanyName` = ?)) AND ((? = 1 AND `ContactName` IS NULL) OR (`ContactName` = ?)) AND ((? = 1 AND `ContactTitle` IS NULL) OR (`ContactTitle` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `Phone` IS NULL) OR (`Phone` = ?)) AND ((? = 1 AND `Fax` IS NULL) OR (`Fax` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Original, false, null));
            this.m_adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandText = "INSERT INTO `Suppliers` (`CompanyName`, `ContactName`, `ContactTitle`, `Address`," +
                " `City`, `Region`, `PostalCode`, `Country`, `Phone`, `Fax`, `HomePage`) VALUES (" +
                "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePage", System.Data.DataRowVersion.Current, false, null));
            this.m_adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandText = @"UPDATE `Suppliers` SET `CompanyName` = ?, `ContactName` = ?, `ContactTitle` = ?, `Address` = ?, `City` = ?, `Region` = ?, `PostalCode` = ?, `Country` = ?, `Phone` = ?, `Fax` = ?, `HomePage` = ? WHERE ((`SupplierID` = ?) AND ((? = 1 AND `CompanyName` IS NULL) OR (`CompanyName` = ?)) AND ((? = 1 AND `ContactName` IS NULL) OR (`ContactName` = ?)) AND ((? = 1 AND `ContactTitle` IS NULL) OR (`ContactTitle` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `Phone` IS NULL) OR (`Phone` = ?)) AND ((? = 1 AND `Fax` IS NULL) OR (`Fax` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePage", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SupplierID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p22", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p23", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p24", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p25", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p26", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p27", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p28", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p29", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p30", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p31", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p32", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.OleDb.OleDbConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("TestFu.Tests.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("TestFu.Tests.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("Connection2");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandText = "SELECT SupplierID, CompanyName, ContactName, ContactTitle, Address, City, Region," +
                " PostalCode, Country, Phone, Fax, HomePage FROM Suppliers";
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.Text;
        }
        
        public virtual int Fill(NorthwindDataSet dataSet) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.Suppliers.Clear();
            }
            int returnValue = this.Adapter.Fill(dataSet);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NorthwindDataSet.SuppliersDataTable dataTable) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NorthwindDataSet.SuppliersDataTable GetData() {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            NorthwindDataSet.SuppliersDataTable dataTable = new NorthwindDataSet.SuppliersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Delete(int p1) {
            this.DeleteCommand.Parameters[0].Value = ((int)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(object p1) {
            this.DeleteCommand.Parameters[0].Value = ((object)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        public virtual int Insert(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10, string p11) {
            this.InsertCommand.Parameters[0].Value = ((string)(p1));
            this.InsertCommand.Parameters[1].Value = ((string)(p2));
            this.InsertCommand.Parameters[2].Value = ((string)(p3));
            this.InsertCommand.Parameters[3].Value = ((string)(p4));
            this.InsertCommand.Parameters[4].Value = ((string)(p5));
            this.InsertCommand.Parameters[5].Value = ((string)(p6));
            this.InsertCommand.Parameters[6].Value = ((string)(p7));
            this.InsertCommand.Parameters[7].Value = ((string)(p8));
            this.InsertCommand.Parameters[8].Value = ((string)(p9));
            this.InsertCommand.Parameters[9].Value = ((string)(p10));
            this.InsertCommand.Parameters[10].Value = ((string)(p11));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11) {
            this.InsertCommand.Parameters[0].Value = ((object)(p1));
            this.InsertCommand.Parameters[1].Value = ((object)(p2));
            this.InsertCommand.Parameters[2].Value = ((object)(p3));
            this.InsertCommand.Parameters[3].Value = ((object)(p4));
            this.InsertCommand.Parameters[4].Value = ((object)(p5));
            this.InsertCommand.Parameters[5].Value = ((object)(p6));
            this.InsertCommand.Parameters[6].Value = ((object)(p7));
            this.InsertCommand.Parameters[7].Value = ((object)(p8));
            this.InsertCommand.Parameters[8].Value = ((object)(p9));
            this.InsertCommand.Parameters[9].Value = ((object)(p10));
            this.InsertCommand.Parameters[10].Value = ((object)(p11));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        public virtual int Update(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10, string p11, int p12) {
            this.UpdateCommand.Parameters[0].Value = ((string)(p1));
            this.UpdateCommand.Parameters[1].Value = ((string)(p2));
            this.UpdateCommand.Parameters[2].Value = ((string)(p3));
            this.UpdateCommand.Parameters[3].Value = ((string)(p4));
            this.UpdateCommand.Parameters[4].Value = ((string)(p5));
            this.UpdateCommand.Parameters[5].Value = ((string)(p6));
            this.UpdateCommand.Parameters[6].Value = ((string)(p7));
            this.UpdateCommand.Parameters[7].Value = ((string)(p8));
            this.UpdateCommand.Parameters[8].Value = ((string)(p9));
            this.UpdateCommand.Parameters[9].Value = ((string)(p10));
            this.UpdateCommand.Parameters[10].Value = ((string)(p11));
            this.UpdateCommand.Parameters[11].Value = ((int)(p12));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11, object p12) {
            this.UpdateCommand.Parameters[0].Value = ((object)(p1));
            this.UpdateCommand.Parameters[1].Value = ((object)(p2));
            this.UpdateCommand.Parameters[2].Value = ((object)(p3));
            this.UpdateCommand.Parameters[3].Value = ((object)(p4));
            this.UpdateCommand.Parameters[4].Value = ((object)(p5));
            this.UpdateCommand.Parameters[5].Value = ((object)(p6));
            this.UpdateCommand.Parameters[6].Value = ((object)(p7));
            this.UpdateCommand.Parameters[7].Value = ((object)(p8));
            this.UpdateCommand.Parameters[8].Value = ((object)(p9));
            this.UpdateCommand.Parameters[9].Value = ((object)(p10));
            this.UpdateCommand.Parameters[10].Value = ((object)(p11));
            this.UpdateCommand.Parameters[11].Value = ((object)(p12));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        public virtual int Update(NorthwindDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Suppliers");
        }
        
        public virtual int Update(NorthwindDataSet.SuppliersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
    
    public interface IShippersTableAdapter {
        
        int Fill(NorthwindDataSet dataSet);
        
        int Fill(NorthwindDataSet.ShippersDataTable dataTable);
        
        NorthwindDataSet.ShippersDataTable GetData();
        
        int Delete(int p1);
        
        int Delete(object p1);
        
        int Insert(string p1, string p2);
        
        int Insert(object p1, object p2);
        
        int Update(string p1, string p2, int p3);
        
        int Update(object p1, object p2, object p3);
        
        int Update(NorthwindDataSet dataSet);
        
        int Update(NorthwindDataSet.ShippersDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public class ShippersTableAdapter : System.ComponentModel.Component, IShippersTableAdapter {
        
        private System.Data.OleDb.OleDbCommand m_DeleteCommand;
        
        private System.Data.OleDb.OleDbCommand m_InsertCommand;
        
        private System.Data.OleDb.OleDbCommand m_UpdateCommand;
        
        private System.Data.OleDb.OleDbDataAdapter m_adapter;
        
        private System.Data.OleDb.OleDbConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.OleDb.OleDbTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.OleDb.OleDbCommand DeleteCommand {
            get {
                if ((this.m_DeleteCommand == null)) {
                    this.InitDeleteCommand();
                }
                return this.m_DeleteCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand InsertCommand {
            get {
                if ((this.m_InsertCommand == null)) {
                    this.InitInsertCommand();
                }
                return this.m_InsertCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand UpdateCommand {
            get {
                if ((this.m_UpdateCommand == null)) {
                    this.InitUpdateCommand();
                }
                return this.m_UpdateCommand;
            }
        }
        
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.OleDb.OleDbTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitDeleteCommand() {
            this.m_DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this.m_DeleteCommand.Connection = this.Connection;
            this.m_DeleteCommand.CommandText = "DELETE FROM `Shippers` WHERE ((`ShipperID` = ?))";
            this.m_DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.m_DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipperID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitInsertCommand() {
            this.m_InsertCommand = new System.Data.OleDb.OleDbCommand();
            this.m_InsertCommand.Connection = this.Connection;
            this.m_InsertCommand.CommandText = "INSERT INTO `Shippers` (`CompanyName`, `Phone`) VALUES (?, ?)";
            this.m_InsertCommand.CommandType = System.Data.CommandType.Text;
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
        }
        
        private void InitUpdateCommand() {
            this.m_UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this.m_UpdateCommand.Connection = this.Connection;
            this.m_UpdateCommand.CommandText = "UPDATE `Shippers` SET `CompanyName` = ?, `Phone` = ? WHERE ((`ShipperID` = ?))";
            this.m_UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipperID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Shippers";
            tableMapping.ColumnMappings.Add("ShipperID", "ShipperID");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            tableMapping.ColumnMappings.Add("Phone", "Phone");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandText = "SELECT ShipperID, CompanyName, Phone FROM Shippers";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.Text;
            this.m_adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandText = "DELETE FROM `Shippers` WHERE ((`ShipperID` = ?) AND ((? = 1 AND `CompanyName` IS " +
                "NULL) OR (`CompanyName` = ?)) AND ((? = 1 AND `Phone` IS NULL) OR (`Phone` = ?))" +
                ")";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipperID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, false, null));
            this.m_adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandText = "INSERT INTO `Shippers` (`CompanyName`, `Phone`) VALUES (?, ?)";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
            this.m_adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandText = "UPDATE `Shippers` SET `CompanyName` = ?, `Phone` = ? WHERE ((`ShipperID` = ?) AND" +
                " ((? = 1 AND `CompanyName` IS NULL) OR (`CompanyName` = ?)) AND ((? = 1 AND `Pho" +
                "ne` IS NULL) OR (`Phone` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ShipperID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.OleDb.OleDbConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("TestFu.Tests.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("TestFu.Tests.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("Connection2");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandText = "SELECT ShipperID, CompanyName, Phone FROM Shippers";
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.Text;
        }
        
        public virtual int Fill(NorthwindDataSet dataSet) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.Shippers.Clear();
            }
            int returnValue = this.Adapter.Fill(dataSet);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NorthwindDataSet.ShippersDataTable dataTable) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NorthwindDataSet.ShippersDataTable GetData() {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            NorthwindDataSet.ShippersDataTable dataTable = new NorthwindDataSet.ShippersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Delete(int p1) {
            this.DeleteCommand.Parameters[0].Value = ((int)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(object p1) {
            this.DeleteCommand.Parameters[0].Value = ((object)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        public virtual int Insert(string p1, string p2) {
            this.InsertCommand.Parameters[0].Value = ((string)(p1));
            this.InsertCommand.Parameters[1].Value = ((string)(p2));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(object p1, object p2) {
            this.InsertCommand.Parameters[0].Value = ((object)(p1));
            this.InsertCommand.Parameters[1].Value = ((object)(p2));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        public virtual int Update(string p1, string p2, int p3) {
            this.UpdateCommand.Parameters[0].Value = ((string)(p1));
            this.UpdateCommand.Parameters[1].Value = ((string)(p2));
            this.UpdateCommand.Parameters[2].Value = ((int)(p3));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(object p1, object p2, object p3) {
            this.UpdateCommand.Parameters[0].Value = ((object)(p1));
            this.UpdateCommand.Parameters[1].Value = ((object)(p2));
            this.UpdateCommand.Parameters[2].Value = ((object)(p3));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        public virtual int Update(NorthwindDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Shippers");
        }
        
        public virtual int Update(NorthwindDataSet.ShippersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
    
    public interface ICustomersTableAdapter {
        
        int Fill(NorthwindDataSet dataSet);
        
        int Fill(NorthwindDataSet.CustomersDataTable dataTable);
        
        NorthwindDataSet.CustomersDataTable GetData();
        
        int Delete(string p1);
        
        int Delete(object p1);
        
        int Insert(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10, string p11);
        
        int Insert(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11);
        
        int Update(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10, string p11, string p12);
        
        int Update(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11, object p12);
        
        int Update(NorthwindDataSet dataSet);
        
        int Update(NorthwindDataSet.CustomersDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public class CustomersTableAdapter : System.ComponentModel.Component, ICustomersTableAdapter {
        
        private System.Data.OleDb.OleDbCommand m_DeleteCommand;
        
        private System.Data.OleDb.OleDbCommand m_InsertCommand;
        
        private System.Data.OleDb.OleDbCommand m_UpdateCommand;
        
        private System.Data.OleDb.OleDbDataAdapter m_adapter;
        
        private System.Data.OleDb.OleDbConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.OleDb.OleDbTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.OleDb.OleDbCommand DeleteCommand {
            get {
                if ((this.m_DeleteCommand == null)) {
                    this.InitDeleteCommand();
                }
                return this.m_DeleteCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand InsertCommand {
            get {
                if ((this.m_InsertCommand == null)) {
                    this.InitInsertCommand();
                }
                return this.m_InsertCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand UpdateCommand {
            get {
                if ((this.m_UpdateCommand == null)) {
                    this.InitUpdateCommand();
                }
                return this.m_UpdateCommand;
            }
        }
        
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.OleDb.OleDbTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitDeleteCommand() {
            this.m_DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this.m_DeleteCommand.Connection = this.Connection;
            this.m_DeleteCommand.CommandText = "DELETE FROM `Customers` WHERE ((`CustomerID` = ?))";
            this.m_DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.m_DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitInsertCommand() {
            this.m_InsertCommand = new System.Data.OleDb.OleDbCommand();
            this.m_InsertCommand.Connection = this.Connection;
            this.m_InsertCommand.CommandText = "INSERT INTO `Customers` (`CustomerID`, `CompanyName`, `ContactName`, `ContactTitl" +
                "e`, `Address`, `City`, `Region`, `PostalCode`, `Country`, `Phone`, `Fax`) VALUES" +
                " (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this.m_InsertCommand.CommandType = System.Data.CommandType.Text;
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Current, false, null));
        }
        
        private void InitUpdateCommand() {
            this.m_UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this.m_UpdateCommand.Connection = this.Connection;
            this.m_UpdateCommand.CommandText = "UPDATE `Customers` SET `CustomerID` = ?, `CompanyName` = ?, `ContactName` = ?, `C" +
                "ontactTitle` = ?, `Address` = ?, `City` = ?, `Region` = ?, `PostalCode` = ?, `Co" +
                "untry` = ?, `Phone` = ?, `Fax` = ? WHERE ((`CustomerID` = ?))";
            this.m_UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Customers";
            tableMapping.ColumnMappings.Add("CustomerID", "CustomerID");
            tableMapping.ColumnMappings.Add("CompanyName", "CompanyName");
            tableMapping.ColumnMappings.Add("ContactName", "ContactName");
            tableMapping.ColumnMappings.Add("ContactTitle", "ContactTitle");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("Region", "Region");
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode");
            tableMapping.ColumnMappings.Add("Country", "Country");
            tableMapping.ColumnMappings.Add("Phone", "Phone");
            tableMapping.ColumnMappings.Add("Fax", "Fax");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandText = "SELECT CustomerID, CompanyName, ContactName, ContactTitle, Address, City, Region," +
                " PostalCode, Country, Phone, Fax FROM Customers";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.Text;
            this.m_adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandText = @"DELETE FROM `Customers` WHERE ((`CustomerID` = ?) AND ((? = 1 AND `CompanyName` IS NULL) OR (`CompanyName` = ?)) AND ((? = 1 AND `ContactName` IS NULL) OR (`ContactName` = ?)) AND ((? = 1 AND `ContactTitle` IS NULL) OR (`ContactTitle` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `Phone` IS NULL) OR (`Phone` = ?)) AND ((? = 1 AND `Fax` IS NULL) OR (`Fax` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Original, false, null));
            this.m_adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandText = "INSERT INTO `Customers` (`CustomerID`, `CompanyName`, `ContactName`, `ContactTitl" +
                "e`, `Address`, `City`, `Region`, `PostalCode`, `Country`, `Phone`, `Fax`) VALUES" +
                " (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Current, false, null));
            this.m_adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandText = @"UPDATE `Customers` SET `CustomerID` = ?, `CompanyName` = ?, `ContactName` = ?, `ContactTitle` = ?, `Address` = ?, `City` = ?, `Region` = ?, `PostalCode` = ?, `Country` = ?, `Phone` = ?, `Fax` = ? WHERE ((`CustomerID` = ?) AND ((? = 1 AND `CompanyName` IS NULL) OR (`CompanyName` = ?)) AND ((? = 1 AND `ContactName` IS NULL) OR (`ContactName` = ?)) AND ((? = 1 AND `ContactTitle` IS NULL) OR (`ContactTitle` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `Phone` IS NULL) OR (`Phone` = ?)) AND ((? = 1 AND `Fax` IS NULL) OR (`Fax` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CustomerID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CompanyName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ContactTitle", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p22", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p23", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p24", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p25", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p26", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p27", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p28", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p29", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p30", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Phone", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p31", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p32", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Fax", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.OleDb.OleDbConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("TestFu.Tests.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("TestFu.Tests.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("Connection2");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandText = "SELECT CustomerID, CompanyName, ContactName, ContactTitle, Address, City, Region," +
                " PostalCode, Country, Phone, Fax FROM Customers";
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.Text;
        }
        
        public virtual int Fill(NorthwindDataSet dataSet) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.Customers.Clear();
            }
            int returnValue = this.Adapter.Fill(dataSet);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NorthwindDataSet.CustomersDataTable dataTable) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NorthwindDataSet.CustomersDataTable GetData() {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            NorthwindDataSet.CustomersDataTable dataTable = new NorthwindDataSet.CustomersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Delete(string p1) {
            this.DeleteCommand.Parameters[0].Value = ((string)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(object p1) {
            this.DeleteCommand.Parameters[0].Value = ((object)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        public virtual int Insert(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10, string p11) {
            this.InsertCommand.Parameters[0].Value = ((string)(p1));
            this.InsertCommand.Parameters[1].Value = ((string)(p2));
            this.InsertCommand.Parameters[2].Value = ((string)(p3));
            this.InsertCommand.Parameters[3].Value = ((string)(p4));
            this.InsertCommand.Parameters[4].Value = ((string)(p5));
            this.InsertCommand.Parameters[5].Value = ((string)(p6));
            this.InsertCommand.Parameters[6].Value = ((string)(p7));
            this.InsertCommand.Parameters[7].Value = ((string)(p8));
            this.InsertCommand.Parameters[8].Value = ((string)(p9));
            this.InsertCommand.Parameters[9].Value = ((string)(p10));
            this.InsertCommand.Parameters[10].Value = ((string)(p11));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11) {
            this.InsertCommand.Parameters[0].Value = ((object)(p1));
            this.InsertCommand.Parameters[1].Value = ((object)(p2));
            this.InsertCommand.Parameters[2].Value = ((object)(p3));
            this.InsertCommand.Parameters[3].Value = ((object)(p4));
            this.InsertCommand.Parameters[4].Value = ((object)(p5));
            this.InsertCommand.Parameters[5].Value = ((object)(p6));
            this.InsertCommand.Parameters[6].Value = ((object)(p7));
            this.InsertCommand.Parameters[7].Value = ((object)(p8));
            this.InsertCommand.Parameters[8].Value = ((object)(p9));
            this.InsertCommand.Parameters[9].Value = ((object)(p10));
            this.InsertCommand.Parameters[10].Value = ((object)(p11));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        public virtual int Update(string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8, string p9, string p10, string p11, string p12) {
            this.UpdateCommand.Parameters[0].Value = ((string)(p1));
            this.UpdateCommand.Parameters[1].Value = ((string)(p2));
            this.UpdateCommand.Parameters[2].Value = ((string)(p3));
            this.UpdateCommand.Parameters[3].Value = ((string)(p4));
            this.UpdateCommand.Parameters[4].Value = ((string)(p5));
            this.UpdateCommand.Parameters[5].Value = ((string)(p6));
            this.UpdateCommand.Parameters[6].Value = ((string)(p7));
            this.UpdateCommand.Parameters[7].Value = ((string)(p8));
            this.UpdateCommand.Parameters[8].Value = ((string)(p9));
            this.UpdateCommand.Parameters[9].Value = ((string)(p10));
            this.UpdateCommand.Parameters[10].Value = ((string)(p11));
            this.UpdateCommand.Parameters[11].Value = ((string)(p12));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(object p1, object p2, object p3, object p4, object p5, object p6, object p7, object p8, object p9, object p10, object p11, object p12) {
            this.UpdateCommand.Parameters[0].Value = ((object)(p1));
            this.UpdateCommand.Parameters[1].Value = ((object)(p2));
            this.UpdateCommand.Parameters[2].Value = ((object)(p3));
            this.UpdateCommand.Parameters[3].Value = ((object)(p4));
            this.UpdateCommand.Parameters[4].Value = ((object)(p5));
            this.UpdateCommand.Parameters[5].Value = ((object)(p6));
            this.UpdateCommand.Parameters[6].Value = ((object)(p7));
            this.UpdateCommand.Parameters[7].Value = ((object)(p8));
            this.UpdateCommand.Parameters[8].Value = ((object)(p9));
            this.UpdateCommand.Parameters[9].Value = ((object)(p10));
            this.UpdateCommand.Parameters[10].Value = ((object)(p11));
            this.UpdateCommand.Parameters[11].Value = ((object)(p12));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        public virtual int Update(NorthwindDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Customers");
        }
        
        public virtual int Update(NorthwindDataSet.CustomersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
    
    public interface ICategoriesTableAdapter {
        
        int Fill(NorthwindDataSet dataSet);
        
        int Fill(NorthwindDataSet.CategoriesDataTable dataTable);
        
        NorthwindDataSet.CategoriesDataTable GetData();
        
        int Delete(int p1);
        
        int Delete(object p1);
        
        int Insert(string p1, string p2, byte[] p3);
        
        int Insert(object p1, object p2, object p3);
        
        int Update(string p1, string p2, byte[] p3, int p4);
        
        int Update(object p1, object p2, object p3, object p4);
        
        int Update(NorthwindDataSet dataSet);
        
        int Update(NorthwindDataSet.CategoriesDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public class CategoriesTableAdapter : System.ComponentModel.Component, ICategoriesTableAdapter {
        
        private System.Data.OleDb.OleDbCommand m_DeleteCommand;
        
        private System.Data.OleDb.OleDbCommand m_InsertCommand;
        
        private System.Data.OleDb.OleDbCommand m_UpdateCommand;
        
        private System.Data.OleDb.OleDbDataAdapter m_adapter;
        
        private System.Data.OleDb.OleDbConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.OleDb.OleDbTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.OleDb.OleDbCommand DeleteCommand {
            get {
                if ((this.m_DeleteCommand == null)) {
                    this.InitDeleteCommand();
                }
                return this.m_DeleteCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand InsertCommand {
            get {
                if ((this.m_InsertCommand == null)) {
                    this.InitInsertCommand();
                }
                return this.m_InsertCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand UpdateCommand {
            get {
                if ((this.m_UpdateCommand == null)) {
                    this.InitUpdateCommand();
                }
                return this.m_UpdateCommand;
            }
        }
        
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.OleDb.OleDbTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitDeleteCommand() {
            this.m_DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this.m_DeleteCommand.Connection = this.Connection;
            this.m_DeleteCommand.CommandText = "DELETE FROM `Categories` WHERE ((`CategoryID` = ?))";
            this.m_DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.m_DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitInsertCommand() {
            this.m_InsertCommand = new System.Data.OleDb.OleDbCommand();
            this.m_InsertCommand.Connection = this.Connection;
            this.m_InsertCommand.CommandText = "INSERT INTO `Categories` (`CategoryName`, `Description`, `Picture`) VALUES (?, ?," +
                " ?)";
            this.m_InsertCommand.CommandType = System.Data.CommandType.Text;
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryName", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Description", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarBinary, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Picture", System.Data.DataRowVersion.Current, false, null));
        }
        
        private void InitUpdateCommand() {
            this.m_UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this.m_UpdateCommand.Connection = this.Connection;
            this.m_UpdateCommand.CommandText = "UPDATE `Categories` SET `CategoryName` = ?, `Description` = ?, `Picture` = ? WHER" +
                "E ((`CategoryID` = ?))";
            this.m_UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryName", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Description", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarBinary, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Picture", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Categories";
            tableMapping.ColumnMappings.Add("CategoryID", "CategoryID");
            tableMapping.ColumnMappings.Add("CategoryName", "CategoryName");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("Picture", "Picture");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandText = "SELECT CategoryID, CategoryName, Description, Picture FROM Categories";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.Text;
            this.m_adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandText = "DELETE FROM `Categories` WHERE ((`CategoryID` = ?) AND ((? = 1 AND `CategoryName`" +
                " IS NULL) OR (`CategoryName` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryName", System.Data.DataRowVersion.Original, false, null));
            this.m_adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandText = "INSERT INTO `Categories` (`CategoryName`, `Description`, `Picture`) VALUES (?, ?," +
                " ?)";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Description", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarBinary, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Picture", System.Data.DataRowVersion.Current, false, null));
            this.m_adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandText = "UPDATE `Categories` SET `CategoryName` = ?, `Description` = ?, `Picture` = ? WHER" +
                "E ((`CategoryID` = ?) AND ((? = 1 AND `CategoryName` IS NULL) OR (`CategoryName`" +
                " = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Description", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarBinary, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Picture", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "CategoryName", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.OleDb.OleDbConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("TestFu.Tests.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("TestFu.Tests.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("Connection2");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandText = "SELECT CategoryID, CategoryName, Description, Picture FROM Categories";
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.Text;
        }
        
        public virtual int Fill(NorthwindDataSet dataSet) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.Categories.Clear();
            }
            int returnValue = this.Adapter.Fill(dataSet);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NorthwindDataSet.CategoriesDataTable dataTable) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NorthwindDataSet.CategoriesDataTable GetData() {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            NorthwindDataSet.CategoriesDataTable dataTable = new NorthwindDataSet.CategoriesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Delete(int p1) {
            this.DeleteCommand.Parameters[0].Value = ((int)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(object p1) {
            this.DeleteCommand.Parameters[0].Value = ((object)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        public virtual int Insert(string p1, string p2, byte[] p3) {
            this.InsertCommand.Parameters[0].Value = ((string)(p1));
            this.InsertCommand.Parameters[1].Value = ((string)(p2));
            this.InsertCommand.Parameters[2].Value = ((byte[])(p3));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(object p1, object p2, object p3) {
            this.InsertCommand.Parameters[0].Value = ((object)(p1));
            this.InsertCommand.Parameters[1].Value = ((object)(p2));
            this.InsertCommand.Parameters[2].Value = ((object)(p3));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        public virtual int Update(string p1, string p2, byte[] p3, int p4) {
            this.UpdateCommand.Parameters[0].Value = ((string)(p1));
            this.UpdateCommand.Parameters[1].Value = ((string)(p2));
            this.UpdateCommand.Parameters[2].Value = ((byte[])(p3));
            this.UpdateCommand.Parameters[3].Value = ((int)(p4));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(object p1, object p2, object p3, object p4) {
            this.UpdateCommand.Parameters[0].Value = ((object)(p1));
            this.UpdateCommand.Parameters[1].Value = ((object)(p2));
            this.UpdateCommand.Parameters[2].Value = ((object)(p3));
            this.UpdateCommand.Parameters[3].Value = ((object)(p4));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        public virtual int Update(NorthwindDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Categories");
        }
        
        public virtual int Update(NorthwindDataSet.CategoriesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
    
    public interface IOrder_DetailsTableAdapter {
        
        int Fill(NorthwindDataSet dataSet);
        
        int Fill(NorthwindDataSet.Order_DetailsDataTable dataTable);
        
        NorthwindDataSet.Order_DetailsDataTable GetData();
        
        int Delete(int p1, int p2);
        
        int Delete(object p1, object p2);
        
        int Insert(int p1, int p2, decimal p3, short p4, float p5);
        
        int Insert(object p1, object p2, object p3, object p4, object p5);
        
        int Update(int p1, int p2, decimal p3, short p4, float p5, int p6, int p7);
        
        int Update(object p1, object p2, object p3, object p4, object p5, object p6, object p7);
        
        int Update(NorthwindDataSet dataSet);
        
        int Update(NorthwindDataSet.Order_DetailsDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public class Order_DetailsTableAdapter : System.ComponentModel.Component, IOrder_DetailsTableAdapter {
        
        private System.Data.OleDb.OleDbCommand m_DeleteCommand;
        
        private System.Data.OleDb.OleDbCommand m_InsertCommand;
        
        private System.Data.OleDb.OleDbCommand m_UpdateCommand;
        
        private System.Data.OleDb.OleDbDataAdapter m_adapter;
        
        private System.Data.OleDb.OleDbConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.OleDb.OleDbTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.OleDb.OleDbCommand DeleteCommand {
            get {
                if ((this.m_DeleteCommand == null)) {
                    this.InitDeleteCommand();
                }
                return this.m_DeleteCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand InsertCommand {
            get {
                if ((this.m_InsertCommand == null)) {
                    this.InitInsertCommand();
                }
                return this.m_InsertCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand UpdateCommand {
            get {
                if ((this.m_UpdateCommand == null)) {
                    this.InitUpdateCommand();
                }
                return this.m_UpdateCommand;
            }
        }
        
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.OleDb.OleDbTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitDeleteCommand() {
            this.m_DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this.m_DeleteCommand.Connection = this.Connection;
            this.m_DeleteCommand.CommandText = "DELETE FROM `Order Details` WHERE ((`OrderID` = ?) AND (`ProductID` = ?))";
            this.m_DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.m_DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Original, false, null));
            this.m_DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitInsertCommand() {
            this.m_InsertCommand = new System.Data.OleDb.OleDbCommand();
            this.m_InsertCommand.Connection = this.Connection;
            this.m_InsertCommand.CommandText = "INSERT INTO `Order Details` (`OrderID`, `ProductID`, `UnitPrice`, `Quantity`, `Di" +
                "scount`) VALUES (?, ?, ?, ?, ?)";
            this.m_InsertCommand.CommandType = System.Data.CommandType.Text;
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Quantity", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Single, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discount", System.Data.DataRowVersion.Current, false, null));
        }
        
        private void InitUpdateCommand() {
            this.m_UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this.m_UpdateCommand.Connection = this.Connection;
            this.m_UpdateCommand.CommandText = "UPDATE `Order Details` SET `OrderID` = ?, `ProductID` = ?, `UnitPrice` = ?, `Quan" +
                "tity` = ?, `Discount` = ? WHERE ((`OrderID` = ?) AND (`ProductID` = ?))";
            this.m_UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Quantity", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Single, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discount", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Original, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Order Details";
            tableMapping.ColumnMappings.Add("OrderID", "OrderID");
            tableMapping.ColumnMappings.Add("ProductID", "ProductID");
            tableMapping.ColumnMappings.Add("UnitPrice", "UnitPrice");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("Discount", "Discount");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandText = "SELECT OrderID, ProductID, UnitPrice, Quantity, Discount FROM [Order Details]";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.Text;
            this.m_adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandText = "DELETE FROM `Order Details` WHERE ((`OrderID` = ?) AND (`ProductID` = ?) AND ((? " +
                "= 1 AND `UnitPrice` IS NULL) OR (`UnitPrice` = ?)) AND ((? = 1 AND `Quantity` IS" +
                " NULL) OR (`Quantity` = ?)) AND ((? = 1 AND `Discount` IS NULL) OR (`Discount` =" +
                " ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Quantity", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Quantity", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discount", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.Single, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discount", System.Data.DataRowVersion.Original, false, null));
            this.m_adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandText = "INSERT INTO `Order Details` (`OrderID`, `ProductID`, `UnitPrice`, `Quantity`, `Di" +
                "scount`) VALUES (?, ?, ?, ?, ?)";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Quantity", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Single, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discount", System.Data.DataRowVersion.Current, false, null));
            this.m_adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandText = @"UPDATE `Order Details` SET `OrderID` = ?, `ProductID` = ?, `UnitPrice` = ?, `Quantity` = ?, `Discount` = ? WHERE ((`OrderID` = ?) AND (`ProductID` = ?) AND ((? = 1 AND `UnitPrice` IS NULL) OR (`UnitPrice` = ?)) AND ((? = 1 AND `Quantity` IS NULL) OR (`Quantity` = ?)) AND ((? = 1 AND `Discount` IS NULL) OR (`Discount` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Quantity", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.Single, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discount", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OrderID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ProductID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "UnitPrice", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Quantity", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.SmallInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Quantity", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discount", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.Single, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Discount", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.OleDb.OleDbConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("TestFu.Tests.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("TestFu.Tests.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("Connection2");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandText = "SELECT OrderID, ProductID, UnitPrice, Quantity, Discount FROM [Order Details]";
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.Text;
        }
        
        public virtual int Fill(NorthwindDataSet dataSet) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.Order_Details.Clear();
            }
            int returnValue = this.Adapter.Fill(dataSet);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NorthwindDataSet.Order_DetailsDataTable dataTable) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NorthwindDataSet.Order_DetailsDataTable GetData() {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            NorthwindDataSet.Order_DetailsDataTable dataTable = new NorthwindDataSet.Order_DetailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Delete(int p1, int p2) {
            this.DeleteCommand.Parameters[0].Value = ((int)(p1));
            this.DeleteCommand.Parameters[1].Value = ((int)(p2));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(object p1, object p2) {
            this.DeleteCommand.Parameters[0].Value = ((object)(p1));
            this.DeleteCommand.Parameters[1].Value = ((object)(p2));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        public virtual int Insert(int p1, int p2, decimal p3, short p4, float p5) {
            this.InsertCommand.Parameters[0].Value = ((int)(p1));
            this.InsertCommand.Parameters[1].Value = ((int)(p2));
            this.InsertCommand.Parameters[2].Value = ((decimal)(p3));
            this.InsertCommand.Parameters[3].Value = ((short)(p4));
            this.InsertCommand.Parameters[4].Value = ((float)(p5));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(object p1, object p2, object p3, object p4, object p5) {
            this.InsertCommand.Parameters[0].Value = ((object)(p1));
            this.InsertCommand.Parameters[1].Value = ((object)(p2));
            this.InsertCommand.Parameters[2].Value = ((object)(p3));
            this.InsertCommand.Parameters[3].Value = ((object)(p4));
            this.InsertCommand.Parameters[4].Value = ((object)(p5));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        public virtual int Update(int p1, int p2, decimal p3, short p4, float p5, int p6, int p7) {
            this.UpdateCommand.Parameters[0].Value = ((int)(p1));
            this.UpdateCommand.Parameters[1].Value = ((int)(p2));
            this.UpdateCommand.Parameters[2].Value = ((decimal)(p3));
            this.UpdateCommand.Parameters[3].Value = ((short)(p4));
            this.UpdateCommand.Parameters[4].Value = ((float)(p5));
            this.UpdateCommand.Parameters[5].Value = ((int)(p6));
            this.UpdateCommand.Parameters[6].Value = ((int)(p7));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(object p1, object p2, object p3, object p4, object p5, object p6, object p7) {
            this.UpdateCommand.Parameters[0].Value = ((object)(p1));
            this.UpdateCommand.Parameters[1].Value = ((object)(p2));
            this.UpdateCommand.Parameters[2].Value = ((object)(p3));
            this.UpdateCommand.Parameters[3].Value = ((object)(p4));
            this.UpdateCommand.Parameters[4].Value = ((object)(p5));
            this.UpdateCommand.Parameters[5].Value = ((object)(p6));
            this.UpdateCommand.Parameters[6].Value = ((object)(p7));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        public virtual int Update(NorthwindDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Order Details");
        }
        
        public virtual int Update(NorthwindDataSet.Order_DetailsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
    
    public interface IEmployeesTableAdapter {
        
        int Fill(NorthwindDataSet dataSet);
        
        int Fill(NorthwindDataSet.EmployeesDataTable dataTable);
        
        NorthwindDataSet.EmployeesDataTable GetData();
        
        int Delete(int p1);
        
        int Delete(object p1);
        
        int Insert(
                    string p1, 
                    string p2, 
                    string p3, 
                    string p4, 
                    System.DateTime p5, 
                    System.DateTime p6, 
                    string p7, 
                    string p8, 
                    string p9, 
                    string p10, 
                    string p11, 
                    string p12, 
                    string p13, 
                    byte[] p14, 
                    string p15, 
                    int p16);
        
        int Insert(
                    object p1, 
                    object p2, 
                    object p3, 
                    object p4, 
                    object p5, 
                    object p6, 
                    object p7, 
                    object p8, 
                    object p9, 
                    object p10, 
                    object p11, 
                    object p12, 
                    object p13, 
                    object p14, 
                    object p15, 
                    object p16);
        
        int Update(
                    string p1, 
                    string p2, 
                    string p3, 
                    string p4, 
                    System.DateTime p5, 
                    System.DateTime p6, 
                    string p7, 
                    string p8, 
                    string p9, 
                    string p10, 
                    string p11, 
                    string p12, 
                    string p13, 
                    byte[] p14, 
                    string p15, 
                    int p16, 
                    int p17);
        
        int Update(
                    object p1, 
                    object p2, 
                    object p3, 
                    object p4, 
                    object p5, 
                    object p6, 
                    object p7, 
                    object p8, 
                    object p9, 
                    object p10, 
                    object p11, 
                    object p12, 
                    object p13, 
                    object p14, 
                    object p15, 
                    object p16, 
                    object p17);
        
        int Update(NorthwindDataSet dataSet);
        
        int Update(NorthwindDataSet.EmployeesDataTable dataTable);
        
        int Update(System.Data.DataRow[] dataRows);
        
        int Update(System.Data.DataRow dataRow);
    }
    
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    public class EmployeesTableAdapter : System.ComponentModel.Component, IEmployeesTableAdapter {
        
        private System.Data.OleDb.OleDbCommand m_DeleteCommand;
        
        private System.Data.OleDb.OleDbCommand m_InsertCommand;
        
        private System.Data.OleDb.OleDbCommand m_UpdateCommand;
        
        private System.Data.OleDb.OleDbDataAdapter m_adapter;
        
        private System.Data.OleDb.OleDbConnection m_connection;
        
        private System.Data.IDbCommand[] m_commandCollection;
        
        private System.Data.OleDb.OleDbTransaction m_transaction;
        
        private bool m_clearBeforeFill = true;
        
        private System.Data.OleDb.OleDbCommand DeleteCommand {
            get {
                if ((this.m_DeleteCommand == null)) {
                    this.InitDeleteCommand();
                }
                return this.m_DeleteCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand InsertCommand {
            get {
                if ((this.m_InsertCommand == null)) {
                    this.InitInsertCommand();
                }
                return this.m_InsertCommand;
            }
        }
        
        private System.Data.OleDb.OleDbCommand UpdateCommand {
            get {
                if ((this.m_UpdateCommand == null)) {
                    this.InitUpdateCommand();
                }
                return this.m_UpdateCommand;
            }
        }
        
        private System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this.m_adapter == null)) {
                    this.InitAdapter();
                }
                return this.m_adapter;
            }
        }
        
        internal System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this.m_connection == null)) {
                    this.InitConnection();
                }
                return this.m_connection;
            }
        }
        
        internal System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this.m_commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this.m_commandCollection;
            }
        }
        
        internal System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this.m_transaction;
            }
            set {
                System.Data.OleDb.OleDbTransaction oldTransaction = this.m_transaction;
                this.m_transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction == oldTransaction)) {
                        ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    if ((this.Adapter.DeleteCommand.Transaction == oldTransaction)) {
                        this.Adapter.DeleteCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    if ((this.Adapter.InsertCommand.Transaction == oldTransaction)) {
                        this.Adapter.InsertCommand.Transaction = this.m_transaction;
                    }
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    if ((this.Adapter.UpdateCommand.Transaction == oldTransaction)) {
                        this.Adapter.UpdateCommand.Transaction = this.m_transaction;
                    }
                }
            }
        }
        
        public bool ClearBeforeFill {
            get {
                return this.m_clearBeforeFill;
            }
            set {
                this.m_clearBeforeFill = value;
            }
        }
        
        private void InitDeleteCommand() {
            this.m_DeleteCommand = new System.Data.OleDb.OleDbCommand();
            this.m_DeleteCommand.Connection = this.Connection;
            this.m_DeleteCommand.CommandText = "DELETE FROM `Employees` WHERE ((`EmployeeID` = ?))";
            this.m_DeleteCommand.CommandType = System.Data.CommandType.Text;
            this.m_DeleteCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitInsertCommand() {
            this.m_InsertCommand = new System.Data.OleDb.OleDbCommand();
            this.m_InsertCommand.Connection = this.Connection;
            this.m_InsertCommand.CommandText = @"INSERT INTO `Employees` (`LastName`, `FirstName`, `Title`, `TitleOfCourtesy`, `BirthDate`, `HireDate`, `Address`, `City`, `Region`, `PostalCode`, `Country`, `HomePhone`, `Extension`, `Photo`, `Notes`, `ReportsTo`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this.m_InsertCommand.CommandType = System.Data.CommandType.Text;
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LastName", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FirstName", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Title", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TitleOfCourtesy", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BirthDate", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HireDate", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePhone", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Extension", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.VarBinary, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Photo", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Notes", System.Data.DataRowVersion.Current, false, null));
            this.m_InsertCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReportsTo", System.Data.DataRowVersion.Current, false, null));
        }
        
        private void InitUpdateCommand() {
            this.m_UpdateCommand = new System.Data.OleDb.OleDbCommand();
            this.m_UpdateCommand.Connection = this.Connection;
            this.m_UpdateCommand.CommandText = @"UPDATE `Employees` SET `LastName` = ?, `FirstName` = ?, `Title` = ?, `TitleOfCourtesy` = ?, `BirthDate` = ?, `HireDate` = ?, `Address` = ?, `City` = ?, `Region` = ?, `PostalCode` = ?, `Country` = ?, `HomePhone` = ?, `Extension` = ?, `Photo` = ?, `Notes` = ?, `ReportsTo` = ? WHERE ((`EmployeeID` = ?))";
            this.m_UpdateCommand.CommandType = System.Data.CommandType.Text;
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LastName", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FirstName", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Title", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TitleOfCourtesy", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BirthDate", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HireDate", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePhone", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Extension", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.VarBinary, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Photo", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Notes", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReportsTo", System.Data.DataRowVersion.Current, false, null));
            this.m_UpdateCommand.Parameters.Add(new System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitAdapter() {
            this.m_adapter = new System.Data.OleDb.OleDbDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Employees";
            tableMapping.ColumnMappings.Add("EmployeeID", "EmployeeID");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("TitleOfCourtesy", "TitleOfCourtesy");
            tableMapping.ColumnMappings.Add("BirthDate", "BirthDate");
            tableMapping.ColumnMappings.Add("HireDate", "HireDate");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("City", "City");
            tableMapping.ColumnMappings.Add("Region", "Region");
            tableMapping.ColumnMappings.Add("PostalCode", "PostalCode");
            tableMapping.ColumnMappings.Add("Country", "Country");
            tableMapping.ColumnMappings.Add("HomePhone", "HomePhone");
            tableMapping.ColumnMappings.Add("Extension", "Extension");
            tableMapping.ColumnMappings.Add("Photo", "Photo");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("ReportsTo", "ReportsTo");
            this.m_adapter.TableMappings.Add(tableMapping);
            this.m_adapter.SelectCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandText = "SELECT EmployeeID, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDa" +
                "te, Address, City, Region, PostalCode, Country, HomePhone, Extension, Photo, Not" +
                "es, ReportsTo FROM Employees";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.SelectCommand)).CommandType = System.Data.CommandType.Text;
            this.m_adapter.DeleteCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandText = @"DELETE FROM `Employees` WHERE ((`EmployeeID` = ?) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?)) AND ((? = 1 AND `FirstName` IS NULL) OR (`FirstName` = ?)) AND ((? = 1 AND `Title` IS NULL) OR (`Title` = ?)) AND ((? = 1 AND `TitleOfCourtesy` IS NULL) OR (`TitleOfCourtesy` = ?)) AND ((? = 1 AND `BirthDate` IS NULL) OR (`BirthDate` = ?)) AND ((? = 1 AND `HireDate` IS NULL) OR (`HireDate` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `HomePhone` IS NULL) OR (`HomePhone` = ?)) AND ((? = 1 AND `Extension` IS NULL) OR (`Extension` = ?)) AND ((? = 1 AND `ReportsTo` IS NULL) OR (`ReportsTo` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LastName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LastName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FirstName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FirstName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Title", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Title", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TitleOfCourtesy", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TitleOfCourtesy", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BirthDate", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BirthDate", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HireDate", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HireDate", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p22", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p23", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p24", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePhone", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p25", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePhone", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p26", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Extension", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p27", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Extension", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p28", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReportsTo", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.DeleteCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p29", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReportsTo", System.Data.DataRowVersion.Original, false, null));
            this.m_adapter.InsertCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandText = @"INSERT INTO `Employees` (`LastName`, `FirstName`, `Title`, `TitleOfCourtesy`, `BirthDate`, `HireDate`, `Address`, `City`, `Region`, `PostalCode`, `Country`, `HomePhone`, `Extension`, `Photo`, `Notes`, `ReportsTo`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LastName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FirstName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Title", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TitleOfCourtesy", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BirthDate", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HireDate", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePhone", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Extension", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.VarBinary, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Photo", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Notes", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.InsertCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReportsTo", System.Data.DataRowVersion.Current, false, null));
            this.m_adapter.UpdateCommand = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandText = @"UPDATE `Employees` SET `LastName` = ?, `FirstName` = ?, `Title` = ?, `TitleOfCourtesy` = ?, `BirthDate` = ?, `HireDate` = ?, `Address` = ?, `City` = ?, `Region` = ?, `PostalCode` = ?, `Country` = ?, `HomePhone` = ?, `Extension` = ?, `Photo` = ?, `Notes` = ?, `ReportsTo` = ? WHERE ((`EmployeeID` = ?) AND ((? = 1 AND `LastName` IS NULL) OR (`LastName` = ?)) AND ((? = 1 AND `FirstName` IS NULL) OR (`FirstName` = ?)) AND ((? = 1 AND `Title` IS NULL) OR (`Title` = ?)) AND ((? = 1 AND `TitleOfCourtesy` IS NULL) OR (`TitleOfCourtesy` = ?)) AND ((? = 1 AND `BirthDate` IS NULL) OR (`BirthDate` = ?)) AND ((? = 1 AND `HireDate` IS NULL) OR (`HireDate` = ?)) AND ((? = 1 AND `Address` IS NULL) OR (`Address` = ?)) AND ((? = 1 AND `City` IS NULL) OR (`City` = ?)) AND ((? = 1 AND `Region` IS NULL) OR (`Region` = ?)) AND ((? = 1 AND `PostalCode` IS NULL) OR (`PostalCode` = ?)) AND ((? = 1 AND `Country` IS NULL) OR (`Country` = ?)) AND ((? = 1 AND `HomePhone` IS NULL) OR (`HomePhone` = ?)) AND ((? = 1 AND `Extension` IS NULL) OR (`Extension` = ?)) AND ((? = 1 AND `ReportsTo` IS NULL) OR (`ReportsTo` = ?)))";
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).CommandType = System.Data.CommandType.Text;
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p1", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LastName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p2", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FirstName", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p3", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Title", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p4", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TitleOfCourtesy", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p5", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BirthDate", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p6", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HireDate", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p7", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p8", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p9", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p10", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p11", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p12", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePhone", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p13", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Extension", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p14", System.Data.OleDb.OleDbType.VarBinary, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Photo", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p15", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Notes", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p16", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReportsTo", System.Data.DataRowVersion.Current, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p17", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EmployeeID", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p18", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LastName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p19", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "LastName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p20", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FirstName", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p21", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FirstName", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p22", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Title", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p23", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Title", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p24", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TitleOfCourtesy", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p25", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TitleOfCourtesy", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p26", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BirthDate", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p27", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BirthDate", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p28", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HireDate", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p29", System.Data.OleDb.OleDbType.DBTimeStamp, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HireDate", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p30", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p31", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Address", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p32", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p33", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "City", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p34", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p35", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Region", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p36", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p37", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PostalCode", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p38", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p39", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Country", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p40", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePhone", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p41", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HomePhone", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p42", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Extension", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p43", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Extension", System.Data.DataRowVersion.Original, false, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p44", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReportsTo", System.Data.DataRowVersion.Original, true, null));
            ((System.Data.OleDb.OleDbCommand)(this.m_adapter.UpdateCommand)).Parameters.Add(new System.Data.OleDb.OleDbParameter("p45", System.Data.OleDb.OleDbType.Integer, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ReportsTo", System.Data.DataRowVersion.Original, false, null));
        }
        
        private void InitConnection() {
            this.m_connection = new System.Data.OleDb.OleDbConnection();
            string csValue = null;
            System.Type settingsType = null;
            System.ComponentModel.Design.ITypeResolutionService trs = null;
            if ((this.Site != null)) {
                trs = ((System.ComponentModel.Design.ITypeResolutionService)(this.Site.GetService(typeof(System.ComponentModel.Design.ITypeResolutionService))));
            }
            if ((trs != null)) {
                settingsType = trs.GetType("TestFu.Tests.Properties.Settings");
            }
            else {
                settingsType = System.Type.GetType("TestFu.Tests.Properties.Settings");
            }
            if ((settingsType != null)) {
                System.Reflection.PropertyInfo diProperty = settingsType.GetProperty("Value");
                System.Reflection.PropertyInfo csProperty = settingsType.GetProperty("Connection2");
                object diValue = diProperty.GetValue(null, null);
                csValue = csProperty.GetValue(diValue, null).ToString();
            }
            this.m_connection.ConnectionString = csValue;
        }
        
        private void InitCommandCollection() {
            this.m_commandCollection = new System.Data.IDbCommand[1];
            this.m_commandCollection[0] = new System.Data.OleDb.OleDbCommand();
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).Connection = this.Connection;
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandText = "SELECT EmployeeID, LastName, FirstName, Title, TitleOfCourtesy, BirthDate, HireDa" +
                "te, Address, City, Region, PostalCode, Country, HomePhone, Extension, Photo, Not" +
                "es, ReportsTo FROM Employees";
            ((System.Data.OleDb.OleDbCommand)(this.m_commandCollection[0])).CommandType = System.Data.CommandType.Text;
        }
        
        public virtual int Fill(NorthwindDataSet dataSet) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataSet.Employees.Clear();
            }
            int returnValue = this.Adapter.Fill(dataSet);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NorthwindDataSet.EmployeesDataTable dataTable) {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            if ((this.m_clearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NorthwindDataSet.EmployeesDataTable GetData() {
            this.Adapter.SelectCommand = ((System.Data.OleDb.OleDbCommand)(this.CommandCollection[0]));
            NorthwindDataSet.EmployeesDataTable dataTable = new NorthwindDataSet.EmployeesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        public virtual int Delete(int p1) {
            this.DeleteCommand.Parameters[0].Value = ((int)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(object p1) {
            this.DeleteCommand.Parameters[0].Value = ((object)(p1));
            try {
                this.DeleteCommand.Connection.Open();
                return this.DeleteCommand.ExecuteNonQuery();
            }
            finally {
                this.DeleteCommand.Connection.Close();
            }
        }
        
        public virtual int Insert(
                    string p1, 
                    string p2, 
                    string p3, 
                    string p4, 
                    System.DateTime p5, 
                    System.DateTime p6, 
                    string p7, 
                    string p8, 
                    string p9, 
                    string p10, 
                    string p11, 
                    string p12, 
                    string p13, 
                    byte[] p14, 
                    string p15, 
                    int p16) {
            this.InsertCommand.Parameters[0].Value = ((string)(p1));
            this.InsertCommand.Parameters[1].Value = ((string)(p2));
            this.InsertCommand.Parameters[2].Value = ((string)(p3));
            this.InsertCommand.Parameters[3].Value = ((string)(p4));
            this.InsertCommand.Parameters[4].Value = ((System.DateTime)(p5));
            this.InsertCommand.Parameters[5].Value = ((System.DateTime)(p6));
            this.InsertCommand.Parameters[6].Value = ((string)(p7));
            this.InsertCommand.Parameters[7].Value = ((string)(p8));
            this.InsertCommand.Parameters[8].Value = ((string)(p9));
            this.InsertCommand.Parameters[9].Value = ((string)(p10));
            this.InsertCommand.Parameters[10].Value = ((string)(p11));
            this.InsertCommand.Parameters[11].Value = ((string)(p12));
            this.InsertCommand.Parameters[12].Value = ((string)(p13));
            this.InsertCommand.Parameters[13].Value = ((byte[])(p14));
            this.InsertCommand.Parameters[14].Value = ((string)(p15));
            this.InsertCommand.Parameters[15].Value = ((int)(p16));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    object p1, 
                    object p2, 
                    object p3, 
                    object p4, 
                    object p5, 
                    object p6, 
                    object p7, 
                    object p8, 
                    object p9, 
                    object p10, 
                    object p11, 
                    object p12, 
                    object p13, 
                    object p14, 
                    object p15, 
                    object p16) {
            this.InsertCommand.Parameters[0].Value = ((object)(p1));
            this.InsertCommand.Parameters[1].Value = ((object)(p2));
            this.InsertCommand.Parameters[2].Value = ((object)(p3));
            this.InsertCommand.Parameters[3].Value = ((object)(p4));
            this.InsertCommand.Parameters[4].Value = ((object)(p5));
            this.InsertCommand.Parameters[5].Value = ((object)(p6));
            this.InsertCommand.Parameters[6].Value = ((object)(p7));
            this.InsertCommand.Parameters[7].Value = ((object)(p8));
            this.InsertCommand.Parameters[8].Value = ((object)(p9));
            this.InsertCommand.Parameters[9].Value = ((object)(p10));
            this.InsertCommand.Parameters[10].Value = ((object)(p11));
            this.InsertCommand.Parameters[11].Value = ((object)(p12));
            this.InsertCommand.Parameters[12].Value = ((object)(p13));
            this.InsertCommand.Parameters[13].Value = ((object)(p14));
            this.InsertCommand.Parameters[14].Value = ((object)(p15));
            this.InsertCommand.Parameters[15].Value = ((object)(p16));
            try {
                this.InsertCommand.Connection.Open();
                return this.InsertCommand.ExecuteNonQuery();
            }
            finally {
                this.InsertCommand.Connection.Close();
            }
        }
        
        public virtual int Update(
                    string p1, 
                    string p2, 
                    string p3, 
                    string p4, 
                    System.DateTime p5, 
                    System.DateTime p6, 
                    string p7, 
                    string p8, 
                    string p9, 
                    string p10, 
                    string p11, 
                    string p12, 
                    string p13, 
                    byte[] p14, 
                    string p15, 
                    int p16, 
                    int p17) {
            this.UpdateCommand.Parameters[0].Value = ((string)(p1));
            this.UpdateCommand.Parameters[1].Value = ((string)(p2));
            this.UpdateCommand.Parameters[2].Value = ((string)(p3));
            this.UpdateCommand.Parameters[3].Value = ((string)(p4));
            this.UpdateCommand.Parameters[4].Value = ((System.DateTime)(p5));
            this.UpdateCommand.Parameters[5].Value = ((System.DateTime)(p6));
            this.UpdateCommand.Parameters[6].Value = ((string)(p7));
            this.UpdateCommand.Parameters[7].Value = ((string)(p8));
            this.UpdateCommand.Parameters[8].Value = ((string)(p9));
            this.UpdateCommand.Parameters[9].Value = ((string)(p10));
            this.UpdateCommand.Parameters[10].Value = ((string)(p11));
            this.UpdateCommand.Parameters[11].Value = ((string)(p12));
            this.UpdateCommand.Parameters[12].Value = ((string)(p13));
            this.UpdateCommand.Parameters[13].Value = ((byte[])(p14));
            this.UpdateCommand.Parameters[14].Value = ((string)(p15));
            this.UpdateCommand.Parameters[15].Value = ((int)(p16));
            this.UpdateCommand.Parameters[16].Value = ((int)(p17));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    object p1, 
                    object p2, 
                    object p3, 
                    object p4, 
                    object p5, 
                    object p6, 
                    object p7, 
                    object p8, 
                    object p9, 
                    object p10, 
                    object p11, 
                    object p12, 
                    object p13, 
                    object p14, 
                    object p15, 
                    object p16, 
                    object p17) {
            this.UpdateCommand.Parameters[0].Value = ((object)(p1));
            this.UpdateCommand.Parameters[1].Value = ((object)(p2));
            this.UpdateCommand.Parameters[2].Value = ((object)(p3));
            this.UpdateCommand.Parameters[3].Value = ((object)(p4));
            this.UpdateCommand.Parameters[4].Value = ((object)(p5));
            this.UpdateCommand.Parameters[5].Value = ((object)(p6));
            this.UpdateCommand.Parameters[6].Value = ((object)(p7));
            this.UpdateCommand.Parameters[7].Value = ((object)(p8));
            this.UpdateCommand.Parameters[8].Value = ((object)(p9));
            this.UpdateCommand.Parameters[9].Value = ((object)(p10));
            this.UpdateCommand.Parameters[10].Value = ((object)(p11));
            this.UpdateCommand.Parameters[11].Value = ((object)(p12));
            this.UpdateCommand.Parameters[12].Value = ((object)(p13));
            this.UpdateCommand.Parameters[13].Value = ((object)(p14));
            this.UpdateCommand.Parameters[14].Value = ((object)(p15));
            this.UpdateCommand.Parameters[15].Value = ((object)(p16));
            this.UpdateCommand.Parameters[16].Value = ((object)(p17));
            try {
                this.UpdateCommand.Connection.Open();
                return this.UpdateCommand.ExecuteNonQuery();
            }
            finally {
                this.UpdateCommand.Connection.Close();
            }
        }
        
        public virtual int Update(NorthwindDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Employees");
        }
        
        public virtual int Update(NorthwindDataSet.EmployeesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
    }
}
