//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TestFu.Tests.Data {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("UserOrderProductDataSet")]
    public class UserOrderProductDataSet : System.Data.DataSet {
        
        private CategoriesDataTable tableCategories;
        
        private UsersDataTable tableUsers;
        
        private OrdersDataTable tableOrders;
        
        private ProductsDataTable tableProducts;
        
        private OrderProductsDataTable tableOrderProducts;
        
        private System.Data.DataRelation relationFK_Categories_Categories;
        
        private System.Data.DataRelation relationFK_Users_Orders;
        
        private System.Data.DataRelation relationFK_Categories_Products;
        
        private System.Data.DataRelation relationFK_Products_OrderProducts;
        
        private System.Data.DataRelation relationFK_Orders_OrderProducts;
        
        public UserOrderProductDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        protected UserOrderProductDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Categories"] != null)) {
                    base.Tables.Add(new CategoriesDataTable(ds.Tables["Categories"]));
                }
                if ((ds.Tables["Users"] != null)) {
                    base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
                }
                if ((ds.Tables["Orders"] != null)) {
                    base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
                }
                if ((ds.Tables["Products"] != null)) {
                    base.Tables.Add(new ProductsDataTable(ds.Tables["Products"]));
                }
                if ((ds.Tables["OrderProducts"] != null)) {
                    base.Tables.Add(new OrderProductsDataTable(ds.Tables["OrderProducts"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CategoriesDataTable Categories {
            get {
                return this.tableCategories;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UsersDataTable Users {
            get {
                return this.tableUsers;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrdersDataTable Orders {
            get {
                return this.tableOrders;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductsDataTable Products {
            get {
                return this.tableProducts;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OrderProductsDataTable OrderProducts {
            get {
                return this.tableOrderProducts;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        public override System.Data.DataSet Clone() {
            UserOrderProductDataSet cln = ((UserOrderProductDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Categories"] != null)) {
                base.Tables.Add(new CategoriesDataTable(ds.Tables["Categories"]));
            }
            if ((ds.Tables["Users"] != null)) {
                base.Tables.Add(new UsersDataTable(ds.Tables["Users"]));
            }
            if ((ds.Tables["Orders"] != null)) {
                base.Tables.Add(new OrdersDataTable(ds.Tables["Orders"]));
            }
            if ((ds.Tables["Products"] != null)) {
                base.Tables.Add(new ProductsDataTable(ds.Tables["Products"]));
            }
            if ((ds.Tables["OrderProducts"] != null)) {
                base.Tables.Add(new OrderProductsDataTable(ds.Tables["OrderProducts"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableCategories = ((CategoriesDataTable)(base.Tables["Categories"]));
            if ((initTable == true)) {
                if ((this.tableCategories != null)) {
                    this.tableCategories.InitVars();
                }
            }
            this.tableUsers = ((UsersDataTable)(base.Tables["Users"]));
            if ((initTable == true)) {
                if ((this.tableUsers != null)) {
                    this.tableUsers.InitVars();
                }
            }
            this.tableOrders = ((OrdersDataTable)(base.Tables["Orders"]));
            if ((initTable == true)) {
                if ((this.tableOrders != null)) {
                    this.tableOrders.InitVars();
                }
            }
            this.tableProducts = ((ProductsDataTable)(base.Tables["Products"]));
            if ((initTable == true)) {
                if ((this.tableProducts != null)) {
                    this.tableProducts.InitVars();
                }
            }
            this.tableOrderProducts = ((OrderProductsDataTable)(base.Tables["OrderProducts"]));
            if ((initTable == true)) {
                if ((this.tableOrderProducts != null)) {
                    this.tableOrderProducts.InitVars();
                }
            }
            this.relationFK_Categories_Categories = this.Relations["FK_Categories_Categories"];
            this.relationFK_Users_Orders = this.Relations["FK_Users_Orders"];
            this.relationFK_Categories_Products = this.Relations["FK_Categories_Products"];
            this.relationFK_Products_OrderProducts = this.Relations["FK_Products_OrderProducts"];
            this.relationFK_Orders_OrderProducts = this.Relations["FK_Orders_OrderProducts"];
        }
        
        private void InitClass() {
            this.DataSetName = "UserOrderProductDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UserOrderProduct.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCategories = new CategoriesDataTable();
            base.Tables.Add(this.tableCategories);
            this.tableUsers = new UsersDataTable();
            base.Tables.Add(this.tableUsers);
            this.tableOrders = new OrdersDataTable();
            base.Tables.Add(this.tableOrders);
            this.tableProducts = new ProductsDataTable();
            base.Tables.Add(this.tableProducts);
            this.tableOrderProducts = new OrderProductsDataTable();
            base.Tables.Add(this.tableOrderProducts);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_Categories_Categories", new System.Data.DataColumn[] {
                        this.tableCategories.CategoryIDColumn}, new System.Data.DataColumn[] {
                        this.tableCategories.CategoryParentIDColumn});
            this.tableCategories.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.None;
            fkc.UpdateRule = System.Data.Rule.None;
            fkc = new System.Data.ForeignKeyConstraint("FK_Users_Orders", new System.Data.DataColumn[] {
                        this.tableUsers.UserIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.UserIDColumn});
            this.tableOrders.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Categories_Products", new System.Data.DataColumn[] {
                        this.tableCategories.CategoryIDColumn}, new System.Data.DataColumn[] {
                        this.tableProducts.CategoryIDColumn});
            this.tableProducts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Products_OrderProducts", new System.Data.DataColumn[] {
                        this.tableProducts.ProductIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrderProducts.ProductIDColumn});
            this.tableOrderProducts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_Orders_OrderProducts", new System.Data.DataColumn[] {
                        this.tableOrders.OrderIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrderProducts.OrderIDColumn});
            this.tableOrderProducts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFK_Categories_Categories = new System.Data.DataRelation("FK_Categories_Categories", new System.Data.DataColumn[] {
                        this.tableCategories.CategoryIDColumn}, new System.Data.DataColumn[] {
                        this.tableCategories.CategoryParentIDColumn}, false);
            this.relationFK_Categories_Categories.Nested = true;
            this.Relations.Add(this.relationFK_Categories_Categories);
            this.relationFK_Users_Orders = new System.Data.DataRelation("FK_Users_Orders", new System.Data.DataColumn[] {
                        this.tableUsers.UserIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrders.UserIDColumn}, false);
            this.Relations.Add(this.relationFK_Users_Orders);
            this.relationFK_Categories_Products = new System.Data.DataRelation("FK_Categories_Products", new System.Data.DataColumn[] {
                        this.tableCategories.CategoryIDColumn}, new System.Data.DataColumn[] {
                        this.tableProducts.CategoryIDColumn}, false);
            this.Relations.Add(this.relationFK_Categories_Products);
            this.relationFK_Products_OrderProducts = new System.Data.DataRelation("FK_Products_OrderProducts", new System.Data.DataColumn[] {
                        this.tableProducts.ProductIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrderProducts.ProductIDColumn}, false);
            this.Relations.Add(this.relationFK_Products_OrderProducts);
            this.relationFK_Orders_OrderProducts = new System.Data.DataRelation("FK_Orders_OrderProducts", new System.Data.DataColumn[] {
                        this.tableOrders.OrderIDColumn}, new System.Data.DataColumn[] {
                        this.tableOrderProducts.OrderIDColumn}, false);
            this.Relations.Add(this.relationFK_Orders_OrderProducts);
            this.ExtendedProperties.Add("DSGenerator_DataSetName", "UserOrderProductDataSet");
            this.ExtendedProperties.Add("User_DataSetName", "UserOrderProductDataSet");
        }
        
        private bool ShouldSerializeCategories() {
            return false;
        }
        
        private bool ShouldSerializeUsers() {
            return false;
        }
        
        private bool ShouldSerializeOrders() {
            return false;
        }
        
        private bool ShouldSerializeProducts() {
            return false;
        }
        
        private bool ShouldSerializeOrderProducts() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            UserOrderProductDataSet ds = new UserOrderProductDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            if (PublishLegacyWSDL()) {
                System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
                any.Namespace = ds.Namespace;
                sequence.Items.Add(any);
            }
            else {
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(0);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                sequence.MaxOccurs = decimal.MaxValue;
                System.Xml.Schema.XmlSchemaAttribute attribute = new System.Xml.Schema.XmlSchemaAttribute();
                attribute.Name = "namespace";
                attribute.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute);
            }
            type.Particle = sequence;
            return type;
        }
        
        protected static bool PublishLegacyWSDL() {
            System.Collections.Specialized.NameValueCollection settings = ((System.Collections.Specialized.NameValueCollection)(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset")));
            if ((settings != null)) {
                string[] values = settings.GetValues("WSDL_VERSION");
                if ((values != null)) {
                    float version = float.Parse(((string)(values[0])), ((System.IFormatProvider)(null)));
                    return (version < 2);
                }
            }
            return true;
        }
        
        public delegate void CategoriesRowChangeEventHandler(object sender, CategoriesRowChangeEvent e);
        
        public delegate void UsersRowChangeEventHandler(object sender, UsersRowChangeEvent e);
        
        public delegate void OrdersRowChangeEventHandler(object sender, OrdersRowChangeEvent e);
        
        public delegate void ProductsRowChangeEventHandler(object sender, ProductsRowChangeEvent e);
        
        public delegate void OrderProductsRowChangeEventHandler(object sender, OrderProductsRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class CategoriesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCategoryID;
            
            private System.Data.DataColumn columnCateogoryName;
            
            private System.Data.DataColumn columnCategoryParentID;
            
            private bool m_suspendValidation = false;
            
            public CategoriesDataTable() {
                this.TableName = "Categories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal CategoriesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected CategoriesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            internal System.Data.DataColumn CateogoryNameColumn {
                get {
                    return this.columnCateogoryName;
                }
            }
            
            internal System.Data.DataColumn CategoryParentIDColumn {
                get {
                    return this.columnCategoryParentID;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public CategoriesRow this[int index] {
                get {
                    return ((CategoriesRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event CategoryIDChangeEventHandler CategoryIDChanging;
            
            public event CategoryIDChangeEventHandler CategoryIDChanged;
            
            public event CateogoryNameChangeEventHandler CateogoryNameChanging;
            
            public event CateogoryNameChangeEventHandler CateogoryNameChanged;
            
            public event CategoryParentIDChangeEventHandler CategoryParentIDChanging;
            
            public event CategoryParentIDChangeEventHandler CategoryParentIDChanged;
            
            public event CategoriesRowChangeEventHandler CategoriesRowChanged;
            
            public event CategoriesRowChangeEventHandler CategoriesRowChanging;
            
            public event CategoriesRowChangeEventHandler CategoriesRowDeleted;
            
            public event CategoriesRowChangeEventHandler CategoriesRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "CategoryID")) {
                    if ((this.CategoryIDChanging != null)) {
                        this.CategoryIDChanging(this, new CategoryIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CateogoryName")) {
                        if ((this.CateogoryNameChanging != null)) {
                            this.CateogoryNameChanging(this, new CateogoryNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "CategoryParentID")) {
                            if ((this.CategoryParentIDChanging != null)) {
                                this.CategoryParentIDChanging(this, new CategoryParentIDChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "CategoryID")) {
                    if ((this.CategoryIDChanged != null)) {
                        this.CategoryIDChanged(this, new CategoryIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "CateogoryName")) {
                        if ((this.CateogoryNameChanged != null)) {
                            this.CateogoryNameChanged(this, new CateogoryNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "CategoryParentID")) {
                            if ((this.CategoryParentIDChanged != null)) {
                                this.CategoryParentIDChanged(this, new CategoryParentIDChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            public void AddCategoriesRow(CategoriesRow row) {
                this.Rows.Add(row);
            }
            
            public CategoriesRow AddCategoriesRow(int CategoryID, string CateogoryName, CategoriesRow parentCategoriesRowByFK_Categories_Categories) {
                CategoriesRow rowCategoriesRow = ((CategoriesRow)(this.NewRow()));
                rowCategoriesRow.ItemArray = new object[] {
                        CategoryID,
                        CateogoryName,
                        parentCategoriesRowByFK_Categories_Categories[0]};
                this.Rows.Add(rowCategoriesRow);
                return rowCategoriesRow;
            }
            
            public CategoriesRow FindByCategoryID(int CategoryID) {
                return ((CategoriesRow)(this.Rows.Find(new object[] {
                            CategoryID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CategoriesDataTable cln = ((CategoriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CategoriesDataTable();
            }
            
            internal void InitVars() {
                this.columnCategoryID = base.Columns["CategoryID"];
                this.columnCateogoryName = base.Columns["CateogoryName"];
                this.columnCategoryParentID = base.Columns["CategoryParentID"];
            }
            
            private void InitClass() {
                this.columnCategoryID = new System.Data.DataColumn("CategoryID", typeof(int), null, System.Data.MappingType.Element);
                this.columnCategoryID.ExtendedProperties.Add("Generator_ChangedEventName", "CategoryIDChanged");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ChangingEventName", "CategoryIDChanging");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CategoryID");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CategoryIDColumn");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCategoryID");
                this.columnCategoryID.ExtendedProperties.Add("Generator_DelegateName", "CategoryIDChangeEventHandler");
                this.columnCategoryID.ExtendedProperties.Add("Generator_EventArgName", "CategoryIDChangeEventArg");
                this.columnCategoryID.ExtendedProperties.Add("User_ColumnName", "CategoryID");
                base.Columns.Add(this.columnCategoryID);
                this.columnCateogoryName = new System.Data.DataColumn("CateogoryName", typeof(string), null, System.Data.MappingType.Element);
                this.columnCateogoryName.ExtendedProperties.Add("Generator_ChangedEventName", "CateogoryNameChanged");
                this.columnCateogoryName.ExtendedProperties.Add("Generator_ChangingEventName", "CateogoryNameChanging");
                this.columnCateogoryName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CateogoryName");
                this.columnCateogoryName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CateogoryNameColumn");
                this.columnCateogoryName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCateogoryName");
                this.columnCateogoryName.ExtendedProperties.Add("Generator_DelegateName", "CateogoryNameChangeEventHandler");
                this.columnCateogoryName.ExtendedProperties.Add("Generator_EventArgName", "CateogoryNameChangeEventArg");
                this.columnCateogoryName.ExtendedProperties.Add("User_ColumnName", "CateogoryName");
                base.Columns.Add(this.columnCateogoryName);
                this.columnCategoryParentID = new System.Data.DataColumn("CategoryParentID", typeof(int), null, System.Data.MappingType.Element);
                this.columnCategoryParentID.ExtendedProperties.Add("Generator_ChangedEventName", "CategoryParentIDChanged");
                this.columnCategoryParentID.ExtendedProperties.Add("Generator_ChangingEventName", "CategoryParentIDChanging");
                this.columnCategoryParentID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CategoryParentID");
                this.columnCategoryParentID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CategoryParentIDColumn");
                this.columnCategoryParentID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCategoryParentID");
                this.columnCategoryParentID.ExtendedProperties.Add("Generator_DelegateName", "CategoryParentIDChangeEventHandler");
                this.columnCategoryParentID.ExtendedProperties.Add("Generator_EventArgName", "CategoryParentIDChangeEventArg");
                this.columnCategoryParentID.ExtendedProperties.Add("User_ColumnName", "CategoryParentID");
                base.Columns.Add(this.columnCategoryParentID);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Categories", new System.Data.DataColumn[] {
                                this.columnCategoryID}, true));
                this.columnCategoryID.AllowDBNull = false;
                this.columnCategoryID.Unique = true;
                this.Namespace = "http://tempuri.org/UserOrderProduct.xsd";
                this.ExtendedProperties.Add("Generator_RowClassName", "CategoriesRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "CategoriesRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "CategoriesRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "CategoriesDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Categories");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableCategories");
                this.ExtendedProperties.Add("User_TableName", "Categories");
            }
            
            public CategoriesRow NewCategoriesRow() {
                return ((CategoriesRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CategoriesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CategoriesRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CategoriesRowChanged != null)) {
                    this.CategoriesRowChanged(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CategoriesRowChanging != null)) {
                    this.CategoriesRowChanging(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CategoriesRowDeleted != null)) {
                    this.CategoriesRowDeleted(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CategoriesRowDeleting != null)) {
                    this.CategoriesRowDeleting(this, new CategoriesRowChangeEvent(((CategoriesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCategoriesRow(CategoriesRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                UserOrderProductDataSet ds = new UserOrderProductDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CategoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void CategoryIDChangeEventHandler(CategoriesDataTable sender, CategoryIDChangeEventArg e);
            
            public class CategoryIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CategoryIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CategoriesRow Row {
                    get {
                        return ((CategoriesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CategoryIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void CateogoryNameChangeEventHandler(CategoriesDataTable sender, CateogoryNameChangeEventArg e);
            
            public class CateogoryNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CateogoryNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CategoriesRow Row {
                    get {
                        return ((CategoriesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CateogoryNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void CategoryParentIDChangeEventHandler(CategoriesDataTable sender, CategoryParentIDChangeEventArg e);
            
            public class CategoryParentIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CategoryParentIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CategoriesRow Row {
                    get {
                        return ((CategoriesRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CategoryParentIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class UsersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserID;
            
            private System.Data.DataColumn columnUserName;
            
            private System.Data.DataColumn columnUserLastName;
            
            private System.Data.DataColumn columnUserPhotograph;
            
            private bool m_suspendValidation = false;
            
            public UsersDataTable() {
                this.TableName = "Users";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal UsersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected UsersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            internal System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            internal System.Data.DataColumn UserLastNameColumn {
                get {
                    return this.columnUserLastName;
                }
            }
            
            internal System.Data.DataColumn UserPhotographColumn {
                get {
                    return this.columnUserPhotograph;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public UsersRow this[int index] {
                get {
                    return ((UsersRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event UserIDChangeEventHandler UserIDChanging;
            
            public event UserIDChangeEventHandler UserIDChanged;
            
            public event UserNameChangeEventHandler UserNameChanging;
            
            public event UserNameChangeEventHandler UserNameChanged;
            
            public event UserLastNameChangeEventHandler UserLastNameChanging;
            
            public event UserLastNameChangeEventHandler UserLastNameChanged;
            
            public event UserPhotographChangeEventHandler UserPhotographChanging;
            
            public event UserPhotographChangeEventHandler UserPhotographChanged;
            
            public event UsersRowChangeEventHandler UsersRowChanged;
            
            public event UsersRowChangeEventHandler UsersRowChanging;
            
            public event UsersRowChangeEventHandler UsersRowDeleted;
            
            public event UsersRowChangeEventHandler UsersRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "UserID")) {
                    if ((this.UserIDChanging != null)) {
                        this.UserIDChanging(this, new UserIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "UserName")) {
                        if ((this.UserNameChanging != null)) {
                            this.UserNameChanging(this, new UserNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "UserLastName")) {
                            if ((this.UserLastNameChanging != null)) {
                                this.UserLastNameChanging(this, new UserLastNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "UserPhotograph")) {
                                if ((this.UserPhotographChanging != null)) {
                                    this.UserPhotographChanging(this, new UserPhotographChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "UserID")) {
                    if ((this.UserIDChanged != null)) {
                        this.UserIDChanged(this, new UserIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "UserName")) {
                        if ((this.UserNameChanged != null)) {
                            this.UserNameChanged(this, new UserNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "UserLastName")) {
                            if ((this.UserLastNameChanged != null)) {
                                this.UserLastNameChanged(this, new UserLastNameChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "UserPhotograph")) {
                                if ((this.UserPhotographChanged != null)) {
                                    this.UserPhotographChanged(this, new UserPhotographChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddUsersRow(UsersRow row) {
                this.Rows.Add(row);
            }
            
            public UsersRow AddUsersRow(int UserID, string UserName, string UserLastName, string UserPhotograph) {
                UsersRow rowUsersRow = ((UsersRow)(this.NewRow()));
                rowUsersRow.ItemArray = new object[] {
                        UserID,
                        UserName,
                        UserLastName,
                        UserPhotograph};
                this.Rows.Add(rowUsersRow);
                return rowUsersRow;
            }
            
            public UsersRow FindByUserID(int UserID) {
                return ((UsersRow)(this.Rows.Find(new object[] {
                            UserID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                UsersDataTable cln = ((UsersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new UsersDataTable();
            }
            
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnUserName = base.Columns["UserName"];
                this.columnUserLastName = base.Columns["UserLastName"];
                this.columnUserPhotograph = base.Columns["UserPhotograph"];
            }
            
            private void InitClass() {
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                this.columnUserID.ExtendedProperties.Add("Generator_ChangedEventName", "UserIDChanged");
                this.columnUserID.ExtendedProperties.Add("Generator_ChangingEventName", "UserIDChanging");
                this.columnUserID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UserID");
                this.columnUserID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UserIDColumn");
                this.columnUserID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUserID");
                this.columnUserID.ExtendedProperties.Add("Generator_DelegateName", "UserIDChangeEventHandler");
                this.columnUserID.ExtendedProperties.Add("Generator_EventArgName", "UserIDChangeEventArg");
                this.columnUserID.ExtendedProperties.Add("User_ColumnName", "UserID");
                base.Columns.Add(this.columnUserID);
                this.columnUserName = new System.Data.DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                this.columnUserName.ExtendedProperties.Add("Generator_ChangedEventName", "UserNameChanged");
                this.columnUserName.ExtendedProperties.Add("Generator_ChangingEventName", "UserNameChanging");
                this.columnUserName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UserName");
                this.columnUserName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UserNameColumn");
                this.columnUserName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUserName");
                this.columnUserName.ExtendedProperties.Add("Generator_DelegateName", "UserNameChangeEventHandler");
                this.columnUserName.ExtendedProperties.Add("Generator_EventArgName", "UserNameChangeEventArg");
                this.columnUserName.ExtendedProperties.Add("User_ColumnName", "UserName");
                base.Columns.Add(this.columnUserName);
                this.columnUserLastName = new System.Data.DataColumn("UserLastName", typeof(string), null, System.Data.MappingType.Element);
                this.columnUserLastName.ExtendedProperties.Add("Generator_ChangedEventName", "UserLastNameChanged");
                this.columnUserLastName.ExtendedProperties.Add("Generator_ChangingEventName", "UserLastNameChanging");
                this.columnUserLastName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UserLastName");
                this.columnUserLastName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UserLastNameColumn");
                this.columnUserLastName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUserLastName");
                this.columnUserLastName.ExtendedProperties.Add("Generator_DelegateName", "UserLastNameChangeEventHandler");
                this.columnUserLastName.ExtendedProperties.Add("Generator_EventArgName", "UserLastNameChangeEventArg");
                this.columnUserLastName.ExtendedProperties.Add("User_ColumnName", "UserLastName");
                base.Columns.Add(this.columnUserLastName);
                this.columnUserPhotograph = new System.Data.DataColumn("UserPhotograph", typeof(string), null, System.Data.MappingType.Element);
                this.columnUserPhotograph.ExtendedProperties.Add("Generator_ChangedEventName", "UserPhotographChanged");
                this.columnUserPhotograph.ExtendedProperties.Add("Generator_ChangingEventName", "UserPhotographChanging");
                this.columnUserPhotograph.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UserPhotograph");
                this.columnUserPhotograph.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UserPhotographColumn");
                this.columnUserPhotograph.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUserPhotograph");
                this.columnUserPhotograph.ExtendedProperties.Add("Generator_DelegateName", "UserPhotographChangeEventHandler");
                this.columnUserPhotograph.ExtendedProperties.Add("Generator_EventArgName", "UserPhotographChangeEventArg");
                this.columnUserPhotograph.ExtendedProperties.Add("User_ColumnName", "UserPhotograph");
                base.Columns.Add(this.columnUserPhotograph);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Users", new System.Data.DataColumn[] {
                                this.columnUserID}, true));
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "UsersRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "UsersRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "UsersRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "UsersDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Users");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableUsers");
                this.ExtendedProperties.Add("User_TableName", "Users");
            }
            
            public UsersRow NewUsersRow() {
                return ((UsersRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UsersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(UsersRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UsersRowChanged != null)) {
                    this.UsersRowChanged(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UsersRowChanging != null)) {
                    this.UsersRowChanging(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UsersRowDeleted != null)) {
                    this.UsersRowDeleted(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UsersRowDeleting != null)) {
                    this.UsersRowDeleting(this, new UsersRowChangeEvent(((UsersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveUsersRow(UsersRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                UserOrderProductDataSet ds = new UserOrderProductDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UsersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void UserIDChangeEventHandler(UsersDataTable sender, UserIDChangeEventArg e);
            
            public class UserIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UserIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public UsersRow Row {
                    get {
                        return ((UsersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UserIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void UserNameChangeEventHandler(UsersDataTable sender, UserNameChangeEventArg e);
            
            public class UserNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UserNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public UsersRow Row {
                    get {
                        return ((UsersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UserNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void UserLastNameChangeEventHandler(UsersDataTable sender, UserLastNameChangeEventArg e);
            
            public class UserLastNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UserLastNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public UsersRow Row {
                    get {
                        return ((UsersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UserLastNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void UserPhotographChangeEventHandler(UsersDataTable sender, UserPhotographChangeEventArg e);
            
            public class UserPhotographChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UserPhotographChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public UsersRow Row {
                    get {
                        return ((UsersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UserPhotographColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class OrdersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrderID;
            
            private System.Data.DataColumn columnOrderDate;
            
            private System.Data.DataColumn columnUserID;
            
            private bool m_suspendValidation = false;
            
            public OrdersDataTable() {
                this.TableName = "Orders";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal OrdersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected OrdersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn OrderIDColumn {
                get {
                    return this.columnOrderID;
                }
            }
            
            internal System.Data.DataColumn OrderDateColumn {
                get {
                    return this.columnOrderDate;
                }
            }
            
            internal System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public OrdersRow this[int index] {
                get {
                    return ((OrdersRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event OrderIDChangeEventHandler OrderIDChanging;
            
            public event OrderIDChangeEventHandler OrderIDChanged;
            
            public event OrderDateChangeEventHandler OrderDateChanging;
            
            public event OrderDateChangeEventHandler OrderDateChanged;
            
            public event UserIDChangeEventHandler UserIDChanging;
            
            public event UserIDChangeEventHandler UserIDChanged;
            
            public event OrdersRowChangeEventHandler OrdersRowChanged;
            
            public event OrdersRowChangeEventHandler OrdersRowChanging;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleted;
            
            public event OrdersRowChangeEventHandler OrdersRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "OrderID")) {
                    if ((this.OrderIDChanging != null)) {
                        this.OrderIDChanging(this, new OrderIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "OrderDate")) {
                        if ((this.OrderDateChanging != null)) {
                            this.OrderDateChanging(this, new OrderDateChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "UserID")) {
                            if ((this.UserIDChanging != null)) {
                                this.UserIDChanging(this, new UserIDChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "OrderID")) {
                    if ((this.OrderIDChanged != null)) {
                        this.OrderIDChanged(this, new OrderIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "OrderDate")) {
                        if ((this.OrderDateChanged != null)) {
                            this.OrderDateChanged(this, new OrderDateChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "UserID")) {
                            if ((this.UserIDChanged != null)) {
                                this.UserIDChanged(this, new UserIDChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            public void AddOrdersRow(OrdersRow row) {
                this.Rows.Add(row);
            }
            
            public OrdersRow AddOrdersRow(int OrderID, string OrderDate, UsersRow parentUsersRowByFK_Users_Orders) {
                OrdersRow rowOrdersRow = ((OrdersRow)(this.NewRow()));
                rowOrdersRow.ItemArray = new object[] {
                        OrderID,
                        OrderDate,
                        parentUsersRowByFK_Users_Orders[0]};
                this.Rows.Add(rowOrdersRow);
                return rowOrdersRow;
            }
            
            public OrdersRow FindByOrderID(int OrderID) {
                return ((OrdersRow)(this.Rows.Find(new object[] {
                            OrderID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                OrdersDataTable cln = ((OrdersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new OrdersDataTable();
            }
            
            internal void InitVars() {
                this.columnOrderID = base.Columns["OrderID"];
                this.columnOrderDate = base.Columns["OrderDate"];
                this.columnUserID = base.Columns["UserID"];
            }
            
            private void InitClass() {
                this.columnOrderID = new System.Data.DataColumn("OrderID", typeof(int), null, System.Data.MappingType.Element);
                this.columnOrderID.ExtendedProperties.Add("Generator_ChangedEventName", "OrderIDChanged");
                this.columnOrderID.ExtendedProperties.Add("Generator_ChangingEventName", "OrderIDChanging");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "OrderID");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OrderIDColumn");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOrderID");
                this.columnOrderID.ExtendedProperties.Add("Generator_DelegateName", "OrderIDChangeEventHandler");
                this.columnOrderID.ExtendedProperties.Add("Generator_EventArgName", "OrderIDChangeEventArg");
                this.columnOrderID.ExtendedProperties.Add("User_ColumnName", "OrderID");
                base.Columns.Add(this.columnOrderID);
                this.columnOrderDate = new System.Data.DataColumn("OrderDate", typeof(string), null, System.Data.MappingType.Element);
                this.columnOrderDate.ExtendedProperties.Add("Generator_ChangedEventName", "OrderDateChanged");
                this.columnOrderDate.ExtendedProperties.Add("Generator_ChangingEventName", "OrderDateChanging");
                this.columnOrderDate.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "OrderDate");
                this.columnOrderDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OrderDateColumn");
                this.columnOrderDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOrderDate");
                this.columnOrderDate.ExtendedProperties.Add("Generator_DelegateName", "OrderDateChangeEventHandler");
                this.columnOrderDate.ExtendedProperties.Add("Generator_EventArgName", "OrderDateChangeEventArg");
                this.columnOrderDate.ExtendedProperties.Add("User_ColumnName", "OrderDate");
                base.Columns.Add(this.columnOrderDate);
                this.columnUserID = new System.Data.DataColumn("UserID", typeof(int), null, System.Data.MappingType.Element);
                this.columnUserID.ExtendedProperties.Add("Generator_ChangedEventName", "UserIDChanged");
                this.columnUserID.ExtendedProperties.Add("Generator_ChangingEventName", "UserIDChanging");
                this.columnUserID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "UserID");
                this.columnUserID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "UserIDColumn");
                this.columnUserID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnUserID");
                this.columnUserID.ExtendedProperties.Add("Generator_DelegateName", "UserIDChangeEventHandler");
                this.columnUserID.ExtendedProperties.Add("Generator_EventArgName", "UserIDChangeEventArg");
                this.columnUserID.ExtendedProperties.Add("User_ColumnName", "UserID");
                base.Columns.Add(this.columnUserID);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Order", new System.Data.DataColumn[] {
                                this.columnOrderID}, true));
                this.columnOrderID.AllowDBNull = false;
                this.columnOrderID.Unique = true;
                this.columnUserID.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_RowClassName", "OrdersRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "OrdersRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "OrdersRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "OrdersDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Orders");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableOrders");
                this.ExtendedProperties.Add("User_TableName", "Orders");
            }
            
            public OrdersRow NewOrdersRow() {
                return ((OrdersRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrdersRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrdersRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrdersRowChanged != null)) {
                    this.OrdersRowChanged(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrdersRowChanging != null)) {
                    this.OrdersRowChanging(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrdersRowDeleted != null)) {
                    this.OrdersRowDeleted(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrdersRowDeleting != null)) {
                    this.OrdersRowDeleting(this, new OrdersRowChangeEvent(((OrdersRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrdersRow(OrdersRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                UserOrderProductDataSet ds = new UserOrderProductDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrdersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void OrderIDChangeEventHandler(OrdersDataTable sender, OrderIDChangeEventArg e);
            
            public class OrderIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public OrderIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn OrderIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void OrderDateChangeEventHandler(OrdersDataTable sender, OrderDateChangeEventArg e);
            
            public class OrderDateChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public OrderDateChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn OrderDateColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void UserIDChangeEventHandler(OrdersDataTable sender, UserIDChangeEventArg e);
            
            public class UserIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public UserIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrdersRow Row {
                    get {
                        return ((OrdersRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn UserIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class ProductsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnProductID;
            
            private System.Data.DataColumn columnProductName;
            
            private System.Data.DataColumn columnProductPrice;
            
            private System.Data.DataColumn columnCategoryID;
            
            private bool m_suspendValidation = false;
            
            public ProductsDataTable() {
                this.TableName = "Products";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal ProductsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected ProductsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            internal System.Data.DataColumn ProductNameColumn {
                get {
                    return this.columnProductName;
                }
            }
            
            internal System.Data.DataColumn ProductPriceColumn {
                get {
                    return this.columnProductPrice;
                }
            }
            
            internal System.Data.DataColumn CategoryIDColumn {
                get {
                    return this.columnCategoryID;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public ProductsRow this[int index] {
                get {
                    return ((ProductsRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event ProductIDChangeEventHandler ProductIDChanging;
            
            public event ProductIDChangeEventHandler ProductIDChanged;
            
            public event ProductNameChangeEventHandler ProductNameChanging;
            
            public event ProductNameChangeEventHandler ProductNameChanged;
            
            public event ProductPriceChangeEventHandler ProductPriceChanging;
            
            public event ProductPriceChangeEventHandler ProductPriceChanged;
            
            public event CategoryIDChangeEventHandler CategoryIDChanging;
            
            public event CategoryIDChangeEventHandler CategoryIDChanged;
            
            public event ProductsRowChangeEventHandler ProductsRowChanged;
            
            public event ProductsRowChangeEventHandler ProductsRowChanging;
            
            public event ProductsRowChangeEventHandler ProductsRowDeleted;
            
            public event ProductsRowChangeEventHandler ProductsRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ProductID")) {
                    if ((this.ProductIDChanging != null)) {
                        this.ProductIDChanging(this, new ProductIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "ProductName")) {
                        if ((this.ProductNameChanging != null)) {
                            this.ProductNameChanging(this, new ProductNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ProductPrice")) {
                            if ((this.ProductPriceChanging != null)) {
                                this.ProductPriceChanging(this, new ProductPriceChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "CategoryID")) {
                                if ((this.CategoryIDChanging != null)) {
                                    this.CategoryIDChanging(this, new CategoryIDChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "ProductID")) {
                    if ((this.ProductIDChanged != null)) {
                        this.ProductIDChanged(this, new ProductIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "ProductName")) {
                        if ((this.ProductNameChanged != null)) {
                            this.ProductNameChanged(this, new ProductNameChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "ProductPrice")) {
                            if ((this.ProductPriceChanged != null)) {
                                this.ProductPriceChanged(this, new ProductPriceChangeEventArg(e));
                            }
                        }
                        else {
                            if ((e.Column.ColumnName == "CategoryID")) {
                                if ((this.CategoryIDChanged != null)) {
                                    this.CategoryIDChanged(this, new CategoryIDChangeEventArg(e));
                                }
                            }
                        }
                    }
                }
            }
            
            public void AddProductsRow(ProductsRow row) {
                this.Rows.Add(row);
            }
            
            public ProductsRow AddProductsRow(int ProductID, string ProductName, decimal ProductPrice, CategoriesRow parentCategoriesRowByFK_Categories_Products) {
                ProductsRow rowProductsRow = ((ProductsRow)(this.NewRow()));
                rowProductsRow.ItemArray = new object[] {
                        ProductID,
                        ProductName,
                        ProductPrice,
                        parentCategoriesRowByFK_Categories_Products[0]};
                this.Rows.Add(rowProductsRow);
                return rowProductsRow;
            }
            
            public ProductsRow FindByProductID(int ProductID) {
                return ((ProductsRow)(this.Rows.Find(new object[] {
                            ProductID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                ProductsDataTable cln = ((ProductsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new ProductsDataTable();
            }
            
            internal void InitVars() {
                this.columnProductID = base.Columns["ProductID"];
                this.columnProductName = base.Columns["ProductName"];
                this.columnProductPrice = base.Columns["ProductPrice"];
                this.columnCategoryID = base.Columns["CategoryID"];
            }
            
            private void InitClass() {
                this.columnProductID = new System.Data.DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.columnProductID.ExtendedProperties.Add("Generator_ChangedEventName", "ProductIDChanged");
                this.columnProductID.ExtendedProperties.Add("Generator_ChangingEventName", "ProductIDChanging");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ProductID");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ProductIDColumn");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnProductID");
                this.columnProductID.ExtendedProperties.Add("Generator_DelegateName", "ProductIDChangeEventHandler");
                this.columnProductID.ExtendedProperties.Add("Generator_EventArgName", "ProductIDChangeEventArg");
                this.columnProductID.ExtendedProperties.Add("User_ColumnName", "ProductID");
                base.Columns.Add(this.columnProductID);
                this.columnProductName = new System.Data.DataColumn("ProductName", typeof(string), null, System.Data.MappingType.Element);
                this.columnProductName.ExtendedProperties.Add("Generator_ChangedEventName", "ProductNameChanged");
                this.columnProductName.ExtendedProperties.Add("Generator_ChangingEventName", "ProductNameChanging");
                this.columnProductName.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ProductName");
                this.columnProductName.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ProductNameColumn");
                this.columnProductName.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnProductName");
                this.columnProductName.ExtendedProperties.Add("Generator_DelegateName", "ProductNameChangeEventHandler");
                this.columnProductName.ExtendedProperties.Add("Generator_EventArgName", "ProductNameChangeEventArg");
                this.columnProductName.ExtendedProperties.Add("User_ColumnName", "ProductName");
                base.Columns.Add(this.columnProductName);
                this.columnProductPrice = new System.Data.DataColumn("ProductPrice", typeof(decimal), null, System.Data.MappingType.Element);
                this.columnProductPrice.ExtendedProperties.Add("Generator_ChangedEventName", "ProductPriceChanged");
                this.columnProductPrice.ExtendedProperties.Add("Generator_ChangingEventName", "ProductPriceChanging");
                this.columnProductPrice.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ProductPrice");
                this.columnProductPrice.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ProductPriceColumn");
                this.columnProductPrice.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnProductPrice");
                this.columnProductPrice.ExtendedProperties.Add("Generator_DelegateName", "ProductPriceChangeEventHandler");
                this.columnProductPrice.ExtendedProperties.Add("Generator_EventArgName", "ProductPriceChangeEventArg");
                this.columnProductPrice.ExtendedProperties.Add("User_ColumnName", "ProductPrice");
                base.Columns.Add(this.columnProductPrice);
                this.columnCategoryID = new System.Data.DataColumn("CategoryID", typeof(int), null, System.Data.MappingType.Element);
                this.columnCategoryID.ExtendedProperties.Add("Generator_ChangedEventName", "CategoryIDChanged");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ChangingEventName", "CategoryIDChanging");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CategoryID");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CategoryIDColumn");
                this.columnCategoryID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCategoryID");
                this.columnCategoryID.ExtendedProperties.Add("Generator_DelegateName", "CategoryIDChangeEventHandler");
                this.columnCategoryID.ExtendedProperties.Add("Generator_EventArgName", "CategoryIDChangeEventArg");
                this.columnCategoryID.ExtendedProperties.Add("User_ColumnName", "CategoryID");
                base.Columns.Add(this.columnCategoryID);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Products", new System.Data.DataColumn[] {
                                this.columnProductID}, true));
                this.columnProductID.AllowDBNull = false;
                this.columnProductID.Unique = true;
                this.columnProductName.AllowDBNull = false;
                this.columnProductPrice.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_RowClassName", "ProductsRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ProductsRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ProductsRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "ProductsDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "Products");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableProducts");
                this.ExtendedProperties.Add("User_TableName", "Products");
            }
            
            public ProductsRow NewProductsRow() {
                return ((ProductsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ProductsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ProductsRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProductsRowChanged != null)) {
                    this.ProductsRowChanged(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProductsRowChanging != null)) {
                    this.ProductsRowChanging(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProductsRowDeleted != null)) {
                    this.ProductsRowDeleted(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProductsRowDeleting != null)) {
                    this.ProductsRowDeleting(this, new ProductsRowChangeEvent(((ProductsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveProductsRow(ProductsRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                UserOrderProductDataSet ds = new UserOrderProductDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void ProductIDChangeEventHandler(ProductsDataTable sender, ProductIDChangeEventArg e);
            
            public class ProductIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ProductIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ProductIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void ProductNameChangeEventHandler(ProductsDataTable sender, ProductNameChangeEventArg e);
            
            public class ProductNameChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ProductNameChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ProductNameColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void ProductPriceChangeEventHandler(ProductsDataTable sender, ProductPriceChangeEventArg e);
            
            public class ProductPriceChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ProductPriceChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ProductPriceColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public decimal ProposedValue {
                    get {
                        return ((decimal)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((decimal)(value));
                    }
                }
            }
            
            public delegate void CategoryIDChangeEventHandler(ProductsDataTable sender, CategoryIDChangeEventArg e);
            
            public class CategoryIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CategoryIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ProductsRow Row {
                    get {
                        return ((ProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CategoryIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class OrderProductsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnOrderID;
            
            private System.Data.DataColumn columnProductID;
            
            private System.Data.DataColumn columnQuantity;
            
            private bool m_suspendValidation = false;
            
            public OrderProductsDataTable() {
                this.TableName = "OrderProducts";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal OrderProductsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected OrderProductsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn OrderIDColumn {
                get {
                    return this.columnOrderID;
                }
            }
            
            internal System.Data.DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            internal System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public OrderProductsRow this[int index] {
                get {
                    return ((OrderProductsRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event OrderIDChangeEventHandler OrderIDChanging;
            
            public event OrderIDChangeEventHandler OrderIDChanged;
            
            public event ProductIDChangeEventHandler ProductIDChanging;
            
            public event ProductIDChangeEventHandler ProductIDChanged;
            
            public event QuantityChangeEventHandler QuantityChanging;
            
            public event QuantityChangeEventHandler QuantityChanged;
            
            public event OrderProductsRowChangeEventHandler OrderProductsRowChanged;
            
            public event OrderProductsRowChangeEventHandler OrderProductsRowChanging;
            
            public event OrderProductsRowChangeEventHandler OrderProductsRowDeleted;
            
            public event OrderProductsRowChangeEventHandler OrderProductsRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "OrderID")) {
                    if ((this.OrderIDChanging != null)) {
                        this.OrderIDChanging(this, new OrderIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "ProductID")) {
                        if ((this.ProductIDChanging != null)) {
                            this.ProductIDChanging(this, new ProductIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "Quantity")) {
                            if ((this.QuantityChanging != null)) {
                                this.QuantityChanging(this, new QuantityChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "OrderID")) {
                    if ((this.OrderIDChanged != null)) {
                        this.OrderIDChanged(this, new OrderIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "ProductID")) {
                        if ((this.ProductIDChanged != null)) {
                            this.ProductIDChanged(this, new ProductIDChangeEventArg(e));
                        }
                    }
                    else {
                        if ((e.Column.ColumnName == "Quantity")) {
                            if ((this.QuantityChanged != null)) {
                                this.QuantityChanged(this, new QuantityChangeEventArg(e));
                            }
                        }
                    }
                }
            }
            
            public void AddOrderProductsRow(OrderProductsRow row) {
                this.Rows.Add(row);
            }
            
            public OrderProductsRow AddOrderProductsRow(OrdersRow parentOrdersRowByFK_Orders_OrderProducts, ProductsRow parentProductsRowByFK_Products_OrderProducts, int Quantity) {
                OrderProductsRow rowOrderProductsRow = ((OrderProductsRow)(this.NewRow()));
                rowOrderProductsRow.ItemArray = new object[] {
                        parentOrdersRowByFK_Orders_OrderProducts[0],
                        parentProductsRowByFK_Products_OrderProducts[0],
                        Quantity};
                this.Rows.Add(rowOrderProductsRow);
                return rowOrderProductsRow;
            }
            
            public OrderProductsRow FindByOrderIDProductID(int OrderID, int ProductID) {
                return ((OrderProductsRow)(this.Rows.Find(new object[] {
                            OrderID,
                            ProductID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                OrderProductsDataTable cln = ((OrderProductsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new OrderProductsDataTable();
            }
            
            internal void InitVars() {
                this.columnOrderID = base.Columns["OrderID"];
                this.columnProductID = base.Columns["ProductID"];
                this.columnQuantity = base.Columns["Quantity"];
            }
            
            private void InitClass() {
                this.columnOrderID = new System.Data.DataColumn("OrderID", typeof(int), null, System.Data.MappingType.Element);
                this.columnOrderID.ExtendedProperties.Add("Generator_ChangedEventName", "OrderIDChanged");
                this.columnOrderID.ExtendedProperties.Add("Generator_ChangingEventName", "OrderIDChanging");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "OrderID");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OrderIDColumn");
                this.columnOrderID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOrderID");
                this.columnOrderID.ExtendedProperties.Add("Generator_DelegateName", "OrderIDChangeEventHandler");
                this.columnOrderID.ExtendedProperties.Add("Generator_EventArgName", "OrderIDChangeEventArg");
                this.columnOrderID.ExtendedProperties.Add("User_ColumnName", "OrderID");
                base.Columns.Add(this.columnOrderID);
                this.columnProductID = new System.Data.DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.columnProductID.ExtendedProperties.Add("Generator_ChangedEventName", "ProductIDChanged");
                this.columnProductID.ExtendedProperties.Add("Generator_ChangingEventName", "ProductIDChanging");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "ProductID");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ProductIDColumn");
                this.columnProductID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnProductID");
                this.columnProductID.ExtendedProperties.Add("Generator_DelegateName", "ProductIDChangeEventHandler");
                this.columnProductID.ExtendedProperties.Add("Generator_EventArgName", "ProductIDChangeEventArg");
                this.columnProductID.ExtendedProperties.Add("User_ColumnName", "ProductID");
                base.Columns.Add(this.columnProductID);
                this.columnQuantity = new System.Data.DataColumn("Quantity", typeof(int), null, System.Data.MappingType.Element);
                this.columnQuantity.ExtendedProperties.Add("Generator_ChangedEventName", "QuantityChanged");
                this.columnQuantity.ExtendedProperties.Add("Generator_ChangingEventName", "QuantityChanging");
                this.columnQuantity.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Quantity");
                this.columnQuantity.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "QuantityColumn");
                this.columnQuantity.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnQuantity");
                this.columnQuantity.ExtendedProperties.Add("Generator_DelegateName", "QuantityChangeEventHandler");
                this.columnQuantity.ExtendedProperties.Add("Generator_EventArgName", "QuantityChangeEventArg");
                this.columnQuantity.ExtendedProperties.Add("User_ColumnName", "Quantity");
                base.Columns.Add(this.columnQuantity);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_OrderProductsOrder", new System.Data.DataColumn[] {
                                this.columnOrderID,
                                this.columnProductID}, true));
                this.columnOrderID.AllowDBNull = false;
                this.columnProductID.AllowDBNull = false;
                this.columnQuantity.AllowDBNull = false;
                this.columnQuantity.DefaultValue = ((int)(0));
                this.ExtendedProperties.Add("Generator_RowClassName", "OrderProductsRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "OrderProductsRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "OrderProductsRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "OrderProductsDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "OrderProducts");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableOrderProducts");
                this.ExtendedProperties.Add("User_TableName", "OrderProducts");
            }
            
            public OrderProductsRow NewOrderProductsRow() {
                return ((OrderProductsRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new OrderProductsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(OrderProductsRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OrderProductsRowChanged != null)) {
                    this.OrderProductsRowChanged(this, new OrderProductsRowChangeEvent(((OrderProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OrderProductsRowChanging != null)) {
                    this.OrderProductsRowChanging(this, new OrderProductsRowChangeEvent(((OrderProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OrderProductsRowDeleted != null)) {
                    this.OrderProductsRowDeleted(this, new OrderProductsRowChangeEvent(((OrderProductsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OrderProductsRowDeleting != null)) {
                    this.OrderProductsRowDeleting(this, new OrderProductsRowChangeEvent(((OrderProductsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveOrderProductsRow(OrderProductsRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                UserOrderProductDataSet ds = new UserOrderProductDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OrderProductsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void OrderIDChangeEventHandler(OrderProductsDataTable sender, OrderIDChangeEventArg e);
            
            public class OrderIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public OrderIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrderProductsRow Row {
                    get {
                        return ((OrderProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn OrderIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void ProductIDChangeEventHandler(OrderProductsDataTable sender, ProductIDChangeEventArg e);
            
            public class ProductIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public ProductIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrderProductsRow Row {
                    get {
                        return ((OrderProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn ProductIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
            
            public delegate void QuantityChangeEventHandler(OrderProductsDataTable sender, QuantityChangeEventArg e);
            
            public class QuantityChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public QuantityChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public OrderProductsRow Row {
                    get {
                        return ((OrderProductsRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn QuantityColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public int ProposedValue {
                    get {
                        return ((int)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((int)(value));
                    }
                }
            }
        }
        
        public class CategoriesRow : System.Data.DataRow {
            
            private CategoriesDataTable tableCategories;
            
            internal CategoriesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategories = ((CategoriesDataTable)(this.Table));
            }
            
            public int CategoryID {
                get {
                    return ((int)(this[this.tableCategories.CategoryIDColumn]));
                }
                set {
                    this[this.tableCategories.CategoryIDColumn] = value;
                }
            }
            
            public string CateogoryName {
                get {
                    try {
                        return ((string)(this[this.tableCategories.CateogoryNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCategories.CateogoryNameColumn] = value;
                }
            }
            
            public int CategoryParentID {
                get {
                    try {
                        return ((int)(this[this.tableCategories.CategoryParentIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableCategories.CategoryParentIDColumn] = value;
                }
            }
            
            public CategoriesRow CategoriesRowParent {
                get {
                    return ((CategoriesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Categories_Categories"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Categories_Categories"]);
                }
            }
            
            public bool IsCateogoryNameNull() {
                return this.IsNull(this.tableCategories.CateogoryNameColumn);
            }
            
            public void SetCateogoryNameNull() {
                this[this.tableCategories.CateogoryNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsCategoryParentIDNull() {
                return this.IsNull(this.tableCategories.CategoryParentIDColumn);
            }
            
            public void SetCategoryParentIDNull() {
                this[this.tableCategories.CategoryParentIDColumn] = System.Convert.DBNull;
            }
            
            public CategoriesRow[] GetCategoriesRows() {
                return ((CategoriesRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Categories_Categories"])));
            }
            
            public ProductsRow[] GetProductsRows() {
                return ((ProductsRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Categories_Products"])));
            }
        }
        
        public class UsersRow : System.Data.DataRow {
            
            private UsersDataTable tableUsers;
            
            internal UsersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUsers = ((UsersDataTable)(this.Table));
            }
            
            public int UserID {
                get {
                    return ((int)(this[this.tableUsers.UserIDColumn]));
                }
                set {
                    this[this.tableUsers.UserIDColumn] = value;
                }
            }
            
            public string UserName {
                get {
                    try {
                        return ((string)(this[this.tableUsers.UserNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableUsers.UserNameColumn] = value;
                }
            }
            
            public string UserLastName {
                get {
                    try {
                        return ((string)(this[this.tableUsers.UserLastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableUsers.UserLastNameColumn] = value;
                }
            }
            
            public string UserPhotograph {
                get {
                    try {
                        return ((string)(this[this.tableUsers.UserPhotographColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableUsers.UserPhotographColumn] = value;
                }
            }
            
            public bool IsUserNameNull() {
                return this.IsNull(this.tableUsers.UserNameColumn);
            }
            
            public void SetUserNameNull() {
                this[this.tableUsers.UserNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserLastNameNull() {
                return this.IsNull(this.tableUsers.UserLastNameColumn);
            }
            
            public void SetUserLastNameNull() {
                this[this.tableUsers.UserLastNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserPhotographNull() {
                return this.IsNull(this.tableUsers.UserPhotographColumn);
            }
            
            public void SetUserPhotographNull() {
                this[this.tableUsers.UserPhotographColumn] = System.Convert.DBNull;
            }
            
            public OrdersRow[] GetOrdersRows() {
                return ((OrdersRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Users_Orders"])));
            }
        }
        
        public class OrdersRow : System.Data.DataRow {
            
            private OrdersDataTable tableOrders;
            
            internal OrdersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrders = ((OrdersDataTable)(this.Table));
            }
            
            public int OrderID {
                get {
                    return ((int)(this[this.tableOrders.OrderIDColumn]));
                }
                set {
                    this[this.tableOrders.OrderIDColumn] = value;
                }
            }
            
            public string OrderDate {
                get {
                    try {
                        return ((string)(this[this.tableOrders.OrderDateColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableOrders.OrderDateColumn] = value;
                }
            }
            
            public int UserID {
                get {
                    return ((int)(this[this.tableOrders.UserIDColumn]));
                }
                set {
                    this[this.tableOrders.UserIDColumn] = value;
                }
            }
            
            public UsersRow UsersRow {
                get {
                    return ((UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Users_Orders"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Users_Orders"]);
                }
            }
            
            public bool IsOrderDateNull() {
                return this.IsNull(this.tableOrders.OrderDateColumn);
            }
            
            public void SetOrderDateNull() {
                this[this.tableOrders.OrderDateColumn] = System.Convert.DBNull;
            }
            
            public OrderProductsRow[] GetOrderProductsRows() {
                return ((OrderProductsRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Orders_OrderProducts"])));
            }
        }
        
        public class ProductsRow : System.Data.DataRow {
            
            private ProductsDataTable tableProducts;
            
            internal ProductsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProducts = ((ProductsDataTable)(this.Table));
            }
            
            public int ProductID {
                get {
                    return ((int)(this[this.tableProducts.ProductIDColumn]));
                }
                set {
                    this[this.tableProducts.ProductIDColumn] = value;
                }
            }
            
            public string ProductName {
                get {
                    return ((string)(this[this.tableProducts.ProductNameColumn]));
                }
                set {
                    this[this.tableProducts.ProductNameColumn] = value;
                }
            }
            
            public decimal ProductPrice {
                get {
                    return ((decimal)(this[this.tableProducts.ProductPriceColumn]));
                }
                set {
                    this[this.tableProducts.ProductPriceColumn] = value;
                }
            }
            
            public int CategoryID {
                get {
                    try {
                        return ((int)(this[this.tableProducts.CategoryIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableProducts.CategoryIDColumn] = value;
                }
            }
            
            public CategoriesRow CategoriesRow {
                get {
                    return ((CategoriesRow)(this.GetParentRow(this.Table.ParentRelations["FK_Categories_Products"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Categories_Products"]);
                }
            }
            
            public bool IsCategoryIDNull() {
                return this.IsNull(this.tableProducts.CategoryIDColumn);
            }
            
            public void SetCategoryIDNull() {
                this[this.tableProducts.CategoryIDColumn] = System.Convert.DBNull;
            }
            
            public OrderProductsRow[] GetOrderProductsRows() {
                return ((OrderProductsRow[])(this.GetChildRows(this.Table.ChildRelations["FK_Products_OrderProducts"])));
            }
        }
        
        public class OrderProductsRow : System.Data.DataRow {
            
            private OrderProductsDataTable tableOrderProducts;
            
            internal OrderProductsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOrderProducts = ((OrderProductsDataTable)(this.Table));
            }
            
            public int OrderID {
                get {
                    return ((int)(this[this.tableOrderProducts.OrderIDColumn]));
                }
                set {
                    this[this.tableOrderProducts.OrderIDColumn] = value;
                }
            }
            
            public int ProductID {
                get {
                    return ((int)(this[this.tableOrderProducts.ProductIDColumn]));
                }
                set {
                    this[this.tableOrderProducts.ProductIDColumn] = value;
                }
            }
            
            public int Quantity {
                get {
                    return ((int)(this[this.tableOrderProducts.QuantityColumn]));
                }
                set {
                    this[this.tableOrderProducts.QuantityColumn] = value;
                }
            }
            
            public ProductsRow ProductsRow {
                get {
                    return ((ProductsRow)(this.GetParentRow(this.Table.ParentRelations["FK_Products_OrderProducts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Products_OrderProducts"]);
                }
            }
            
            public OrdersRow OrdersRow {
                get {
                    return ((OrdersRow)(this.GetParentRow(this.Table.ParentRelations["FK_Orders_OrderProducts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Orders_OrderProducts"]);
                }
            }
        }
        
        public class CategoriesRowChangeEvent : System.EventArgs {
            
            private CategoriesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CategoriesRowChangeEvent(CategoriesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CategoriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class UsersRowChangeEvent : System.EventArgs {
            
            private UsersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public UsersRowChangeEvent(UsersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public UsersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class OrdersRowChangeEvent : System.EventArgs {
            
            private OrdersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public OrdersRowChangeEvent(OrdersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrdersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class ProductsRowChangeEvent : System.EventArgs {
            
            private ProductsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ProductsRowChangeEvent(ProductsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ProductsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class OrderProductsRowChangeEvent : System.EventArgs {
            
            private OrderProductsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public OrderProductsRowChangeEvent(OrderProductsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public OrderProductsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
