// MbUnit Test Framework
// 
// Copyright (c) 2004 Jonathan de Halleux
//
// This software is provided 'as-is', without any express or implied warranty. 
// 
// In no event will the authors be held liable for any damages arising from 
// the use of this software.
// Permission is granted to anyone to use this software for any purpose, 
// including commercial applications, and to alter it and redistribute it 
// freely, subject to the following restrictions:
//
//		1. The origin of this software must not be misrepresented; 
//		you must not claim that you wrote the original software. 
//		If you use this software in a product, an acknowledgment in the product 
//		documentation would be appreciated but is not required.
//
//		2. Altered source versions must be plainly marked as such, and must 
//		not be misrepresented as being the original software.
//
//		3. This notice may not be removed or altered from any source 
//		distribution.
//		
//		MbUnit HomePage: http://www.mbunit.org
//		Author: Jonathan de Halleux


namespace MbUnit.Core.Runs
{
	using System;
	
	using MbUnit.Core.Invokers;
	
	using QuickGraph.Concepts;
	using QuickGraph.Concepts.Modifications;
	using QuickGraph.Concepts.Serialization;
	
	/// <summary>
	/// </summary>
	public abstract class Run : IRun
	{
		private string name=null;
		private bool isTest = true;
		
		protected Run()
		{}

		protected Run(string name, bool isTest)
		{
			this.name =name;
			this.isTest = isTest;
		}
		
		/// <summary>
		/// Gets a descriptive name of the <see cref="IRun"/>
		/// </summary>
		/// <value>
		/// A descriptive name of the <see cref="IRun"/>
		/// </value>
		public virtual string Name 
		{
			get
			{
				return this.name;
			}
			set
			{
				this.name = value;
			}			
		}
				
		/// <summary>
		/// Gets a value indicating the run is considered as a test or not.
		/// </summary>
		/// <value>
		/// true if the <see cref="IRun"/> instance is a test
		/// </value>		
		public virtual bool IsTest
		{
			get
			{
				return this.isTest;
			}
			set
			{
				this.isTest = value;
			}
		}

		/// <summary>
		/// Populates the <see cref="RunInvokerTree"/> invoker graph
		/// with <see cref="IRunInvoker"/> generated by the run.
		/// </summary>
		/// <param name="tree">Invoker tree</param>
		/// <param name="parent">parent vertex</param>
		/// <param name="t">class type that is marked by the run</param>
		/// <remarks>
		/// TODO
		/// </remarks>
		public abstract void Reflect(RunInvokerTree tree, RunInvokerVertex parent, Type t);
	}
}
