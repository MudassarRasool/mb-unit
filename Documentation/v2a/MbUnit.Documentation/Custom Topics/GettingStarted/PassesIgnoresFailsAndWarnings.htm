<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
   <title>Passes, Ignores, Fails and Warnings</title>
   <link href="../Styles/MbUnitDocs.css" rel="stylesheet" type="text/css" />
</head>
<body>
   <h1>
      Passes, Ignores, Fails and Warnings</h1>
   <p>
      When writing tests, you should always think in black and white. Or red and green
      if you <a href="MbUnitGUI.htm">the GUI test runner</a>. All tests should pass and
      fail and that should be that.</p>
   <p>
      Of course, there are times where shades of grey (or yellow in the GUI case) may
      appear because we want the test runner not to run all the tests in a fixture. It
      may take too long Alternatively, we may want to write a test that passes for now
      but leaves a warning that things will change in the future. MbUnit provides for
      these grey areas with the [Ignore] attribute for tests and Assert.Warning().</p>
   <h2>
      Flagging Tests To Be Ignored</h2>
   <p>
      To tell the MbUnit test runner to ignore a test during its run, simply adorn a test
      method with the [Ignore] attribute as follows.</p>
   <pre class="csharpcode">      [Ignore]
      [TestCategory(<span class="str">"Category1"</span>)]
      [Row(5)]
      [Row(10)]
      [RowTest]
      <span class="kwrd">public</span> <span class="kwrd">void</span> ToFizzBuzz_SendNumberDivisibleBy5ButNot3_ReturnsBuzz(<span
         class="kwrd">int</span> NumberToTest)
      {
         Assert.AreEqual(<span class="str">"buzz"</span>, FizzBuzz.FizzBuzz.ToFizzBuzz(NumberToTest));
      }</pre>
   <p>
      If you&#8217;re using the <a href="MbUnitGUI.htm">GUI runner</a> tests that were
      ignored will be indicated in yellow rather than red or green.</p>
   <p>
      <a href="../Images/Ignores[1].png" target="_blank" title="Display this image at full size">
         <img src="../Images/Ignores[1]Thumbnail.png" alt="MbUnit GUI runner showing ignored tests. Click this thumbnail image to show full size image" /></a></p>
   <p>
      If you&#8217;re using the <a href="MbUnitConsoleRunner.htm">console runner</a> the
      ignored tests will be tallied and displayed in the output and any report you choose
      to generate.</p>
   <h2>
      Putting Warnings Into Your Tests</h2>
   <p>
      If ignores are yellow, then warnings are transparent. Tests should either pass or
      fail. However, a unit test might not fail but also not succeed entirely: making
      it fail is too extreme and on the other hand, letting him succeed would make you
      miss the issue. Therefore, MbUnit also supports warnings, generated as part of a
      test&#8217;s code using <em>Assert.Warning()</em>. For example,</p>
   <pre class="csharpcode">      [Row(3)]
      [Row(6)]
      [RowTest]
      <span class="kwrd">public</span> <span class="kwrd">void</span> ToFizzBuzz_SendNumberDivisibleBy3ButNot5_ReturnsFizz(<span
         class="kwrd">int</span> NumberToTest)
      { 
         Assert.Warning(<span class="str">"Values divisble by 15 shouldn't be tested here"</span>);
         Assert.AreEqual(<span class="str">"fizz"</span>, FizzBuzz.FizzBuzz.ToFizzBuzz(NumberToTest));
      }</pre>
   <p>
      You can add as many warnings as you like to a single test, but bear in mind that
      warnings only appear in reports generated by MbUnit (in the Html report, they are
      displayed right after the fixture summary as shown below) and are not flagged up in the default
      output of either the console or GUI runner which only show if a test has passed,
      failed or been ignored.
   </p>
      <p>
      <a href="../Images/Ignores[2].png" target="_blank" title="Display this image at full size">
         <img src="../Images/Ignores[2]Thumbnail.png" alt="MbUnit report showing test warnings. Click this thumbnail image to show full size image" /></a></p>
</body>
</html>
