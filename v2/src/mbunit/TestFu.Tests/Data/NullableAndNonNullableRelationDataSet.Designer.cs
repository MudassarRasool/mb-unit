//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.40607.16
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace TestFu.Tests.Data {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("NullableAndNonNullableRelationDataSet")]
    public class NullableAndNonNullableRelationDataSet : System.Data.DataSet {
        
        private ADataTable tableA;
        
        private BDataTable tableB;
        
        private CDataTable tableC;
        
        private System.Data.DataRelation relationFK_B_A;
        
        private System.Data.DataRelation relationFK_B_C;
        
        public NullableAndNonNullableRelationDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        protected NullableAndNonNullableRelationDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["A"] != null)) {
                    base.Tables.Add(new ADataTable(ds.Tables["A"]));
                }
                if ((ds.Tables["B"] != null)) {
                    base.Tables.Add(new BDataTable(ds.Tables["B"]));
                }
                if ((ds.Tables["C"] != null)) {
                    base.Tables.Add(new CDataTable(ds.Tables["C"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ADataTable A {
            get {
                return this.tableA;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BDataTable B {
            get {
                return this.tableB;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CDataTable C {
            get {
                return this.tableC;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(true)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        public override System.Data.DataSet Clone() {
            NullableAndNonNullableRelationDataSet cln = ((NullableAndNonNullableRelationDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["A"] != null)) {
                base.Tables.Add(new ADataTable(ds.Tables["A"]));
            }
            if ((ds.Tables["B"] != null)) {
                base.Tables.Add(new BDataTable(ds.Tables["B"]));
            }
            if ((ds.Tables["C"] != null)) {
                base.Tables.Add(new CDataTable(ds.Tables["C"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableA = ((ADataTable)(base.Tables["A"]));
            if ((initTable == true)) {
                if ((this.tableA != null)) {
                    this.tableA.InitVars();
                }
            }
            this.tableB = ((BDataTable)(base.Tables["B"]));
            if ((initTable == true)) {
                if ((this.tableB != null)) {
                    this.tableB.InitVars();
                }
            }
            this.tableC = ((CDataTable)(base.Tables["C"]));
            if ((initTable == true)) {
                if ((this.tableC != null)) {
                    this.tableC.InitVars();
                }
            }
            this.relationFK_B_A = this.Relations["FK_B_A"];
            this.relationFK_B_C = this.Relations["FK_B_C"];
        }
        
        private void InitClass() {
            this.DataSetName = "NullableAndNonNullableRelationDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/NullableAndNonNullableRelationDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableA = new ADataTable();
            base.Tables.Add(this.tableA);
            this.tableB = new BDataTable();
            base.Tables.Add(this.tableB);
            this.tableC = new CDataTable();
            base.Tables.Add(this.tableC);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("FK_B_A", new System.Data.DataColumn[] {
                        this.tableB.BIDColumn}, new System.Data.DataColumn[] {
                        this.tableA.NullableBIDColumn});
            this.tableA.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("FK_B_C", new System.Data.DataColumn[] {
                        this.tableB.BIDColumn}, new System.Data.DataColumn[] {
                        this.tableC.NonNullableBIDColumn});
            this.tableC.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationFK_B_A = new System.Data.DataRelation("FK_B_A", new System.Data.DataColumn[] {
                        this.tableB.BIDColumn}, new System.Data.DataColumn[] {
                        this.tableA.NullableBIDColumn}, false);
            this.Relations.Add(this.relationFK_B_A);
            this.relationFK_B_C = new System.Data.DataRelation("FK_B_C", new System.Data.DataColumn[] {
                        this.tableB.BIDColumn}, new System.Data.DataColumn[] {
                        this.tableC.NonNullableBIDColumn}, false);
            this.Relations.Add(this.relationFK_B_C);
            this.ExtendedProperties.Add("DSGenerator_DataSetName", "NullableAndNonNullableRelationDataSet");
            this.ExtendedProperties.Add("User_DataSetName", "NullableAndNonNullableRelationDataSet");
        }
        
        private bool ShouldSerializeA() {
            return false;
        }
        
        private bool ShouldSerializeB() {
            return false;
        }
        
        private bool ShouldSerializeC() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            NullableAndNonNullableRelationDataSet ds = new NullableAndNonNullableRelationDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            if (PublishLegacyWSDL()) {
                System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
                any.Namespace = ds.Namespace;
                sequence.Items.Add(any);
            }
            else {
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(0);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                sequence.MaxOccurs = decimal.MaxValue;
                System.Xml.Schema.XmlSchemaAttribute attribute = new System.Xml.Schema.XmlSchemaAttribute();
                attribute.Name = "namespace";
                attribute.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute);
            }
            type.Particle = sequence;
            return type;
        }
        
        protected static bool PublishLegacyWSDL() {
            System.Collections.Specialized.NameValueCollection settings = ((System.Collections.Specialized.NameValueCollection)(System.Configuration.ConfigurationSettings.GetConfig("system.data.dataset")));
            if ((settings != null)) {
                string[] values = settings.GetValues("WSDL_VERSION");
                if ((values != null)) {
                    float version = float.Parse(((string)(values[0])), ((System.IFormatProvider)(null)));
                    return (version < 2);
                }
            }
            return true;
        }
        
        public delegate void ARowChangeEventHandler(object sender, ARowChangeEvent e);
        
        public delegate void BRowChangeEventHandler(object sender, BRowChangeEvent e);
        
        public delegate void CRowChangeEventHandler(object sender, CRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class ADataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnAID;
            
            private System.Data.DataColumn columnNullableBID;
            
            private bool m_suspendValidation = false;
            
            public ADataTable() {
                this.TableName = "A";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal ADataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected ADataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn AIDColumn {
                get {
                    return this.columnAID;
                }
            }
            
            internal System.Data.DataColumn NullableBIDColumn {
                get {
                    return this.columnNullableBID;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public ARow this[int index] {
                get {
                    return ((ARow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event AIDChangeEventHandler AIDChanging;
            
            public event AIDChangeEventHandler AIDChanged;
            
            public event NullableBIDChangeEventHandler NullableBIDChanging;
            
            public event NullableBIDChangeEventHandler NullableBIDChanged;
            
            public event ARowChangeEventHandler ARowChanged;
            
            public event ARowChangeEventHandler ARowChanging;
            
            public event ARowChangeEventHandler ARowDeleted;
            
            public event ARowChangeEventHandler ARowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "AID")) {
                    if ((this.AIDChanging != null)) {
                        this.AIDChanging(this, new AIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "NullableBID")) {
                        if ((this.NullableBIDChanging != null)) {
                            this.NullableBIDChanging(this, new NullableBIDChangeEventArg(e));
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "AID")) {
                    if ((this.AIDChanged != null)) {
                        this.AIDChanged(this, new AIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "NullableBID")) {
                        if ((this.NullableBIDChanged != null)) {
                            this.NullableBIDChanged(this, new NullableBIDChangeEventArg(e));
                        }
                    }
                }
            }
            
            public void AddARow(ARow row) {
                this.Rows.Add(row);
            }
            
            public ARow AddARow(string AID, BRow parentBRowByFK_B_A) {
                ARow rowARow = ((ARow)(this.NewRow()));
                rowARow.ItemArray = new object[] {
                        AID,
                        parentBRowByFK_B_A[0]};
                this.Rows.Add(rowARow);
                return rowARow;
            }
            
            public ARow FindByAID(string AID) {
                return ((ARow)(this.Rows.Find(new object[] {
                            AID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                ADataTable cln = ((ADataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new ADataTable();
            }
            
            internal void InitVars() {
                this.columnAID = base.Columns["AID"];
                this.columnNullableBID = base.Columns["NullableBID"];
            }
            
            private void InitClass() {
                this.columnAID = new System.Data.DataColumn("AID", typeof(string), null, System.Data.MappingType.Element);
                this.columnAID.ExtendedProperties.Add("Generator_ChangedEventName", "AIDChanged");
                this.columnAID.ExtendedProperties.Add("Generator_ChangingEventName", "AIDChanging");
                this.columnAID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "AID");
                this.columnAID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "AIDColumn");
                this.columnAID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnAID");
                this.columnAID.ExtendedProperties.Add("Generator_DelegateName", "AIDChangeEventHandler");
                this.columnAID.ExtendedProperties.Add("Generator_EventArgName", "AIDChangeEventArg");
                this.columnAID.ExtendedProperties.Add("User_ColumnName", "AID");
                base.Columns.Add(this.columnAID);
                this.columnNullableBID = new System.Data.DataColumn("NullableBID", typeof(string), null, System.Data.MappingType.Element);
                this.columnNullableBID.ExtendedProperties.Add("Generator_ChangedEventName", "NullableBIDChanged");
                this.columnNullableBID.ExtendedProperties.Add("Generator_ChangingEventName", "NullableBIDChanging");
                this.columnNullableBID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "NullableBID");
                this.columnNullableBID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "NullableBIDColumn");
                this.columnNullableBID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnNullableBID");
                this.columnNullableBID.ExtendedProperties.Add("Generator_DelegateName", "NullableBIDChangeEventHandler");
                this.columnNullableBID.ExtendedProperties.Add("Generator_EventArgName", "NullableBIDChangeEventArg");
                this.columnNullableBID.ExtendedProperties.Add("User_ColumnName", "NullableBID");
                base.Columns.Add(this.columnNullableBID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnAID}, true));
                this.columnAID.AllowDBNull = false;
                this.columnAID.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "ARow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "ARowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "ARowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "ADataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "A");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableA");
                this.ExtendedProperties.Add("User_TableName", "A");
            }
            
            public ARow NewARow() {
                return ((ARow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ARow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ARow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ARowChanged != null)) {
                    this.ARowChanged(this, new ARowChangeEvent(((ARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ARowChanging != null)) {
                    this.ARowChanging(this, new ARowChangeEvent(((ARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ARowDeleted != null)) {
                    this.ARowDeleted(this, new ARowChangeEvent(((ARow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ARowDeleting != null)) {
                    this.ARowDeleting(this, new ARowChangeEvent(((ARow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveARow(ARow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NullableAndNonNullableRelationDataSet ds = new NullableAndNonNullableRelationDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ADataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void AIDChangeEventHandler(ADataTable sender, AIDChangeEventArg e);
            
            public class AIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public AIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ARow Row {
                    get {
                        return ((ARow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn AIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void NullableBIDChangeEventHandler(ADataTable sender, NullableBIDChangeEventArg e);
            
            public class NullableBIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public NullableBIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public ARow Row {
                    get {
                        return ((ARow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn NullableBIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class BDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnBID;
            
            private bool m_suspendValidation = false;
            
            public BDataTable() {
                this.TableName = "B";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal BDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected BDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn BIDColumn {
                get {
                    return this.columnBID;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public BRow this[int index] {
                get {
                    return ((BRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event BIDChangeEventHandler BIDChanging;
            
            public event BIDChangeEventHandler BIDChanged;
            
            public event BRowChangeEventHandler BRowChanged;
            
            public event BRowChangeEventHandler BRowChanging;
            
            public event BRowChangeEventHandler BRowDeleted;
            
            public event BRowChangeEventHandler BRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "BID")) {
                    if ((this.BIDChanging != null)) {
                        this.BIDChanging(this, new BIDChangeEventArg(e));
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "BID")) {
                    if ((this.BIDChanged != null)) {
                        this.BIDChanged(this, new BIDChangeEventArg(e));
                    }
                }
            }
            
            public void AddBRow(BRow row) {
                this.Rows.Add(row);
            }
            
            public BRow AddBRow(string BID) {
                BRow rowBRow = ((BRow)(this.NewRow()));
                rowBRow.ItemArray = new object[] {
                        BID};
                this.Rows.Add(rowBRow);
                return rowBRow;
            }
            
            public BRow FindByBID(string BID) {
                return ((BRow)(this.Rows.Find(new object[] {
                            BID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                BDataTable cln = ((BDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new BDataTable();
            }
            
            internal void InitVars() {
                this.columnBID = base.Columns["BID"];
            }
            
            private void InitClass() {
                this.columnBID = new System.Data.DataColumn("BID", typeof(string), null, System.Data.MappingType.Element);
                this.columnBID.ExtendedProperties.Add("Generator_ChangedEventName", "BIDChanged");
                this.columnBID.ExtendedProperties.Add("Generator_ChangingEventName", "BIDChanging");
                this.columnBID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "BID");
                this.columnBID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "BIDColumn");
                this.columnBID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnBID");
                this.columnBID.ExtendedProperties.Add("Generator_DelegateName", "BIDChangeEventHandler");
                this.columnBID.ExtendedProperties.Add("Generator_EventArgName", "BIDChangeEventArg");
                this.columnBID.ExtendedProperties.Add("User_ColumnName", "BID");
                base.Columns.Add(this.columnBID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnBID}, true));
                this.columnBID.AllowDBNull = false;
                this.columnBID.Unique = true;
                this.ExtendedProperties.Add("Generator_RowClassName", "BRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "BRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "BRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "BDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "B");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableB");
                this.ExtendedProperties.Add("User_TableName", "B");
            }
            
            public BRow NewBRow() {
                return ((BRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new BRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BRowChanged != null)) {
                    this.BRowChanged(this, new BRowChangeEvent(((BRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BRowChanging != null)) {
                    this.BRowChanging(this, new BRowChangeEvent(((BRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BRowDeleted != null)) {
                    this.BRowDeleted(this, new BRowChangeEvent(((BRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BRowDeleting != null)) {
                    this.BRowDeleting(this, new BRowChangeEvent(((BRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBRow(BRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NullableAndNonNullableRelationDataSet ds = new NullableAndNonNullableRelationDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void BIDChangeEventHandler(BDataTable sender, BIDChangeEventArg e);
            
            public class BIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public BIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public BRow Row {
                    get {
                        return ((BRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn BIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public class CDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnCID;
            
            private System.Data.DataColumn columnNonNullableBID;
            
            private bool m_suspendValidation = false;
            
            public CDataTable() {
                this.TableName = "C";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal CDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected CDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            internal System.Data.DataColumn CIDColumn {
                get {
                    return this.columnCID;
                }
            }
            
            internal System.Data.DataColumn NonNullableBIDColumn {
                get {
                    return this.columnNonNullableBID;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public CRow this[int index] {
                get {
                    return ((CRow)(this.Rows[index]));
                }
            }
            
            public bool SuspendValidation {
                get {
                    return this.m_suspendValidation;
                }
                set {
                    this.m_suspendValidation = value;
                }
            }
            
            public event CIDChangeEventHandler CIDChanging;
            
            public event CIDChangeEventHandler CIDChanged;
            
            public event NonNullableBIDChangeEventHandler NonNullableBIDChanging;
            
            public event NonNullableBIDChangeEventHandler NonNullableBIDChanged;
            
            public event CRowChangeEventHandler CRowChanged;
            
            public event CRowChangeEventHandler CRowChanging;
            
            public event CRowChangeEventHandler CRowDeleted;
            
            public event CRowChangeEventHandler CRowDeleting;
            
            protected override void OnColumnChanging(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanging(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "CID")) {
                    if ((this.CIDChanging != null)) {
                        this.CIDChanging(this, new CIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "NonNullableBID")) {
                        if ((this.NonNullableBIDChanging != null)) {
                            this.NonNullableBIDChanging(this, new NonNullableBIDChangeEventArg(e));
                        }
                    }
                }
            }
            
            protected override void OnColumnChanged(System.Data.DataColumnChangeEventArgs e) {
                base.OnColumnChanged(e);
                if ((this.SuspendValidation == true)) {
                    return;
                }
                if ((e.Column.ColumnName == "CID")) {
                    if ((this.CIDChanged != null)) {
                        this.CIDChanged(this, new CIDChangeEventArg(e));
                    }
                }
                else {
                    if ((e.Column.ColumnName == "NonNullableBID")) {
                        if ((this.NonNullableBIDChanged != null)) {
                            this.NonNullableBIDChanged(this, new NonNullableBIDChangeEventArg(e));
                        }
                    }
                }
            }
            
            public void AddCRow(CRow row) {
                this.Rows.Add(row);
            }
            
            public CRow AddCRow(string CID, BRow parentBRowByFK_B_C) {
                CRow rowCRow = ((CRow)(this.NewRow()));
                rowCRow.ItemArray = new object[] {
                        CID,
                        parentBRowByFK_B_C[0]};
                this.Rows.Add(rowCRow);
                return rowCRow;
            }
            
            public CRow FindByCID(string CID) {
                return ((CRow)(this.Rows.Find(new object[] {
                            CID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                CDataTable cln = ((CDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new CDataTable();
            }
            
            internal void InitVars() {
                this.columnCID = base.Columns["CID"];
                this.columnNonNullableBID = base.Columns["NonNullableBID"];
            }
            
            private void InitClass() {
                this.columnCID = new System.Data.DataColumn("CID", typeof(string), null, System.Data.MappingType.Element);
                this.columnCID.ExtendedProperties.Add("Generator_ChangedEventName", "CIDChanged");
                this.columnCID.ExtendedProperties.Add("Generator_ChangingEventName", "CIDChanging");
                this.columnCID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "CID");
                this.columnCID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "CIDColumn");
                this.columnCID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCID");
                this.columnCID.ExtendedProperties.Add("Generator_DelegateName", "CIDChangeEventHandler");
                this.columnCID.ExtendedProperties.Add("Generator_EventArgName", "CIDChangeEventArg");
                this.columnCID.ExtendedProperties.Add("User_ColumnName", "CID");
                base.Columns.Add(this.columnCID);
                this.columnNonNullableBID = new System.Data.DataColumn("NonNullableBID", typeof(string), null, System.Data.MappingType.Element);
                this.columnNonNullableBID.ExtendedProperties.Add("Generator_ChangedEventName", "NonNullableBIDChanged");
                this.columnNonNullableBID.ExtendedProperties.Add("Generator_ChangingEventName", "NonNullableBIDChanging");
                this.columnNonNullableBID.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "NonNullableBID");
                this.columnNonNullableBID.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "NonNullableBIDColumn");
                this.columnNonNullableBID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnNonNullableBID");
                this.columnNonNullableBID.ExtendedProperties.Add("Generator_DelegateName", "NonNullableBIDChangeEventHandler");
                this.columnNonNullableBID.ExtendedProperties.Add("Generator_EventArgName", "NonNullableBIDChangeEventArg");
                this.columnNonNullableBID.ExtendedProperties.Add("User_ColumnName", "NonNullableBID");
                base.Columns.Add(this.columnNonNullableBID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnCID}, true));
                this.columnCID.AllowDBNull = false;
                this.columnCID.Unique = true;
                this.columnNonNullableBID.AllowDBNull = false;
                this.ExtendedProperties.Add("Generator_RowClassName", "CRow");
                this.ExtendedProperties.Add("Generator_RowEvArgName", "CRowChangeEvent");
                this.ExtendedProperties.Add("Generator_RowEvHandlerName", "CRowChangeEventHandler");
                this.ExtendedProperties.Add("Generator_SuspendValidationPropName", "SuspendValidation");
                this.ExtendedProperties.Add("Generator_SuspendValidationVarName", "m_suspendValidation");
                this.ExtendedProperties.Add("Generator_TableClassName", "CDataTable");
                this.ExtendedProperties.Add("Generator_TablePropName", "C");
                this.ExtendedProperties.Add("Generator_TableVarName", "tableC");
                this.ExtendedProperties.Add("User_TableName", "C");
            }
            
            public CRow NewCRow() {
                return ((CRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CRowChanged != null)) {
                    this.CRowChanged(this, new CRowChangeEvent(((CRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CRowChanging != null)) {
                    this.CRowChanging(this, new CRowChangeEvent(((CRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CRowDeleted != null)) {
                    this.CRowDeleted(this, new CRowChangeEvent(((CRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CRowDeleting != null)) {
                    this.CRowDeleting(this, new CRowChangeEvent(((CRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCRow(CRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NullableAndNonNullableRelationDataSet ds = new NullableAndNonNullableRelationDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
            
            public delegate void CIDChangeEventHandler(CDataTable sender, CIDChangeEventArg e);
            
            public class CIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public CIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CRow Row {
                    get {
                        return ((CRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn CIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
            
            public delegate void NonNullableBIDChangeEventHandler(CDataTable sender, NonNullableBIDChangeEventArg e);
            
            public class NonNullableBIDChangeEventArg : System.EventArgs {
                
                private System.Data.DataColumnChangeEventArgs evArgs;
                
                public NonNullableBIDChangeEventArg(System.Data.DataColumnChangeEventArgs args) {
                    this.evArgs = args;
                }
                
                public CRow Row {
                    get {
                        return ((CRow)(this.evArgs.Row));
                    }
                }
                
                public System.Data.DataColumn NonNullableBIDColumn {
                    get {
                        return this.evArgs.Column;
                    }
                }
                
                public string ProposedValue {
                    get {
                        return ((string)(this.evArgs.ProposedValue));
                    }
                    set {
                        this.evArgs.ProposedValue = ((string)(value));
                    }
                }
            }
        }
        
        public class ARow : System.Data.DataRow {
            
            private ADataTable tableA;
            
            internal ARow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableA = ((ADataTable)(this.Table));
            }
            
            public string AID {
                get {
                    return ((string)(this[this.tableA.AIDColumn]));
                }
                set {
                    this[this.tableA.AIDColumn] = value;
                }
            }
            
            public string NullableBID {
                get {
                    try {
                        return ((string)(this[this.tableA.NullableBIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull", e);
                    }
                }
                set {
                    this[this.tableA.NullableBIDColumn] = value;
                }
            }
            
            public BRow BRow {
                get {
                    return ((BRow)(this.GetParentRow(this.Table.ParentRelations["FK_B_A"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_B_A"]);
                }
            }
            
            public bool IsNullableBIDNull() {
                return this.IsNull(this.tableA.NullableBIDColumn);
            }
            
            public void SetNullableBIDNull() {
                this[this.tableA.NullableBIDColumn] = System.Convert.DBNull;
            }
        }
        
        public class BRow : System.Data.DataRow {
            
            private BDataTable tableB;
            
            internal BRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableB = ((BDataTable)(this.Table));
            }
            
            public string BID {
                get {
                    return ((string)(this[this.tableB.BIDColumn]));
                }
                set {
                    this[this.tableB.BIDColumn] = value;
                }
            }
            
            public CRow[] GetCRows() {
                return ((CRow[])(this.GetChildRows(this.Table.ChildRelations["FK_B_C"])));
            }
            
            public ARow[] GetARows() {
                return ((ARow[])(this.GetChildRows(this.Table.ChildRelations["FK_B_A"])));
            }
        }
        
        public class CRow : System.Data.DataRow {
            
            private CDataTable tableC;
            
            internal CRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableC = ((CDataTable)(this.Table));
            }
            
            public string CID {
                get {
                    return ((string)(this[this.tableC.CIDColumn]));
                }
                set {
                    this[this.tableC.CIDColumn] = value;
                }
            }
            
            public string NonNullableBID {
                get {
                    return ((string)(this[this.tableC.NonNullableBIDColumn]));
                }
                set {
                    this[this.tableC.NonNullableBIDColumn] = value;
                }
            }
            
            public BRow BRow {
                get {
                    return ((BRow)(this.GetParentRow(this.Table.ParentRelations["FK_B_C"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_B_C"]);
                }
            }
        }
        
        public class ARowChangeEvent : System.EventArgs {
            
            private ARow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public ARowChangeEvent(ARow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ARow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class BRowChangeEvent : System.EventArgs {
            
            private BRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public BRowChangeEvent(BRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        public class CRowChangeEvent : System.EventArgs {
            
            private CRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public CRowChangeEvent(CRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
